 --- modulename: test4suite, funcname: ?
test4suite.py(4): from Ft.Xml.Xslt.Processor import Processor
 --- modulename: __init__, funcname: ?
__init__.py(9): """
__init__.py(12): import sys
__init__.py(13): if sys.hexversion < 0x02020100:
__init__.py(17): DEFAULT_ENCODING = 'US-ASCII'
__init__.py(18): try:
__init__.py(19):     import locale
__init__.py(23):     charset = locale.getlocale()[1]
__init__.py(24):     if charset is None:
__init__.py(27):         try:
__init__.py(29):             charset = locale.getdefaultlocale()[1] or DEFAULT_ENCODING
__init__.py(34):     DEFAULT_ENCODING = charset
__init__.py(35):     del locale
__init__.py(36):     del charset
__init__.py(39): MAX_PYTHON_RECURSION_DEPTH = 10000
__init__.py(42): class FtException(Exception):
 --- modulename: __init__, funcname: FtException
__init__.py(42): class FtException(Exception):
__init__.py(47):     def __init__(self, errorCode, messages, argtuple=(), **kwargs):
__init__.py(59):     def __getattr__(self, name):
__init__.py(64):     def __str__(self):
__init__.py(67):     def __repr__(self):
__init__.py(71): class FtWarning(Warning):
 --- modulename: __init__, funcname: FtWarning
__init__.py(71): class FtWarning(Warning):
__init__.py(72):     pass
__init__.py(75): import warnings
__init__.py(76): __stdlib__showwarning = warnings.showwarning
__init__.py(77): def __ft__showwarning(message, category, filename, lineno, file=None):
__init__.py(96): warnings.showwarning = __ft__showwarning
__init__.py(97): del warnings
__init__.py(102): try:
__init__.py(103):     import __config__
 --- modulename: __config__, funcname: ?
__config__.py(2): NAME          = '4Suite'
__config__.py(3): VERSION       = '1.0b1'
__config__.py(4): FULLNAME      = '4Suite-1.0b1'
__config__.py(5): URL           = 'http://4suite.org/'
__config__.py(6): BINDIR        = '/usr/local/bin'
__config__.py(7): DATADIR       = '/usr/local/share/4Suite'
__config__.py(8): SYSCONFDIR    = '/usr/local/etc/4Suite'
__config__.py(9): LOCALSTATEDIR = '/var/local/lib/4Suite'
__config__.py(10): LIBDIR        = '/usr/local/lib/4Suite'
__config__.py(11): DOCDIR        = '/usr/local/share/doc/4Suite-1.0b1'
__config__.py(12): LOCALEDIR     = '/usr/local/share/locale'
__init__.py(131): def GetConfigVars(*names):
__init__.py(158): def GetConfigVar(name):
__init__.py(165): __version__ = __config__.VERSION
__init__.py(171): import gettext
__init__.py(172): translation = gettext.translation(__config__.NAME, __config__.LOCALEDIR,
__init__.py(173):                                   fallback=True)
__init__.py(174): TranslateMessage = translation.gettext
__init__.py(175): del translation, gettext
 --- modulename: __init__, funcname: ?
__init__.py(9): """
__init__.py(11): __all__ = [# constants
__init__.py(28): EMPTY_NAMESPACE = None
__init__.py(29): EMPTY_PREFIX = None
__init__.py(30): XML_NAMESPACE = u"http://www.w3.org/XML/1998/namespace"
__init__.py(31): XMLNS_NAMESPACE = u"http://www.w3.org/2000/xmlns/"
__init__.py(32): XHTML_NAMESPACE = u"http://www.w3.org/1999/xhtml"
__init__.py(35): READ_EXTERNAL_DTD = True
__init__.py(37): from Ft import FtException, __version__
__init__.py(39): class ReaderException(FtException):
 --- modulename: __init__, funcname: ReaderException
__init__.py(39): class ReaderException(FtException):
__init__.py(44):     XML_PARSE_ERROR = 100
__init__.py(45):     RECURSIVE_PARSE_ERROR = 101
__init__.py(46):     XMLNS_UNKNOWN_PREFIX = 200
__init__.py(47):     INVALID_XMLNS = 201
__init__.py(48):     XMLNS_DUPLICATE_ATTRS = 202
__init__.py(50):     def __init__(self, errorCode, *args):
__init__.py(54): class XIncludeException(FtException):
 --- modulename: __init__, funcname: XIncludeException
__init__.py(54): class XIncludeException(FtException):
__init__.py(58):     MISSING_HREF = 10
__init__.py(59):     INVALID_PARSE_ATTR = 11
__init__.py(61):     def __init__(self, errorCode, *args):
__init__.py(64): import MessageSource
 --- modulename: MessageSource, funcname: ?
MessageSource.py(9): """
MessageSource.py(11): from Ft import TranslateMessage as _
MessageSource.py(12): from Ft.Xml import ReaderException, XIncludeException
MessageSource.py(14): XINCLUDE = {
MessageSource.py(19): READER = {
__init__.py(66): from Ft.Xml.Lib.XmlString import SplitQName
 --- modulename: __init__, funcname: ?
__init__.py(9): """
__init__.py(11): import os
__init__.py(12): from xml.dom import Node
 --- modulename: __init__, funcname: ?
__init__.py(13): """
__init__.py(16): __all__ = ["dom", "parsers", "sax"]
__init__.py(21): __version__ = "$Revision: 1.15 $".split()[-2:][0]
__init__.py(24): _MINIMUM_XMLPLUS_VERSION = (0, 8, 4)
__init__.py(27): try:
__init__.py(28):     import _xmlplus
__init__.py(29): except ImportError:
__init__.py(30):     pass
 --- modulename: __init__, funcname: ?
__init__.py(15): """
__init__.py(18): class Node:
 --- modulename: __init__, funcname: Node
__init__.py(18): class Node:
__init__.py(28):     ELEMENT_NODE                = 1
__init__.py(29):     ATTRIBUTE_NODE              = 2
__init__.py(30):     TEXT_NODE                   = 3
__init__.py(31):     CDATA_SECTION_NODE          = 4
__init__.py(32):     ENTITY_REFERENCE_NODE       = 5
__init__.py(33):     ENTITY_NODE                 = 6
__init__.py(34):     PROCESSING_INSTRUCTION_NODE = 7
__init__.py(35):     COMMENT_NODE                = 8
__init__.py(36):     DOCUMENT_NODE               = 9
__init__.py(37):     DOCUMENT_TYPE_NODE          = 10
__init__.py(38):     DOCUMENT_FRAGMENT_NODE      = 11
__init__.py(39):     NOTATION_NODE               = 12
__init__.py(43): INDEX_SIZE_ERR                 = 1
__init__.py(44): DOMSTRING_SIZE_ERR             = 2
__init__.py(45): HIERARCHY_REQUEST_ERR          = 3
__init__.py(46): WRONG_DOCUMENT_ERR             = 4
__init__.py(47): INVALID_CHARACTER_ERR          = 5
__init__.py(48): NO_DATA_ALLOWED_ERR            = 6
__init__.py(49): NO_MODIFICATION_ALLOWED_ERR    = 7
__init__.py(50): NOT_FOUND_ERR                  = 8
__init__.py(51): NOT_SUPPORTED_ERR              = 9
__init__.py(52): INUSE_ATTRIBUTE_ERR            = 10
__init__.py(53): INVALID_STATE_ERR              = 11
__init__.py(54): SYNTAX_ERR                     = 12
__init__.py(55): INVALID_MODIFICATION_ERR       = 13
__init__.py(56): NAMESPACE_ERR                  = 14
__init__.py(57): INVALID_ACCESS_ERR             = 15
__init__.py(58): VALIDATION_ERR                 = 16
__init__.py(61): class DOMException(Exception):
 --- modulename: __init__, funcname: DOMException
__init__.py(61): class DOMException(Exception):
__init__.py(65):     def __init__(self, *args, **kw):
__init__.py(71):     def _get_code(self):
__init__.py(75): class IndexSizeErr(DOMException):
 --- modulename: __init__, funcname: IndexSizeErr
__init__.py(75): class IndexSizeErr(DOMException):
__init__.py(76):     code = INDEX_SIZE_ERR
__init__.py(78): class DomstringSizeErr(DOMException):
 --- modulename: __init__, funcname: DomstringSizeErr
__init__.py(78): class DomstringSizeErr(DOMException):
__init__.py(79):     code = DOMSTRING_SIZE_ERR
__init__.py(81): class HierarchyRequestErr(DOMException):
 --- modulename: __init__, funcname: HierarchyRequestErr
__init__.py(81): class HierarchyRequestErr(DOMException):
__init__.py(82):     code = HIERARCHY_REQUEST_ERR
__init__.py(84): class WrongDocumentErr(DOMException):
 --- modulename: __init__, funcname: WrongDocumentErr
__init__.py(84): class WrongDocumentErr(DOMException):
__init__.py(85):     code = WRONG_DOCUMENT_ERR
__init__.py(87): class InvalidCharacterErr(DOMException):
 --- modulename: __init__, funcname: InvalidCharacterErr
__init__.py(87): class InvalidCharacterErr(DOMException):
__init__.py(88):     code = INVALID_CHARACTER_ERR
__init__.py(90): class NoDataAllowedErr(DOMException):
 --- modulename: __init__, funcname: NoDataAllowedErr
__init__.py(90): class NoDataAllowedErr(DOMException):
__init__.py(91):     code = NO_DATA_ALLOWED_ERR
__init__.py(93): class NoModificationAllowedErr(DOMException):
 --- modulename: __init__, funcname: NoModificationAllowedErr
__init__.py(93): class NoModificationAllowedErr(DOMException):
__init__.py(94):     code = NO_MODIFICATION_ALLOWED_ERR
__init__.py(96): class NotFoundErr(DOMException):
 --- modulename: __init__, funcname: NotFoundErr
__init__.py(96): class NotFoundErr(DOMException):
__init__.py(97):     code = NOT_FOUND_ERR
__init__.py(99): class NotSupportedErr(DOMException):
 --- modulename: __init__, funcname: NotSupportedErr
__init__.py(99): class NotSupportedErr(DOMException):
__init__.py(100):     code = NOT_SUPPORTED_ERR
__init__.py(102): class InuseAttributeErr(DOMException):
 --- modulename: __init__, funcname: InuseAttributeErr
__init__.py(102): class InuseAttributeErr(DOMException):
__init__.py(103):     code = INUSE_ATTRIBUTE_ERR
__init__.py(105): class InvalidStateErr(DOMException):
 --- modulename: __init__, funcname: InvalidStateErr
__init__.py(105): class InvalidStateErr(DOMException):
__init__.py(106):     code = INVALID_STATE_ERR
__init__.py(108): class SyntaxErr(DOMException):
 --- modulename: __init__, funcname: SyntaxErr
__init__.py(108): class SyntaxErr(DOMException):
__init__.py(109):     code = SYNTAX_ERR
__init__.py(111): class InvalidModificationErr(DOMException):
 --- modulename: __init__, funcname: InvalidModificationErr
__init__.py(111): class InvalidModificationErr(DOMException):
__init__.py(112):     code = INVALID_MODIFICATION_ERR
__init__.py(114): class NamespaceErr(DOMException):
 --- modulename: __init__, funcname: NamespaceErr
__init__.py(114): class NamespaceErr(DOMException):
__init__.py(115):     code = NAMESPACE_ERR
__init__.py(117): class InvalidAccessErr(DOMException):
 --- modulename: __init__, funcname: InvalidAccessErr
__init__.py(117): class InvalidAccessErr(DOMException):
__init__.py(118):     code = INVALID_ACCESS_ERR
__init__.py(120): class ValidationErr(DOMException):
 --- modulename: __init__, funcname: ValidationErr
__init__.py(120): class ValidationErr(DOMException):
__init__.py(121):     code = VALIDATION_ERR
__init__.py(123): class UserDataHandler:
 --- modulename: __init__, funcname: UserDataHandler
__init__.py(123): class UserDataHandler:
__init__.py(128):     NODE_CLONED   = 1
__init__.py(129):     NODE_IMPORTED = 2
__init__.py(130):     NODE_DELETED  = 3
__init__.py(131):     NODE_RENAMED  = 4
__init__.py(133): XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
__init__.py(134): XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
__init__.py(135): XHTML_NAMESPACE = "http://www.w3.org/1999/xhtml"
__init__.py(136): EMPTY_NAMESPACE = None
__init__.py(137): EMPTY_PREFIX = None
__init__.py(139): from domreg import getDOMImplementation,registerDOMImplementation
__init__.py(14): from Ft.Xml import XML_NAMESPACE
__init__.py(16): __all__ = ['Language']
__init__.py(19): def Language(node):
__init__.py(70): def ApplyXUpdate(*args, **kw_args):
__init__.py(75): def ApplyXupdate(*args, **kw_args):
__init__.py(80): from distutils import version
 --- modulename: __init__, funcname: ?
__init__.py(9): """
__init__.py(13): __revision__ = "$Id: __init__.py,v 1.26.2.1 2005/01/20 19:25:24 theller Exp $"
__init__.py(15): __version__ = "2.4.1"
__init__.py(81): pyxml_required = version.StrictVersion('0.8.0')
__init__.py(82): def CheckVersion(feature=None):
__init__.py(110): HAS_PYEXPAT = True
__init__.py(111): try:
__init__.py(112):     from xml.parsers import expat
 --- modulename: __init__, funcname: ?
__init__.py(8): """
__init__.py(113):     expat.ParserCreate
__init__.py(114):     del expat
__init__.py(118): from MarkupWriter import MarkupWriter
 --- modulename: MarkupWriter, funcname: ?
MarkupWriter.py(9): """
MarkupWriter.py(11): import sys
MarkupWriter.py(12): from Ft.Xml import XML_NAMESPACE, EMPTY_NAMESPACE, EMPTY_PREFIX, XMLNS_NAMESPACE
MarkupWriter.py(14): class MarkupWriter(object):
 --- modulename: MarkupWriter, funcname: MarkupWriter
MarkupWriter.py(14): class MarkupWriter(object):
MarkupWriter.py(49):     def __init__(self, stream=sys.stdout, **wargs):
MarkupWriter.py(62):     def __getattr__(self, value):
MarkupWriter.py(68):     def startElement(self, tagName, namespace=EMPTY_NAMESPACE, extraNss=None,
MarkupWriter.py(92):     def simpleElement(self, tagName, namespace=EMPTY_NAMESPACE, extraNss=None,
MarkupWriter.py(114):     def xmlFragment(self, fragment):
 --- modulename: __init__, funcname: ?
__init__.py(9): """
__init__.py(13): XSL_NAMESPACE = u'http://www.w3.org/1999/XSL/Transform'
__init__.py(15): import MessageSource
 --- modulename: MessageSource, funcname: ?
MessageSource.py(9): """
MessageSource.py(11): from Ft import TranslateMessage as _
MessageSource.py(13): POSITION_INFO = _('In stylesheet %s, line %s, column %s:\n%s')
MessageSource.py(15): EXPRESSION_POSITION_INFO = _('In stylesheet %s, line %s, column %s in "%s":\n'
MessageSource.py(18): XSLT_EXPRESSION_POSITION_INFO = _('%s\n'
MessageSource.py(21): BUILTIN_TEMPLATE_WITH_PARAMS = _('Built-in template invoked with params that '
MessageSource.py(25): TEMPLATE_CONFLICT_LOCATION = _('In stylesheet %s, line %s, column %s, pattern %s')
MessageSource.py(28): DEFAULT_MESSAGE_PREFIX = _('STYLESHEET MESSAGE:\n')
MessageSource.py(29): DEFAULT_MESSAGE_SUFFIX = _('\nEND STYLESHEET MESSAGE\n')
MessageSource.py(31): class Error:
 --- modulename: MessageSource, funcname: Error
MessageSource.py(31): class Error:
MessageSource.py(36):     NO_STYLESHEET = 20
MessageSource.py(38):     LITERAL_RESULT_MISSING_VERSION = 22
MessageSource.py(39):     STYLESHEET_PARSE_ERROR = 23
MessageSource.py(40):     SOURCE_PARSE_ERROR = 24
MessageSource.py(43):     XSLT_ILLEGAL_ELEMENT = 27
MessageSource.py(45):     CIRCULAR_VAR = 29
MessageSource.py(46):     DUPLICATE_TOP_LEVEL_VAR = 30
MessageSource.py(47):     DUPLICATE_NAMESPACE_ALIAS = 31
MessageSource.py(50):     ILLEGAL_ELEMENT_CHILD = 50
MessageSource.py(51):     ILLEGAL_TEXT_CHILD_PARSE = 51
MessageSource.py(52):     UNDEFINED_PREFIX = 52
MessageSource.py(55):     MISSING_REQUIRED_ATTRIBUTE = 70
MessageSource.py(56):     ILLEGAL_NULL_NAMESPACE_ATTR = 71
MessageSource.py(57):     ILLEGAL_XSL_NAMESPACE_ATTR = 72
MessageSource.py(58):     INVALID_ATTR_CHOICE = 73
MessageSource.py(59):     INVALID_CHAR_ATTR = 74
MessageSource.py(60):     INVALID_NUMBER_ATTR = 75
MessageSource.py(61):     INVALID_NS_URIREF_ATTR = 76
MessageSource.py(62):     INVALID_ID_ATTR = 77
MessageSource.py(63):     INVALID_QNAME_ATTR = 78
MessageSource.py(64):     INVALID_NCNAME_ATTR = 79
MessageSource.py(65):     INVALID_PREFIX_ATTR = 80
MessageSource.py(66):     INVALID_NMTOKEN_ATTR = 81
MessageSource.py(67):     QNAME_BUT_NOT_NCNAME = 82
MessageSource.py(68):     AVT_SYNTAX = 83
MessageSource.py(69):     AVT_EMPTY = 84
MessageSource.py(70):     INVALID_AVT = 85
MessageSource.py(71):     INVALID_PATTERN = 86
MessageSource.py(72):     INVALID_EXPRESSION = 87
MessageSource.py(77):     APPLYIMPORTS_WITH_NULL_CURRENT_TEMPLATE = 100
MessageSource.py(80):     ILLEGAL_IMPORT = 110
MessageSource.py(82):     INCLUDE_NOT_FOUND = 112
MessageSource.py(83):     CIRCULAR_INCLUDE = 113
MessageSource.py(86):     ILLEGAL_CHOOSE_CHILD = 120
MessageSource.py(87):     CHOOSE_REQUIRES_WHEN = 121
MessageSource.py(94):     NAMED_TEMPLATE_NOT_FOUND = 131
MessageSource.py(98):     MULTIPLE_MATCH_TEMPLATES = 141
MessageSource.py(99):     DUPLICATE_NAMED_TEMPLATE = 142
MessageSource.py(102):     ATTRIBUTE_ADDED_TOO_LATE = 150
MessageSource.py(104):     ATTRIBUTE_ADDED_TO_NON_ELEMENT = 152
MessageSource.py(105):     NONTEXT_IN_ATTRIBUTE = 153
MessageSource.py(106):     BAD_ATTRIBUTE_NAME = 154
MessageSource.py(109):     UNDEFINED_ATTRIBUTE_SET = 160
MessageSource.py(112):     INVALID_FOREACH_SELECT = 170
MessageSource.py(121):     ILLEGAL_TEXT_CHILD = 200
MessageSource.py(126):     ILLEGAL_APPLYTEMPLATE_NODESET = 212
MessageSource.py(131):     CIRCULAR_ATTRIBUTE_SET = 222
MessageSource.py(136):     ILLEGAL_SHADOWING = 232
MessageSource.py(137):     VAR_WITH_CONTENT_AND_SELECT = 233
MessageSource.py(141):     STYLESHEET_REQUESTED_TERMINATION = 241
MessageSource.py(144):     ILLEGAL_XML_PI = 250
MessageSource.py(145):     NONTEXT_IN_PI = 251
MessageSource.py(148):     UNKNOWN_OUTPUT_METHOD = 260
MessageSource.py(151):     DUPLICATE_DECIMAL_FORMAT = 270
MessageSource.py(152):     UNDEFINED_DECIMAL_FORMAT = 271
MessageSource.py(163):     ILLEGAL_NUMBER_FORMAT_VALUE = 293
MessageSource.py(164):     UNSUPPORTED_NUMBER_LANG_VALUE = 294
MessageSource.py(165):     UNSUPPORTED_NUMBER_LETTER_FOR_LANG = 295
MessageSource.py(171):     NONTEXT_IN_COMMENT = 310
MessageSource.py(174):     FWD_COMPAT_WITHOUT_FALLBACK = 320
MessageSource.py(175):     UNKNOWN_EXTENSION_ELEMENT = 321
MessageSource.py(178):     DOC_FUNC_EMPTY_NODESET = 1000
MessageSource.py(179):     UNKNOWN_NODE_BASE_URI = 1001
MessageSource.py(182):     WRONG_ARGUMENT_TYPE = 2001
MessageSource.py(183):     INVALID_QNAME_ARGUMENT = 2002
MessageSource.py(188):     RESTRICTED_OUTPUT_VIOLATION = 7000
MessageSource.py(193): g_errorMessages = {
__init__.py(16): Error = MessageSource.Error
__init__.py(20): from Ft import FtException
__init__.py(21): class XsltException(FtException):
 --- modulename: __init__, funcname: XsltException
__init__.py(21): class XsltException(FtException):
__init__.py(22):     def __init__(self, errorCode, *args):
__init__.py(27): class XsltParserException(XsltException):
 --- modulename: __init__, funcname: XsltParserException
__init__.py(27): class XsltParserException(XsltException):
__init__.py(33):     def __init__(self, code, locator, *args):
__init__.py(44): class XsltRuntimeException(XsltException):
 --- modulename: __init__, funcname: XsltRuntimeException
__init__.py(44): class XsltRuntimeException(XsltException):
__init__.py(45):     def __init__(self, code, xsltelement, *args):
__init__.py(59): class CategoryTypes:
 --- modulename: __init__, funcname: CategoryTypes
__init__.py(59): class CategoryTypes:
__init__.py(61):     INSTRUCTION = 0
__init__.py(62):     TOP_LEVEL_ELEMENT = 1
__init__.py(63):     RESULT_ELEMENT = 2
__init__.py(65): import XPatternParserc as XPatternParser
 --- modulename: __init__, funcname: ?
__init__.py(9): """
__init__.py(12): XPATH_NAMESPACE_NODE = NAMESPACE_NODE = 13
__init__.py(14): FT_EXT_NAMESPACE = 'http://xmlns.4suite.org/ext'
__init__.py(16): __all__ = [# global constants:
__init__.py(33): from Ft import FtException
__init__.py(35): class XPathException(FtException):
 --- modulename: __init__, funcname: XPathException
__init__.py(35): class XPathException(FtException):
__init__.py(39):     def __init__(self, errorCode, messages, args):
__init__.py(43): class CompiletimeException(XPathException):
 --- modulename: __init__, funcname: CompiletimeException
__init__.py(43): class CompiletimeException(XPathException):
__init__.py(50):     INTERNAL = 1
__init__.py(52):     SYNTAX = 2
__init__.py(54):     def __init__(self, errorCode, *args):
__init__.py(62): class RuntimeException(XPathException):
 --- modulename: __init__, funcname: RuntimeException
__init__.py(62): class RuntimeException(XPathException):
__init__.py(69):     INTERNAL = 1
__init__.py(71):     NO_CONTEXT         = 10
__init__.py(72):     UNDEFINED_VARIABLE = 100
__init__.py(73):     UNDEFINED_PREFIX   = 101
__init__.py(74):     UNDEFINED_FUNCTION = 102
__init__.py(75):     WRONG_ARGUMENTS    = 200
__init__.py(76):     ARGCOUNT_NONE      = 201
__init__.py(77):     ARGCOUNT_ATLEAST   = 202
__init__.py(78):     ARGCOUNT_EXACT     = 203
__init__.py(79):     ARGCOUNT_ATMOST    = 204
__init__.py(81):     def __init__(self, errorCode, *args):
__init__.py(93): import XPathParserc as XPathParser
 --- modulename: ParsedAbsoluteLocationPath, funcname: ?
ParsedAbsoluteLocationPath.py(13): """
ParsedAbsoluteLocationPath.py(15): class ParsedAbsoluteLocationPath:
 --- modulename: ParsedAbsoluteLocationPath, funcname: ParsedAbsoluteLocationPath
ParsedAbsoluteLocationPath.py(15): class ParsedAbsoluteLocationPath:
ParsedAbsoluteLocationPath.py(16):     def __init__(self, child):
ParsedAbsoluteLocationPath.py(19):     def evaluate(self, context):
ParsedAbsoluteLocationPath.py(32):     select = evaluate
ParsedAbsoluteLocationPath.py(34):     def pprint(self, indent=''):
ParsedAbsoluteLocationPath.py(39):     def __str__(self):
ParsedAbsoluteLocationPath.py(45):     def __repr__(self):
 --- modulename: ParsedRelativeLocationPath, funcname: ?
ParsedRelativeLocationPath.py(9): """
ParsedRelativeLocationPath.py(11): class ParsedRelativeLocationPath:
 --- modulename: ParsedRelativeLocationPath, funcname: ParsedRelativeLocationPath
ParsedRelativeLocationPath.py(11): class ParsedRelativeLocationPath:
ParsedRelativeLocationPath.py(12):     def __init__(self, left, right):
ParsedRelativeLocationPath.py(17):     def evaluate(self, context):
ParsedRelativeLocationPath.py(31):     select = evaluate
ParsedRelativeLocationPath.py(33):     def pprint(self, indent=''):
ParsedRelativeLocationPath.py(38):     def __str__(self):
ParsedRelativeLocationPath.py(44):     def __repr__(self):
 --- modulename: ParsedPredicateList, funcname: ?
ParsedPredicateList.py(9): """
ParsedPredicateList.py(11): from Ft.Lib import number
 --- modulename: __init__, funcname: ?
__init__.py(10): """
__init__.py(12): import os
__init__.py(14): from Ft import FtException
__init__.py(17): class UriException(FtException):
 --- modulename: __init__, funcname: UriException
__init__.py(17): class UriException(FtException):
__init__.py(22):     INVALID_BASE_URI = 100
__init__.py(25):     RELATIVE_BASE_URI = 111
__init__.py(26):     OPAQUE_BASE_URI = 112
__init__.py(28):     NON_FILE_URI = 120
__init__.py(29):     UNIX_REMOTE_HOST_FILE_URI = 121
__init__.py(31):     RESOURCE_ERROR = 130
__init__.py(33):     SCHEME_REQUIRED = 200 # for SchemeRegistryResolver
__init__.py(34):     UNSUPPORTED_SCHEME = 201
__init__.py(35):     IDNA_UNSUPPORTED = 202
__init__.py(37):     INVALID_PUBLIC_ID_URN = 300
__init__.py(39):     UNSUPPORTED_PLATFORM = 1000
__init__.py(41):     def __init__(self, errorCode, *args, **kwargs):
__init__.py(52): def Truncate(text, length):
__init__.py(63): def Wrap(text, width):
__init__.py(82): def CloseStream(stream, quiet=False):
ParsedPredicateList.py(12): from Ft.Xml.XPath import Conversions
 --- modulename: Conversions, funcname: ?
Conversions.py(13): """
Conversions.py(15): import types
Conversions.py(16): from xml.dom import Node
Conversions.py(18): from Ft.Lib import number, boolean
Conversions.py(20): StringValue = lambda obj: _strConversions.get(type(obj), _strUnknown)(obj)
Conversions.py(22): NumberValue = lambda obj: _numConversions.get(type(obj), _numUnknown)(obj)
Conversions.py(24): BooleanValue = lambda obj: _boolConversions.get(type(obj), _boolUnknown)(obj)
Conversions.py(28): def _strUnknown(object):
Conversions.py(36): def _strInstance(object):
Conversions.py(55): def _strFloat(float):
Conversions.py(69): _strConversions = {
Conversions.py(82): def _numString(string):
Conversions.py(95): _numUnknown = lambda object: _numString(StringValue(object))
Conversions.py(97): _numConversions = {
Conversions.py(108): _boolConversions = {
Conversions.py(118): _boolUnknown = lambda object: boolean.bool(StringValue(object))
Conversions.py(120): try:
Conversions.py(122):     from _conversions import *
ParsedPredicateList.py(13): from Ft.Xml.XPath.Types import NumberTypes, g_xpathPrimitiveTypes
 --- modulename: Types, funcname: ?
Types.py(9): """
Types.py(11): __all__ = ['NodesetType', 'StringType', 'NumberType', 'BooleanType',
Types.py(14): from xml.dom import Node
Types.py(16): from Ft.Lib import boolean
Types.py(17): from Ft.Xml.XPath import NAMESPACE_NODE
Types.py(21): NodesetType = list
Types.py(22): StringType = unicode
Types.py(23): NumberType = float
Types.py(24): BooleanType = boolean.BooleanType
Types.py(28): g_xpathPrimitiveTypes = {
Types.py(39): NumberTypes = {
Types.py(48): g_xpathRecognizedNodes = {
ParsedPredicateList.py(15): __all__ = ['ParsedPredicateList']
ParsedPredicateList.py(17): class ParsedPredicateList:
 --- modulename: ParsedPredicateList, funcname: ParsedPredicateList
ParsedPredicateList.py(17): class ParsedPredicateList:
ParsedPredicateList.py(18):     def __init__(self, preds):
ParsedPredicateList.py(27):     def append(self,pred):
ParsedPredicateList.py(31):     def filter(self, nodeList, context, reverse):
ParsedPredicateList.py(55):     def __getitem__(self, index):
ParsedPredicateList.py(58):     def __len__(self):
ParsedPredicateList.py(61):     def pprint(self, indent=''):
ParsedPredicateList.py(66):     def __str__(self):
ParsedPredicateList.py(72):     def __repr__(self):
 --- modulename: ParsedStep, funcname: ?
ParsedStep.py(9): """
ParsedStep.py(11): from xml.dom import Node
ParsedStep.py(13): from Ft.Xml.XPath import Types
ParsedStep.py(16): class ParsedStep:
 --- modulename: ParsedStep, funcname: ParsedStep
ParsedStep.py(16): class ParsedStep:
ParsedStep.py(17):     def __init__(self, axis, nodeTest, predicates=None):
ParsedStep.py(23):     def evaluate(self, context):
ParsedStep.py(32):     select = evaluate
ParsedStep.py(34):     def pprint(self, indent=''):
ParsedStep.py(40):     def __str__(self):
ParsedStep.py(43):     def __repr__(self):
ParsedStep.py(49): class ParsedAbbreviatedStep:
 --- modulename: ParsedStep, funcname: ParsedAbbreviatedStep
ParsedStep.py(49): class ParsedAbbreviatedStep:
ParsedStep.py(50):     def __init__(self, parent):
ParsedStep.py(53):     def evaluate(self, context):
ParsedStep.py(59):     select = evaluate
ParsedStep.py(61):     def pprint(self, indent=''):
ParsedStep.py(64):     def __str__(self):
ParsedStep.py(67):     def __repr__(self):
ParsedStep.py(72): class ParsedNodeSetFunction:
 --- modulename: ParsedStep, funcname: ParsedNodeSetFunction
ParsedStep.py(72): class ParsedNodeSetFunction:
ParsedStep.py(73):     def __init__(self, function, predicates=None):
ParsedStep.py(78):     def evaluate(self, context):
ParsedStep.py(93):     select = evaluate
ParsedStep.py(95):     def pprint(self, indent=''):
ParsedStep.py(100):     def __str__(self):
ParsedStep.py(103):     def __repr__(self):
 --- modulename: ParsedAxisSpecifier, funcname: ?
ParsedAxisSpecifier.py(9): """
ParsedAxisSpecifier.py(11): from xml.dom import Node
ParsedAxisSpecifier.py(13): from Ft.Xml.XPath import NAMESPACE_NODE
ParsedAxisSpecifier.py(15): def ParsedAxisSpecifier(axis):
ParsedAxisSpecifier.py(22): class AxisSpecifier:
 --- modulename: ParsedAxisSpecifier, funcname: AxisSpecifier
ParsedAxisSpecifier.py(22): class AxisSpecifier:
ParsedAxisSpecifier.py(24):     principalType = Node.ELEMENT_NODE
ParsedAxisSpecifier.py(26):     def __init__(self, axis):
ParsedAxisSpecifier.py(29):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(35):     def descendants(self, context, nodeTest, node, nodeSet):
ParsedAxisSpecifier.py(45):     def pprint(self, indent=''):
ParsedAxisSpecifier.py(48):     def __str__(self):
ParsedAxisSpecifier.py(51):     def __repr__(self):
ParsedAxisSpecifier.py(56): class ParsedAncestorAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedAncestorAxisSpecifier
ParsedAxisSpecifier.py(56): class ParsedAncestorAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(57):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(70): class ParsedAncestorOrSelfAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedAncestorOrSelfAxisSpecifier
ParsedAxisSpecifier.py(70): class ParsedAncestorOrSelfAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(71):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(88): class ParsedAttributeAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedAttributeAxisSpecifier
ParsedAxisSpecifier.py(88): class ParsedAttributeAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(90):     principalType = Node.ATTRIBUTE_NODE
ParsedAxisSpecifier.py(92):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(99): class ParsedChildAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedChildAxisSpecifier
ParsedAxisSpecifier.py(99): class ParsedChildAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(100):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(107): class ParsedDescendantOrSelfAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedDescendantOrSelfAxisSpecifier
ParsedAxisSpecifier.py(107): class ParsedDescendantOrSelfAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(108):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(118): class ParsedDescendantAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedDescendantAxisSpecifier
ParsedAxisSpecifier.py(118): class ParsedDescendantAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(119):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(125): class ParsedFollowingSiblingAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedFollowingSiblingAxisSpecifier
ParsedAxisSpecifier.py(125): class ParsedFollowingSiblingAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(126):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(137): class ParsedFollowingAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedFollowingAxisSpecifier
ParsedAxisSpecifier.py(137): class ParsedFollowingAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(138):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(158): class ParsedNamespaceAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedNamespaceAxisSpecifier
ParsedAxisSpecifier.py(158): class ParsedNamespaceAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(160):     principalType = NAMESPACE_NODE
ParsedAxisSpecifier.py(162):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(169): class ParsedParentAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedParentAxisSpecifier
ParsedAxisSpecifier.py(169): class ParsedParentAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(170):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(181): class ParsedPrecedingSiblingAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedPrecedingSiblingAxisSpecifier
ParsedAxisSpecifier.py(181): class ParsedPrecedingSiblingAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(182):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(195): class ParsedPrecedingAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedPrecedingAxisSpecifier
ParsedAxisSpecifier.py(195): class ParsedPrecedingAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(196):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(220): class ParsedSelfAxisSpecifier(AxisSpecifier):
 --- modulename: ParsedAxisSpecifier, funcname: ParsedSelfAxisSpecifier
ParsedAxisSpecifier.py(220): class ParsedSelfAxisSpecifier(AxisSpecifier):
ParsedAxisSpecifier.py(221):     def select(self, context, nodeTest):
ParsedAxisSpecifier.py(228): g_classMap = {
 --- modulename: ParsedNodeTest, funcname: ?
ParsedNodeTest.py(9): """
ParsedNodeTest.py(11): from xml.dom import Node
ParsedNodeTest.py(13): from Ft.Xml.XPath import RuntimeException
ParsedNodeTest.py(14): from Ft.Xml.XPath.Types import g_xpathRecognizedNodes
ParsedNodeTest.py(17): def ParsedNameTest(name):
ParsedNodeTest.py(28): def ParsedNodeTest(test, literal=None):
ParsedNodeTest.py(36): class NodeTestBase:
 --- modulename: ParsedNodeTest, funcname: NodeTestBase
ParsedNodeTest.py(36): class NodeTestBase:
ParsedNodeTest.py(38):     priority = -0.5
ParsedNodeTest.py(39):     nodeType = None
ParsedNodeTest.py(41):     def getQuickKey(self, namespaces):
ParsedNodeTest.py(48):     def match(self, context, node, principalType=Node.ELEMENT_NODE):
ParsedNodeTest.py(56):     def pprint(self, indent):
ParsedNodeTest.py(59):     def __str__(self):
ParsedNodeTest.py(67): class NodeTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: NodeTest
ParsedNodeTest.py(67): class NodeTest(NodeTestBase):
ParsedNodeTest.py(69):     def match(self, context, node, principalType=Node.ELEMENT_NODE):
ParsedNodeTest.py(72):     def __repr__(self):
ParsedNodeTest.py(76): class CommentNodeTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: CommentNodeTest
ParsedNodeTest.py(76): class CommentNodeTest(NodeTestBase):
ParsedNodeTest.py(78):     nodeType = Node.COMMENT_NODE
ParsedNodeTest.py(80):     def __repr__(self):
ParsedNodeTest.py(84): class TextNodeTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: TextNodeTest
ParsedNodeTest.py(84): class TextNodeTest(NodeTestBase):
ParsedNodeTest.py(86):     nodeType = Node.TEXT_NODE
ParsedNodeTest.py(88):     def __repr__(self):
ParsedNodeTest.py(92): class ProcessingInstructionNodeTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: ProcessingInstructionNodeTest
ParsedNodeTest.py(92): class ProcessingInstructionNodeTest(NodeTestBase):
ParsedNodeTest.py(94):     nodeType = Node.PROCESSING_INSTRUCTION_NODE
ParsedNodeTest.py(96):     def __init__(self, target=None):
ParsedNodeTest.py(106):     def match(self, context, node, principalType=Node.ELEMENT_NODE):
ParsedNodeTest.py(113):     def __repr__(self):
ParsedNodeTest.py(122): class PrincipalTypeTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: PrincipalTypeTest
ParsedNodeTest.py(122): class PrincipalTypeTest(NodeTestBase):
ParsedNodeTest.py(124):     nodeType = Node.ELEMENT_NODE
ParsedNodeTest.py(126):     def match(self, context, node, principalType=Node.ELEMENT_NODE):
ParsedNodeTest.py(129):     def __repr__(self):
ParsedNodeTest.py(132): class LocalNameTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: LocalNameTest
ParsedNodeTest.py(132): class LocalNameTest(NodeTestBase):
ParsedNodeTest.py(134):     nodeType = Node.ELEMENT_NODE
ParsedNodeTest.py(136):     def __init__(self, name):
ParsedNodeTest.py(140):     def getQuickKey(self, namespaces):
ParsedNodeTest.py(143):     def match(self, context, node, principalType=Node.ELEMENT_NODE):
ParsedNodeTest.py(149):     def __repr__(self):
ParsedNodeTest.py(152): class NamespaceTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: NamespaceTest
ParsedNodeTest.py(152): class NamespaceTest(NodeTestBase):
ParsedNodeTest.py(154):     nodeType = Node.ELEMENT_NODE
ParsedNodeTest.py(156):     def __init__(self, prefix):
ParsedNodeTest.py(160):     def getQuickKey(self, namespaces):
ParsedNodeTest.py(165):     def match(self, context, node, principalType=Node.ELEMENT_NODE):
ParsedNodeTest.py(174):     def __repr__(self):
ParsedNodeTest.py(178): class QualifiedNameTest(NodeTestBase):
 --- modulename: ParsedNodeTest, funcname: QualifiedNameTest
ParsedNodeTest.py(178): class QualifiedNameTest(NodeTestBase):
ParsedNodeTest.py(180):     nodeType = Node.ELEMENT_NODE
ParsedNodeTest.py(182):     def __init__(self, prefix, localName):
ParsedNodeTest.py(187):     def getQuickKey(self, namespaces):
ParsedNodeTest.py(195):     def match(self, context, node, principalType=Node.ELEMENT_NODE):
ParsedNodeTest.py(205):     def __repr__(self):
ParsedNodeTest.py(208): g_classMap = {
 --- modulename: ParsedAbbreviatedAbsoluteLocationPath, funcname: ?
ParsedAbbreviatedAbsoluteLocationPath.py(9): """
ParsedAbbreviatedAbsoluteLocationPath.py(11): from xml.dom import Node
ParsedAbbreviatedAbsoluteLocationPath.py(12): from Ft.Lib.Set import Unique
ParsedAbbreviatedAbsoluteLocationPath.py(14): class ParsedAbbreviatedAbsoluteLocationPath:
 --- modulename: ParsedAbbreviatedAbsoluteLocationPath, funcname: ParsedAbbreviatedAbsoluteLocationPath
ParsedAbbreviatedAbsoluteLocationPath.py(14): class ParsedAbbreviatedAbsoluteLocationPath:
ParsedAbbreviatedAbsoluteLocationPath.py(15):     def __init__(self, rel):
ParsedAbbreviatedAbsoluteLocationPath.py(19):     def _descendants(self, context, nodeset):
ParsedAbbreviatedAbsoluteLocationPath.py(31):     def evaluate(self, context):
ParsedAbbreviatedAbsoluteLocationPath.py(41):     select = evaluate
ParsedAbbreviatedAbsoluteLocationPath.py(43):     def pprint(self, indent=''):
ParsedAbbreviatedAbsoluteLocationPath.py(47):     def __str__(self):
ParsedAbbreviatedAbsoluteLocationPath.py(53):     def __repr__(self):
 --- modulename: ParsedAbbreviatedRelativeLocationPath, funcname: ?
ParsedAbbreviatedRelativeLocationPath.py(9): """
ParsedAbbreviatedRelativeLocationPath.py(11): from xml.dom import Node
ParsedAbbreviatedRelativeLocationPath.py(12): from Ft.Lib.Set import Unique
ParsedAbbreviatedRelativeLocationPath.py(13): from Ft.Xml.XPath import Types
ParsedAbbreviatedRelativeLocationPath.py(15): class ParsedAbbreviatedRelativeLocationPath:
 --- modulename: ParsedAbbreviatedRelativeLocationPath, funcname: ParsedAbbreviatedRelativeLocationPath
ParsedAbbreviatedRelativeLocationPath.py(15): class ParsedAbbreviatedRelativeLocationPath:
ParsedAbbreviatedRelativeLocationPath.py(16):     def __init__(self, left, right):
ParsedAbbreviatedRelativeLocationPath.py(25):     def _descendants(self, context, nodeset):
ParsedAbbreviatedRelativeLocationPath.py(40):     def evaluate(self, context):
ParsedAbbreviatedRelativeLocationPath.py(67):     select = evaluate
ParsedAbbreviatedRelativeLocationPath.py(69):     def pprint(self, indent=''):
ParsedAbbreviatedRelativeLocationPath.py(74):     def __str__(self):
ParsedAbbreviatedRelativeLocationPath.py(80):     def __repr__(self):
 --- modulename: ParsedExpr, funcname: ?
ParsedExpr.py(9): """
ParsedExpr.py(11): import types, inspect
ParsedExpr.py(12): from xml.dom import Node
ParsedExpr.py(14): from Ft.Lib import boolean, number
ParsedExpr.py(15): from Ft.Lib.Set import Union, Unique
ParsedExpr.py(16): from Ft.Xml import EMPTY_NAMESPACE
ParsedExpr.py(17): from Ft.Xml.Lib.XmlString import SplitQName, XmlStrStrip
ParsedExpr.py(18): from Ft.Xml.XPath import RuntimeException
ParsedExpr.py(19): from Ft.Xml.XPath import ParsedStep, ParsedAxisSpecifier, ParsedNodeTest
ParsedExpr.py(20): from Ft.Xml.XPath import Conversions, Types, _comparisons
ParsedExpr.py(23): class ParsedLiteralExpr:
 --- modulename: ParsedExpr, funcname: ParsedLiteralExpr
ParsedExpr.py(23): class ParsedLiteralExpr:
ParsedExpr.py(28):     def __init__(self, literal):
ParsedExpr.py(34):     def evaluate(self, context):
ParsedExpr.py(37):     def pprint(self, indent=''):
ParsedExpr.py(40):     def __str__(self):
ParsedExpr.py(43):     def __repr__(self):
ParsedExpr.py(47): class ParsedNLiteralExpr(ParsedLiteralExpr):
 --- modulename: ParsedExpr, funcname: ParsedNLiteralExpr
ParsedExpr.py(47): class ParsedNLiteralExpr(ParsedLiteralExpr):
ParsedExpr.py(52):     def __init__(self, nliteral):
ParsedExpr.py(56):     def pprint(self, indent=''):
ParsedExpr.py(59):     def __str__(self):
ParsedExpr.py(62):     def __repr__(self):
ParsedExpr.py(73): class ParsedVariableReferenceExpr:
 --- modulename: ParsedExpr, funcname: ParsedVariableReferenceExpr
ParsedExpr.py(73): class ParsedVariableReferenceExpr:
ParsedExpr.py(78):     def __init__(self,name):
ParsedExpr.py(83):     def evaluate(self, context):
ParsedExpr.py(100):     def pprint(self, indent=''):
ParsedExpr.py(103):     def __str__(self):
ParsedExpr.py(106):     def __repr__(self):
ParsedExpr.py(110): def ParsedFunctionCallExpr(name, args):
ParsedExpr.py(130): class FunctionCall:
 --- modulename: ParsedExpr, funcname: FunctionCall
ParsedExpr.py(130): class FunctionCall:
ParsedExpr.py(135):     def __init__(self, name, key, args):
ParsedExpr.py(141):     def pprint(self, indent=''):
ParsedExpr.py(146):     def error(self, *args):
ParsedExpr.py(149):     def getArgumentError(self):
ParsedExpr.py(184):     def evaluate(self, context):
ParsedExpr.py(214):     def __getinitargs__(self):
ParsedExpr.py(217):     def __getstate__(self):
ParsedExpr.py(222):     def __str__(self):
ParsedExpr.py(225):     def __repr__(self):
ParsedExpr.py(234): class FunctionCall1(FunctionCall):
 --- modulename: ParsedExpr, funcname: FunctionCall1
ParsedExpr.py(234): class FunctionCall1(FunctionCall):
ParsedExpr.py(236):     def __init__(self, name, key, args):
ParsedExpr.py(240):     def evaluate(self, context):
ParsedExpr.py(271): class FunctionCall2(FunctionCall):
 --- modulename: ParsedExpr, funcname: FunctionCall2
ParsedExpr.py(271): class FunctionCall2(FunctionCall):
ParsedExpr.py(273):     def __init__(self, name, key, args):
ParsedExpr.py(278):     def evaluate(self, context):
ParsedExpr.py(310): class FunctionCall3(FunctionCall):
 --- modulename: ParsedExpr, funcname: FunctionCall3
ParsedExpr.py(310): class FunctionCall3(FunctionCall):
ParsedExpr.py(312):     def __init__(self, name, key, args):
ParsedExpr.py(318):     def evaluate(self, context):
ParsedExpr.py(351): class FunctionCallN(FunctionCall):
 --- modulename: ParsedExpr, funcname: FunctionCallN
ParsedExpr.py(351): class FunctionCallN(FunctionCall):
ParsedExpr.py(353):     def __init__(self, name, key, args):
ParsedExpr.py(356):     def evaluate(self, context):
ParsedExpr.py(391): class ParsedUnionExpr:
 --- modulename: ParsedExpr, funcname: ParsedUnionExpr
ParsedExpr.py(391): class ParsedUnionExpr:
ParsedExpr.py(396):     def __init__(self,left,right):
ParsedExpr.py(400):     def pprint(self, indent=''):
ParsedExpr.py(405):     def evaluate(self, context):
ParsedExpr.py(422):     def __str__(self):
ParsedExpr.py(425):     def __repr__(self):
ParsedExpr.py(429): class ParsedPathExpr:
 --- modulename: ParsedExpr, funcname: ParsedPathExpr
ParsedExpr.py(429): class ParsedPathExpr:
ParsedExpr.py(434):     def __init__(self, descendant, left, right):
ParsedExpr.py(440):     def pprint(self, indent=''):
ParsedExpr.py(445):     def _descendants(self, context, nodeset):
ParsedExpr.py(460):     def evaluate(self, context):
ParsedExpr.py(491):     def __str__(self):
ParsedExpr.py(494):     def __repr__(self):
ParsedExpr.py(499): class ParsedFilterExpr:
 --- modulename: ParsedExpr, funcname: ParsedFilterExpr
ParsedExpr.py(499): class ParsedFilterExpr:
ParsedExpr.py(504):     def __init__(self, filter_, predicates):
ParsedExpr.py(509):     def evaluate(self, context):
ParsedExpr.py(526):     def pprint(self, indent=''):
ParsedExpr.py(531):     def shiftContext(self,context,index,set,len,func):
ParsedExpr.py(534):     def __str__(self):
ParsedExpr.py(537):     def __repr__(self):
ParsedExpr.py(545): class ParsedOrExpr:
 --- modulename: ParsedExpr, funcname: ParsedOrExpr
ParsedExpr.py(545): class ParsedOrExpr:
ParsedExpr.py(550):     def __init__(self, left, right):
ParsedExpr.py(554):     def pprint(self, indent=''):
ParsedExpr.py(559):     def evaluate(self, context):
ParsedExpr.py(566):     def __str__(self):
ParsedExpr.py(569):     def __repr__(self):
ParsedExpr.py(573): class ParsedAndExpr:
 --- modulename: ParsedExpr, funcname: ParsedAndExpr
ParsedExpr.py(573): class ParsedAndExpr:
ParsedExpr.py(578):     def __init__(self,left,right):
ParsedExpr.py(582):     def pprint(self, indent=''):
ParsedExpr.py(587):     def evaluate(self, context):
ParsedExpr.py(595):     def __str__(self):
ParsedExpr.py(598):     def __repr__(self):
ParsedExpr.py(602): def _nodeset_compare(compare, a, b, relational=False):
ParsedExpr.py(704): class ParsedEqualityExpr:
 --- modulename: ParsedExpr, funcname: ParsedEqualityExpr
ParsedExpr.py(704): class ParsedEqualityExpr:
ParsedExpr.py(709):     def __init__(self, op, left, right):
ParsedExpr.py(718):     def __getstate__(self):
ParsedExpr.py(721):     def __setstate__(self, state):
ParsedExpr.py(724):     def evaluate(self, context):
ParsedExpr.py(750):     def pprint(self, indent=''):
ParsedExpr.py(755):     def __str__(self):
ParsedExpr.py(758):     def __repr__(self):
ParsedExpr.py(767): class ParsedRelationalExpr:
 --- modulename: ParsedExpr, funcname: ParsedRelationalExpr
ParsedExpr.py(767): class ParsedRelationalExpr:
ParsedExpr.py(772):     def __init__(self, opcode, left, right):
ParsedExpr.py(787):     def __getstate__(self):
ParsedExpr.py(790):     def __setstate__(self, state):
ParsedExpr.py(793):     def evaluate(self, context):
ParsedExpr.py(806):     def pprint(self, indent=''):
ParsedExpr.py(817):     def __str__(self):
ParsedExpr.py(820):     def __repr__(self):
ParsedExpr.py(835): class ParsedAdditiveExpr:
 --- modulename: ParsedExpr, funcname: ParsedAdditiveExpr
ParsedExpr.py(835): class ParsedAdditiveExpr:
ParsedExpr.py(840):     def __init__(self, sign, left, right):
ParsedExpr.py(856):     def evaluate(self, context):
ParsedExpr.py(870):     def pprint(self, indent=''):
ParsedExpr.py(881):     def __str__(self):
ParsedExpr.py(884):     def __repr__(self):
ParsedExpr.py(892): class ParsedMultiplicativeExpr:
 --- modulename: ParsedExpr, funcname: ParsedMultiplicativeExpr
ParsedExpr.py(892): class ParsedMultiplicativeExpr:
ParsedExpr.py(897):     def __init__(self, opcode, left, right):
ParsedExpr.py(902):     def evaluate(self, context):
ParsedExpr.py(931):     def pprint(self, indent=''):
ParsedExpr.py(942):     def __str__(self):
ParsedExpr.py(945):     def __repr__(self):
ParsedExpr.py(955): class ParsedUnaryExpr:
 --- modulename: ParsedExpr, funcname: ParsedUnaryExpr
ParsedExpr.py(955): class ParsedUnaryExpr:
ParsedExpr.py(960):     def __init__(self, exp):
ParsedExpr.py(963):     def evaluate(self, context):
ParsedExpr.py(969):     def pprint(self, indent=''):
ParsedExpr.py(972):     def __str__(self):
ParsedExpr.py(975):     def __repr__(self):
__init__.py(94): parser = XPathParser
__init__.py(108): g_parser = parser
__init__.py(113): import Context
 --- modulename: Context, funcname: ?
Context.py(9): """
Context.py(11): from types import ModuleType
Context.py(12): import CoreFunctions, BuiltInExtFunctions
 --- modulename: CoreFunctions, funcname: ?
CoreFunctions.py(9): """
CoreFunctions.py(11): import warnings
CoreFunctions.py(13): from xml.dom import Node
CoreFunctions.py(15): from Ft import TranslateMessage as _
CoreFunctions.py(16): from Ft.Lib import number, boolean
CoreFunctions.py(17): from Ft.Xml import EMPTY_NAMESPACE, XML_NAMESPACE
CoreFunctions.py(18): from Ft.Xml.XPath import NAMESPACE_NODE
CoreFunctions.py(19): from Ft.Xml.XPath import Conversions, RuntimeException
CoreFunctions.py(20): from Ft.Xml.XPath.Types import NodesetType, NumberType
CoreFunctions.py(21): from Ft.Xml.XPath.Types import StringType as XPathStringType
CoreFunctions.py(25): def Last(context):
CoreFunctions.py(30): def Position(context):
CoreFunctions.py(35): def Count(context, nodeSet):
CoreFunctions.py(43): def Id(context, object_):
CoreFunctions.py(68): def LocalName(context, nodeSet=None):
CoreFunctions.py(94): def NamespaceUri(context, nodeSet=None):
CoreFunctions.py(114): def Name(context, nodeSet=None):
CoreFunctions.py(141): def String(context, object_=None):
CoreFunctions.py(150): def Concat(context, *args):
CoreFunctions.py(157): def StartsWith(context, outer, inner):
CoreFunctions.py(168): def Contains(context, outer, inner):
CoreFunctions.py(179): def SubstringBefore(context, outer, inner):
CoreFunctions.py(193): def SubstringAfter(context, outer, inner):
CoreFunctions.py(207): def Substring(context, st, start, length=None):
CoreFunctions.py(256): def StringLength(context, st=None):
CoreFunctions.py(265): def Normalize(context, st=None):
CoreFunctions.py(274): def Translate(context, source, fromChars, toChars):
CoreFunctions.py(299): def Boolean(context, object_):
CoreFunctions.py(304): def Not(context, object_):
CoreFunctions.py(310): def True(context):
CoreFunctions.py(315): def False(context):
CoreFunctions.py(320): def Lang(context, lang):
CoreFunctions.py(350): def Number(context, object_=None):
CoreFunctions.py(357): def Sum(context, nodeSet):
CoreFunctions.py(366): def Floor(context, object_):
CoreFunctions.py(379): def Ceiling(context, object_):
CoreFunctions.py(392): def Round(context, object_):
CoreFunctions.py(405): CoreFunctions = {
 --- modulename: BuiltInExtFunctions, funcname: ?
BuiltInExtFunctions.py(17): """
BuiltInExtFunctions.py(19): import os, re, codecs, time
BuiltInExtFunctions.py(20): from xml.dom import Node
BuiltInExtFunctions.py(22): import Ft
BuiltInExtFunctions.py(23): from Ft.Lib import boolean, Uri, Wrap as LineWrap
 --- modulename: Uri, funcname: ?
Uri.py(13): """
Uri.py(15): from __future__ import generators
Uri.py(16): import urllib, os, sys, re
Uri.py(17): from string import ascii_letters
Uri.py(19): from Ft.Lib import UriException
Uri.py(21): import Uuid
 --- modulename: Uuid, funcname: ?
Uuid.py(24): """
Uuid.py(26): import socket
Uuid.py(28): from Random import GetRandomBytes
 --- modulename: Random, funcname: ?
Random.py(16): """
Random.py(18): __all__ = ['dev_rand_fd', 'pseudo_rng',
Random.py(21): import os, sys, random, threading
Random.py(23): pseudo_rng = random.Random()
Random.py(24): lock = threading.Lock()
Random.py(25): py22 = sys.version_info[0:2] < (2,3)
Random.py(27): dev_rand_fd = None
Random.py(28): if os.name == 'posix':
Random.py(29):     try:
Random.py(30):         dev_rand_fd = os.open('/dev/urandom', os.O_RDONLY)
Random.py(35): def GetRandomBytes(numBytes):
Random.py(58): if dev_rand_fd is not None:
Random.py(61):     pseudo_rng.seed(reduce(lambda a,b: ((a+1)*(b+1))%27814431486576L -1,
Random.py(62):                     map(ord,GetRandomBytes(6))))
 --- modulename: Random, funcname: GetRandomBytes
Random.py(37):     bytes = ''
Random.py(38):     if dev_rand_fd is not None:
Random.py(39):         lock.acquire()
Random.py(40):         while len(bytes) < numBytes:
Random.py(41):             bytes += os.read(dev_rand_fd, numBytes - len(bytes))
Random.py(40):         while len(bytes) < numBytes:
Random.py(42):         lock.release()
Random.py(51):     return bytes
 --- modulename: Random, funcname: <lambda>
Random.py(61):     pseudo_rng.seed(reduce(lambda a,b: ((a+1)*(b+1))%27814431486576L -1,
 --- modulename: Random, funcname: <lambda>
Random.py(61):     pseudo_rng.seed(reduce(lambda a,b: ((a+1)*(b+1))%27814431486576L -1,
 --- modulename: Random, funcname: <lambda>
Random.py(61):     pseudo_rng.seed(reduce(lambda a,b: ((a+1)*(b+1))%27814431486576L -1,
 --- modulename: Random, funcname: <lambda>
Random.py(61):     pseudo_rng.seed(reduce(lambda a,b: ((a+1)*(b+1))%27814431486576L -1,
 --- modulename: Random, funcname: <lambda>
Random.py(61):     pseudo_rng.seed(reduce(lambda a,b: ((a+1)*(b+1))%27814431486576L -1,
Random.py(65): def Random():
Uuid.py(31): def GenerateUuid():
Uuid.py(43): def UuidAsString(uuid):
Uuid.py(114): def CompareUuids(u1, u2):
Uri.py(23): __all__ = [ # RFC 3986 implementation
Uri.py(48): WINDOWS_SLASH_COMPAT = True
Uri.py(51): DEFAULT_URI_SCHEMES = ('http', 'https', 'file', 'ftp', 'data', 'gopher')
Uri.py(57): _validationSetupCompleted = False
Uri.py(58): def _initUriValidationRegex():
Uri.py(163): def MatchesUriRefSyntax(s):
Uri.py(176): def MatchesUriSyntax(s):
Uri.py(189): _splitUriRefSetupCompleted = False
Uri.py(190): def _initSplitUriRefPattern():
Uri.py(210): def SplitUriRef(uriref):
Uri.py(234): def UnsplitUriRef(uriRefSeq):
Uri.py(255): _splitAuthoritySetupCompleted = False
Uri.py(256): def _initSplitAuthorityPattern():
Uri.py(271): def SplitAuthority(authority):
Uri.py(286): def SplitFragment(uri):
Uri.py(307): UNRESERVED_PATTERN = re.compile(r'[0-9A-Za-z\-\._~]') # RFC 3986
Uri.py(318): RESERVED = "/=&+?#;@,:$!*[]()'" # RFC 3986
Uri.py(322): SURR_DC00 = unichr(0xdc00)
Uri.py(324): def _chars(s):
Uri.py(368): def PercentEncode(s, encoding='utf-8', encodeReserved=True, spaceToPlus=False,
Uri.py(462): def PercentDecode(s, encoding='utf-8', decodable=None):
Uri.py(528): def Absolutize(uriRef, baseUri):
Uri.py(643): def RemoveDotSegments(path):
Uri.py(699): def NormalizeCase(uriRef, doHost=False):
Uri.py(747): def NormalizePercentEncoding(s):
Uri.py(757): def NormalizePathSegments(path):
Uri.py(770): def NormalizePathSegmentsInUri(uri):
Uri.py(785): class UriResolverBase:
 --- modulename: Uri, funcname: UriResolverBase
Uri.py(785): class UriResolverBase:
Uri.py(795):     """ % ', '.join(DEFAULT_URI_SCHEMES)
Uri.py(796):     def __init__(self):
Uri.py(799):     def normalize(self, uriRef, baseUri):
Uri.py(825):     def resolve(self, uri, baseUri=None):
Uri.py(875):     def generate(self, hint=None):
Uri.py(884): class FtUriResolver(UriResolverBase):
 --- modulename: Uri, funcname: FtUriResolver
Uri.py(884): class FtUriResolver(UriResolverBase):
Uri.py(890):     def normalize(self, uriRef, baseUri):
Uri.py(906): BASIC_RESOLVER = FtUriResolver()
 --- modulename: Uri, funcname: __init__
Uri.py(797):         self.supportedSchemes = list(DEFAULT_URI_SCHEMES)
Uri.py(908): class ErrorRecognizingURLopener(urllib.FancyURLopener):
 --- modulename: Uri, funcname: ErrorRecognizingURLopener
Uri.py(908): class ErrorRecognizingURLopener(urllib.FancyURLopener):
Uri.py(914):     http_error_default = urllib.URLopener.http_error_default
Uri.py(916): urllib._urlopener = ErrorRecognizingURLopener()
Uri.py(919): def UrlOpen(url, *args, **kwargs):
Uri.py(935): def UrnToPublicId(urn):
Uri.py(963): def PublicIdToUrn(publicid):
Uri.py(985): SCHEME_PATTERN = re.compile(r'([a-zA-Z][a-zA-Z0-9+\-.]*):')
Uri.py(986): def GetScheme(uriRef):
Uri.py(1005): def StripFragment(uriRef):
Uri.py(1013): def IsAbsolute(identifier):
Uri.py(1022): _ntPathToUriSetupCompleted = False
Uri.py(1023): def _initNtPathPattern():
Uri.py(1092): def _splitNtPath(path):
Uri.py(1113): def _getDriveLetter(s):
Uri.py(1123): def OsPathToUri(path, attemptAbsolute=True, osname=None):
Uri.py(1264): def UriToOsPath(uri, attemptAbsolute=True, encoding='utf-8', osname=None):
Uri.py(1444): REG_NAME_HOST_PATTERN = re.compile(r"^(?:(?:[0-9A-Za-z\-_\.!~*'();&=+$,]|(?:%[0-9A-Fa-f]{2}))*)$")
Uri.py(1446): def MakeUrllibSafe(uriRef):
Uri.py(1520): def PathResolve(paths):
Uri.py(1545): def BaseJoin(base, uriRef):
Uri.py(1584): class UriDict(dict):
 --- modulename: Uri, funcname: UriDict
Uri.py(1584): class UriDict(dict):
Uri.py(1615):     def _normalizekey(self, key):
Uri.py(1622):     def __getitem__(self, key):
Uri.py(1625):     def __setitem__(self, key, value):
Uri.py(1628):     def __delitem__(self, key):
Uri.py(1631):     def has_key(self, key):
Uri.py(1634):     def __contains__(self, key):
Uri.py(1637):     def __iter__(self):
Uri.py(1640):     iterkeys = __iter__
Uri.py(1641):     def iteritems(self):
Uri.py(1646): def FileUrl(filepath):
BuiltInExtFunctions.py(24): from Ft.Lib.Random import Random as Random_
BuiltInExtFunctions.py(25): from Ft.Xml.XPath import Conversions
BuiltInExtFunctions.py(26): from Ft.Xml.XPath import FT_EXT_NAMESPACE
BuiltInExtFunctions.py(29): def _toUnicode(s):
BuiltInExtFunctions.py(40): def BaseUri(context, arg=None):
BuiltInExtFunctions.py(61): def Decode(context, object, encoding):
BuiltInExtFunctions.py(71): def Encode(context, object, encoding):
BuiltInExtFunctions.py(81): def EndsWith(context, outer, inner):
BuiltInExtFunctions.py(91): def EscapeXml(context, text):
BuiltInExtFunctions.py(100): def GenerateUuid(context):
BuiltInExtFunctions.py(110): def If(context, cond, v1, v2=None):
BuiltInExtFunctions.py(128): def ImportString(context, object):
BuiltInExtFunctions.py(140): def Indent(context, text, levels, indentstring=None):
BuiltInExtFunctions.py(159): def NormalizeEol(context, text):
BuiltInExtFunctions.py(171): def OsPath2Uri(context, path):
BuiltInExtFunctions.py(179): def ParseXml(context, src, parameters=None):
BuiltInExtFunctions.py(239): def Range(context, lo, hi):
BuiltInExtFunctions.py(258): def ResolvePath(context, base, rel):
BuiltInExtFunctions.py(269): def ResolveUrl(context, base, rel):
BuiltInExtFunctions.py(279): def ShaHash(context, text):
BuiltInExtFunctions.py(292): def SharePath(context):
BuiltInExtFunctions.py(300): def BinPath(context):
BuiltInExtFunctions.py(307): def Uri2OsPath(context, uri):
BuiltInExtFunctions.py(315): def Version(context):
BuiltInExtFunctions.py(322): def Wrap(context, text, width):
BuiltInExtFunctions.py(336): def PytimeToExslt(context, t=None):
BuiltInExtFunctions.py(354): def Join(context, nodeset, delim=' '):
BuiltInExtFunctions.py(369): def Match(context, pattern, arg=None):
BuiltInExtFunctions.py(383): def ParseDate(context, date, format=None):
BuiltInExtFunctions.py(398): def Random(context, max=None, forceInt=0):
BuiltInExtFunctions.py(417): def Replace(context, old, new, arg=None):
BuiltInExtFunctions.py(433): def StrFTime(context, format, date=None):
BuiltInExtFunctions.py(452): def EnvVar(context, var):
BuiltInExtFunctions.py(472): def Spawnv(context, command, *args):
BuiltInExtFunctions.py(487): def System(context, command):
BuiltInExtFunctions.py(501): ExtNamespaces = {
BuiltInExtFunctions.py(505): ExtFunctions = {
BuiltInExtFunctions.py(537): InsecureExtFunctions = {
BuiltInExtFunctions.py(543): import MathFunctions
 --- modulename: MathFunctions, funcname: ?
MathFunctions.py(9): """
MathFunctions.py(11): import math
MathFunctions.py(13): from Ft.Xml.XPath import Conversions, FT_EXT_NAMESPACE
MathFunctions.py(16): def Sin(context, x):
MathFunctions.py(20): def Cos(context, x):
MathFunctions.py(24): def DegreesToRads(context, x):
MathFunctions.py(28): def Fact(context, x):
MathFunctions.py(36): ExtNamespaces = {
MathFunctions.py(40): ExtFunctions = {
BuiltInExtFunctions.py(544): ExtFunctions.update(MathFunctions.ExtFunctions)
Context.py(13): from Ft.Xml import XML_NAMESPACE
Context.py(15): __all__ = ['Context']
Context.py(17): class Context:
 --- modulename: Context, funcname: Context
Context.py(17): class Context:
Context.py(18):     functions = CoreFunctions.CoreFunctions.copy()
Context.py(19):     functions.update(BuiltInExtFunctions.ExtFunctions)
Context.py(20):     currentInstruction = None
Context.py(22):     def __init__(self,
Context.py(58):     def __repr__(self):
Context.py(62):     def addFunction(self, expandedName, function):
Context.py(69):     def addDocument(self, document):
Context.py(75):     def compareDocuments(self, a, b):
Context.py(81):     def copy(self):
Context.py(84):     def set(self, state):
Context.py(88):     def clone(self):
__init__.py(115): from Util import Evaluate, SimpleEvaluate, Compile
 --- modulename: Util, funcname: ?
Util.py(9): """
Util.py(11): import os
Util.py(12): from xml.dom import Node
Util.py(14): from Ft.Xml import EMPTY_NAMESPACE
Util.py(15): from Ft.Xml.Domlette import GetAllNs
 --- modulename: Domlette, funcname: ?
Domlette.py(10): """
Domlette.py(13): __all__ = ['implementation', 'NonvalParse', 'ValParse',
Domlette.py(26): import os, sys, cStringIO, warnings
Domlette.py(28): from Ft.Xml import READ_EXTERNAL_DTD
Domlette.py(29): from Ft.Xml import InputSource
 --- modulename: InputSource, funcname: ?
InputSource.py(10): """
InputSource.py(12): import os, cStringIO, types, warnings, mimetools
InputSource.py(14): from Ft import FtWarning
InputSource.py(15): from Ft.Lib import Uri, Uuid
InputSource.py(17): __all__ = ['InputSource', 'NullInputSource',
InputSource.py(22): class InputSource:
 --- modulename: InputSource, funcname: InputSource
InputSource.py(22): class InputSource:
InputSource.py(34):     def __init__(self, stream, uri=None, processIncludes=True,
InputSource.py(66):     def _getStreamEncoding(self, stream):
InputSource.py(132):     def resolve(self, sysid, pubid=None, hint=None, ignoreErrors=False):
InputSource.py(155):     def getUriResolver(self):
InputSource.py(165):     def resolveEntity(self, pubid, sysid):
InputSource.py(172):     def read(self, bufsiz=-1):
InputSource.py(175):     def readline(self):
InputSource.py(178):     def close(self):
InputSource.py(182):     def _normalize(self, uriref):
InputSource.py(194):     def _openStream(self, uri, ignoreErrors=False):
InputSource.py(215):     def clone(self, stream, uri=None, hint=None):
InputSource.py(238):     def _resolveFromCatalog(self, publicId, systemId):
InputSource.py(274):     def __getstate__(self):
InputSource.py(280): class NullInputSource(InputSource):
 --- modulename: InputSource, funcname: NullInputSource
InputSource.py(280): class NullInputSource(InputSource):
InputSource.py(284):     def __init__(self, uri=None):
InputSource.py(288): class InputSourceFactory:
 --- modulename: InputSource, funcname: InputSourceFactory
InputSource.py(288): class InputSourceFactory:
InputSource.py(292):     def __init__(self, inputSourceClass=None, resolver=Uri.BASIC_RESOLVER,
InputSource.py(299):     def fromUri(self, uri, *v_args, **kw_args):
InputSource.py(317):     def fromString(self, st, uri=None, *v_args, **kw_args):
InputSource.py(328):     def fromStream(self, stream, uri=None, *v_args, **kw_args):
InputSource.py(342):     def _resolveFromCatalog(self, uri):
InputSource.py(353): NoCatalogFactory = InputSourceFactory(catalog=None)
 --- modulename: InputSource, funcname: __init__
InputSource.py(294):         self._klass = inputSourceClass or InputSource
InputSource.py(295):         self.resolver = resolver
InputSource.py(296):         self.catalog = catalog
InputSource.py(297):         return
InputSource.py(355): from Ft.Xml.Catalog import GetDefaultCatalog
 --- modulename: Catalog, funcname: ?
Catalog.py(14): """
Catalog.py(16): import os, re, sys, warnings, cStringIO
Catalog.py(17): from xml.sax import xmlreader
 --- modulename: __init__, funcname: ?
__init__.py(20): """
__init__.py(22): from xmlreader import InputSource
__init__.py(23): from handler import ContentHandler, ErrorHandler
__init__.py(24): from _exceptions import SAXException, SAXNotRecognizedException, \
__init__.py(29): def parse(source, handler, errorHandler=ErrorHandler()):
__init__.py(35): def parseString(string, handler, errorHandler=ErrorHandler()):
__init__.py(54): default_parser_list = ["xml.sax.expatreader"]
__init__.py(57): _false = 0
__init__.py(58): if _false:
__init__.py(61): import os, sys
__init__.py(62): if os.environ.has_key("PY_SAX_PARSER"):
__init__.py(64): del os
__init__.py(66): _key = "python.xml.sax.parser"
__init__.py(67): if sys.platform[:4] == "java" and sys.registry.containsKey(_key):
__init__.py(71): def make_parser(parser_list = []):
__init__.py(97): if sys.platform[ : 4] == "java":
__init__.py(104):     def _create_parser(parser_name):
__init__.py(108): del sys
Catalog.py(19): from Ft import FtWarning, GetConfigVar
Catalog.py(20): from Ft.Lib import Uri, UriException
Catalog.py(21): from Ft.Xml import XML_NAMESPACE
Catalog.py(23): __all__ = ['Catalog', 'GetDefaultCatalog']
Catalog.py(25): TR9401 = re.compile(r'^\s*(BASE|CATALOG|DELEGATE|PUBLIC|SYSTEM|OVERRIDE\s+YES|OVERRIDE\s+NO)\s+"((?:[^"\\]|\\.)*)"(?:\s+"((?:[^"\\]|\\.)*)")?', re.M | re.I)
Catalog.py(28): def IsXml(bytes):
Catalog.py(72): class Catalog:
 --- modulename: Catalog, funcname: Catalog
Catalog.py(72): class Catalog:
Catalog.py(81):     def __init__(self, uri, quiet=True):
Catalog.py(121):     def _parseXmlCat(self, data):
Catalog.py(144):     def _parseTr9401(self, data):
Catalog.py(175):     def startElementNS(self, (namespace, name), qualifiedName, attrs):
Catalog.py(255):     def __ensure_attrs(self, name, attrs, *attr_names):
Catalog.py(269):     def endElementNS(self, (namespace, name), qualifiedName):
Catalog.py(281): def GetDefaultCatalog(basename='default.cat'):
InputSource.py(356): DefaultFactory = InputSourceFactory(catalog=GetDefaultCatalog())
 --- modulename: Catalog, funcname: GetDefaultCatalog
Catalog.py(285):     quiet = 'XML_DEBUG_CATALOG' not in os.environ
Catalog.py(287):     uris = []
Catalog.py(289):     if 'XML_CATALOGS' in os.environ:
Catalog.py(295):     if 'XML_CATALOG_FILES' in os.environ:
Catalog.py(305):     path = os.path.join(GetConfigVar('DATADIR'), basename)
 --- modulename: __init__, funcname: GetConfigVar
__init__.py(163):     return getattr(__config__, name, None)
Catalog.py(306):     uris.append(Uri.OsPathToUri(path))
 --- modulename: Uri, funcname: OsPathToUri
Uri.py(1204):     osname = osname or os.name
Uri.py(1206):     if osname == 'nt':
Uri.py(1228):     elif osname == 'posix':
Uri.py(1229):         try:
Uri.py(1230):             from posixpath import isabs
Uri.py(1233):         pathisabs = isabs(path)
Uri.py(1234):         if pathisabs:
Uri.py(1235):             path = RemoveDotSegments(path)
 --- modulename: Uri, funcname: RemoveDotSegments
Uri.py(653):     if path == '.' or path == '..':
Uri.py(656):     while path:
Uri.py(657):         if path[:2] == './':
Uri.py(659):         elif path[:3] == '../':
Uri.py(662):             break
Uri.py(667):     leading_slash = False
Uri.py(668):     if path[:1] == '/':
Uri.py(669):         path = path[1:]
Uri.py(670):         leading_slash = True
Uri.py(672):     if path[-2:] == '/.':
Uri.py(676):     segments = path.split('/')
Uri.py(677):     keepers = []
Uri.py(678):     segments.reverse()
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(696):     return leading_slash * '/' + '/'.join(keepers)
Uri.py(1239):         path = '/'.join([PercentEncode(seg) for seg in path.split('/')])
 --- modulename: Uri, funcname: PercentEncode
Uri.py(417):     res = ''
Uri.py(418):     is_unicode = isinstance(s, unicode)
Uri.py(419):     if nlChars is not None:
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(347):     if isinstance(s, str):
Uri.py(348):         for i in s:
Uri.py(350):         return
Uri.py(459):     return res
Uri.py(1239):         path = '/'.join([PercentEncode(seg) for seg in path.split('/')])
 --- modulename: Uri, funcname: PercentEncode
Uri.py(417):     res = ''
Uri.py(418):     is_unicode = isinstance(s, unicode)
Uri.py(419):     if nlChars is not None:
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(347):     if isinstance(s, str):
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(350):         return
Uri.py(459):     return res
Uri.py(1239):         path = '/'.join([PercentEncode(seg) for seg in path.split('/')])
 --- modulename: Uri, funcname: PercentEncode
Uri.py(417):     res = ''
Uri.py(418):     is_unicode = isinstance(s, unicode)
Uri.py(419):     if nlChars is not None:
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(347):     if isinstance(s, str):
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(350):         return
Uri.py(459):     return res
Uri.py(1239):         path = '/'.join([PercentEncode(seg) for seg in path.split('/')])
 --- modulename: Uri, funcname: PercentEncode
Uri.py(417):     res = ''
Uri.py(418):     is_unicode = isinstance(s, unicode)
Uri.py(419):     if nlChars is not None:
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(347):     if isinstance(s, str):
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(350):         return
Uri.py(459):     return res
Uri.py(1239):         path = '/'.join([PercentEncode(seg) for seg in path.split('/')])
 --- modulename: Uri, funcname: PercentEncode
Uri.py(417):     res = ''
Uri.py(418):     is_unicode = isinstance(s, unicode)
Uri.py(419):     if nlChars is not None:
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(347):     if isinstance(s, str):
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(350):         return
Uri.py(459):     return res
Uri.py(1239):         path = '/'.join([PercentEncode(seg) for seg in path.split('/')])
 --- modulename: Uri, funcname: PercentEncode
Uri.py(417):     res = ''
Uri.py(418):     is_unicode = isinstance(s, unicode)
Uri.py(419):     if nlChars is not None:
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(347):     if isinstance(s, str):
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(349):             yield i
Uri.py(424):         if is_unicode and len(c) - 1:
Uri.py(428):         elif UNRESERVED_PATTERN.match(c) is None:
Uri.py(458):             res += c
Uri.py(422):     for c in _chars(s):
 --- modulename: Uri, funcname: _chars
Uri.py(348):         for i in s:
Uri.py(350):         return
Uri.py(459):     return res
Uri.py(1239):         path = '/'.join([PercentEncode(seg) for seg in path.split('/')])
Uri.py(1240):         if pathisabs:
Uri.py(1241):             uri = 'file://%s' % path
Uri.py(1261):     return uri
Catalog.py(308):     if not quiet:
Catalog.py(311):     catalog = None
Catalog.py(312):     for uri in uris:
Catalog.py(313):         if not quiet:
Catalog.py(316):         try:
Catalog.py(318):             if catalog is None:
Catalog.py(319):                 if not quiet:
Catalog.py(322):                 catalog = Catalog(uri, quiet)
 --- modulename: Catalog, funcname: __init__
Catalog.py(82):         self.systemIds = {}
Catalog.py(83):         self.publicIds = {}
Catalog.py(84):         self.uris = {}
Catalog.py(85):         self.publicDelegates = []
Catalog.py(86):         self.systemDelegates = []
Catalog.py(87):         self.uriDelegates = []
Catalog.py(88):         self.systemRewrites = []
Catalog.py(89):         self.uriRewrites = []
Catalog.py(90):         self.catalogs = []
Catalog.py(91):         self.uri = uri
Catalog.py(92):         self.quiet = quiet
Catalog.py(94):         if not Uri.IsAbsolute(uri):
 --- modulename: Uri, funcname: IsAbsolute
Uri.py(1019):     return GetScheme(identifier) is not None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Catalog.py(103):         stream = Uri.BASIC_RESOLVER.resolve(uri)
 --- modulename: Uri, funcname: resolve
Uri.py(836):         if baseUri is not None:
Uri.py(840):             scheme = GetScheme(uri)
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(842):             if scheme not in self.supportedSchemes:
Uri.py(857):         if scheme == 'file':
Uri.py(858):             path = UriToOsPath(uri, attemptAbsolute=False)
 --- modulename: Uri, funcname: UriToOsPath
Uri.py(1340):     (scheme, authority, path) = SplitUriRef(uri)[0:3]
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(222):         _initSplitUriRefPattern()
 --- modulename: Uri, funcname: _initSplitUriRefPattern
Uri.py(196):     if _splitUriRefSetupCompleted:
Uri.py(203):     regex = r"^(?:(?P<scheme>[^:/?#]+):)?(?://(?P<authority>[^/?#]*))?(?P<path>[^?#]*)(?:\?(?P<query>[^#]*))?(?:#(?P<fragment>.*))?$"
Uri.py(205):     SPLIT_URI_REF_PATTERN = re.compile(regex)
Uri.py(206):     _splitUriRefSetupCompleted = True
Uri.py(207):     return
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(1341):     if scheme and scheme != 'file':
Uri.py(1344):     if authority == 'localhost':
Uri.py(1346):     osname = osname or os.name
Uri.py(1348):     if osname == 'nt':
Uri.py(1411):     elif osname == 'posix':
Uri.py(1413):         if authority:
Uri.py(1420):         path = PercentDecode(re.sub('%2[fF]', '\\/', path))
 --- modulename: Uri, funcname: PercentDecode
Uri.py(491):     is_unicode = isinstance(s, unicode)
Uri.py(492):     if is_unicode:
Uri.py(495):         mychr = chr
Uri.py(496):     list_ = s.split('%')
Uri.py(497):     res = [list_[0]]
Uri.py(498):     myappend = res.append
Uri.py(499):     del list_[0]
Uri.py(500):     for item in list_:
Uri.py(514):     s = ''.join(res)
Uri.py(523):     if is_unicode:
Uri.py(525):     return s
Uri.py(1422):         if attemptAbsolute and osname == os.name and not os.path.isabs(path):
Uri.py(1425):         return path
Uri.py(859):             try:
Uri.py(860):                 stream = open(path, 'rb')
Uri.py(873):         return stream
Catalog.py(104):         data = stream.read()
Catalog.py(105):         stream.close()
Catalog.py(107):         if IsXml(data):
 --- modulename: Catalog, funcname: IsXml
Catalog.py(31):     if bytes[:4] in ('\x3C\x3F\x78\x6D',  # '<?xm'
Catalog.py(36):         return True
Catalog.py(109):             self._parseXmlCat(data)
 --- modulename: Catalog, funcname: _parseXmlCat
Catalog.py(127):         self.prefer_public = [True]
Catalog.py(128):         self.base = [self.uri]
Catalog.py(131):         source = xmlreader.InputSource(self.uri)
Catalog.py(132):         source.setByteStream(cStringIO.StringIO(data))
Catalog.py(134):         from Ft.Xml.Sax import CreateParser
 --- modulename: Sax, funcname: ?
Sax.py(9): """
Sax.py(11): from Ft.Xml.cDomlettec import CreateParser
 --- modulename: XInclude, funcname: ?
XInclude.py(15): """
XInclude.py(18): __all__ = ['XINCLUDE_NAMESPACE',
XInclude.py(22): XINCLUDE_NAMESPACE = u'http://www.w3.org/2001/XInclude'
XInclude.py(24): NONNORMATIVE_SCHEMA_FOR_XINCLUDE_ELEMENT = """<?xml version="1.0" encoding="utf-8"?>
XInclude.py(69): import warnings
XInclude.py(71): def ProcessIncludesFromUri(uri, validate=0):
XInclude.py(83): def ProcessIncludesFromString(string, uri='', validate=0):
XInclude.py(95): def ProcessIncludesFromSource(inputSource, validate=0):
Sax.py(14): from Ft.Xml.cDomlettec import FEATURE_PROCESS_XINCLUDES
Sax.py(17): from Ft.Xml.cDomlettec import PROPERTY_WHITESPACE_RULES
Sax.py(20): class ContentHandler:
 --- modulename: Sax, funcname: ContentHandler
Sax.py(20): class ContentHandler:
Sax.py(27):     def setDocumentLocator(self, locator):
Sax.py(43):     def startDocument(self):
Sax.py(49):     def endDocument(self):
Sax.py(58):     def startPrefixMapping(self, prefix, uri):
Sax.py(79):     def endPrefixMapping(self, prefix):
Sax.py(86):     def startElementNS(self, (uri, localName), qualifiedName, atts):
Sax.py(95):     def endElementNS(self, (uri, localName), qualifiedName):
Sax.py(102):     def characters(self, content):
Sax.py(110): class Locator:
 --- modulename: Sax, funcname: Locator
Sax.py(110): class Locator:
Sax.py(116):     def getColumnNumber(self):
Sax.py(119):     def getLineNumber(self):
Sax.py(122):     def getSystemId(self):
Sax.py(126): class Attributes:
 --- modulename: Sax, funcname: Attributes
Sax.py(126): class Attributes:
Sax.py(131):     def getValue(self, name):
Sax.py(134):     def getQNameByName(self, name):
Sax.py(137):     def __len__(self):
Sax.py(141):     def __getitem__(self, name):
Sax.py(144):     def __delitem__(self, name):
Sax.py(147):     def __contains__(self, name):
Sax.py(150):     def has_key(self, name):
Sax.py(154):     def get(self, name, alternative=None):
Sax.py(158):     def keys(self):
Sax.py(161):     def items(self):
Sax.py(164):     def values(self):
Catalog.py(135):         p = CreateParser()
Catalog.py(136):         p.setContentHandler(self)
Catalog.py(137):         p.parse(source)
 --- modulename: Uri, funcname: normalize
Uri.py(900):         if baseUri[:1] == '/':
Uri.py(903):         return UriResolverBase.normalize(self, uriRef, baseUri)
 --- modulename: Uri, funcname: normalize
Uri.py(813):         scheme = GetScheme(uriRef) or GetScheme(baseUri)
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1000):         return None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(814):         if scheme in self.supportedSchemes:
Uri.py(815):             return Absolutize(uriRef, baseUri)
 --- modulename: Uri, funcname: Absolutize
Uri.py(584):     if not baseUri or not IsAbsolute(baseUri):
 --- modulename: Uri, funcname: IsAbsolute
Uri.py(1019):     return GetScheme(identifier) is not None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(588):     if uriRef == '' or uriRef[0] == '#':
Uri.py(591):     tScheme = tAuth = tPath = tQuery = None
Uri.py(593):     (rScheme, rAuth, rPath, rQuery, rFrag) = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(596):     if rScheme is not None:
Uri.py(603):         (bScheme, bAuth, bPath, bQuery, bFrag) = SplitUriRef(baseUri)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(606):         if rAuth is not None:
Uri.py(613):             if not rPath:
Uri.py(620):                 if rPath[0] == '/':
Uri.py(624):                     if bAuth is not None and not bPath:
Uri.py(627):                         tPath = bPath[:bPath.rfind('/')+1] + rPath
Uri.py(628):                     tPath = RemoveDotSegments(tPath)
 --- modulename: Uri, funcname: RemoveDotSegments
Uri.py(653):     if path == '.' or path == '..':
Uri.py(656):     while path:
Uri.py(657):         if path[:2] == './':
Uri.py(659):         elif path[:3] == '../':
Uri.py(662):             break
Uri.py(667):     leading_slash = False
Uri.py(668):     if path[:1] == '/':
Uri.py(669):         path = path[1:]
Uri.py(670):         leading_slash = True
Uri.py(672):     if path[-2:] == '/.':
Uri.py(676):     segments = path.split('/')
Uri.py(677):     keepers = []
Uri.py(678):     segments.reverse()
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(696):     return leading_slash * '/' + '/'.join(keepers)
Uri.py(630):                 tQuery = rQuery
Uri.py(633):             tAuth = bAuth
Uri.py(635):         tScheme = bScheme
Uri.py(640):     return UnsplitUriRef((tScheme, tAuth, tPath, tQuery, rFrag))
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
 --- modulename: Uri, funcname: resolve
Uri.py(836):         if baseUri is not None:
Uri.py(840):             scheme = GetScheme(uri)
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(842):             if scheme not in self.supportedSchemes:
Uri.py(857):         if scheme == 'file':
Uri.py(858):             path = UriToOsPath(uri, attemptAbsolute=False)
 --- modulename: Uri, funcname: UriToOsPath
Uri.py(1340):     (scheme, authority, path) = SplitUriRef(uri)[0:3]
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(1341):     if scheme and scheme != 'file':
Uri.py(1344):     if authority == 'localhost':
Uri.py(1346):     osname = osname or os.name
Uri.py(1348):     if osname == 'nt':
Uri.py(1411):     elif osname == 'posix':
Uri.py(1413):         if authority:
Uri.py(1420):         path = PercentDecode(re.sub('%2[fF]', '\\/', path))
 --- modulename: Uri, funcname: PercentDecode
Uri.py(491):     is_unicode = isinstance(s, unicode)
Uri.py(492):     if is_unicode:
Uri.py(493):         mychr = unichr
Uri.py(496):     list_ = s.split('%')
Uri.py(497):     res = [list_[0]]
Uri.py(498):     myappend = res.append
Uri.py(499):     del list_[0]
Uri.py(500):     for item in list_:
Uri.py(514):     s = ''.join(res)
Uri.py(523):     if is_unicode:
Uri.py(524):         s = s.encode('iso-8859-1').decode(encoding)
 --- modulename: __init__, funcname: search_function
__init__.py(72):     entry = _cache.get(encoding, _unknown)
__init__.py(73):     if entry is not _unknown:
__init__.py(83):     norm_encoding = normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(62):     if type(encoding) is types.UnicodeType:
__init__.py(67):     return '_'.join(encoding.translate(_norm_encoding_map).split())
__init__.py(84):     aliased_encoding = _aliases.get(norm_encoding) or \
__init__.py(86):     if aliased_encoding is not None:
__init__.py(87):         modnames = [aliased_encoding,
__init__.py(91):     for modname in modnames:
__init__.py(92):         if not modname:
__init__.py(94):         try:
__init__.py(95):             mod = __import__(modname,
__init__.py(96):                              globals(), locals(), _import_tail)
__init__.py(100):             break
__init__.py(104):     try:
__init__.py(105):         getregentry = mod.getregentry
__init__.py(110):     if mod is None:
__init__.py(116):     entry = tuple(getregentry())
__init__.py(117):     if len(entry) != 4:
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(128):     _cache[encoding] = entry
__init__.py(132):     try:
__init__.py(133):         codecaliases = mod.getaliases()
__init__.py(134):     except AttributeError:
__init__.py(135):         pass
__init__.py(142):     return entry
Uri.py(525):     return s
Uri.py(1422):         if attemptAbsolute and osname == os.name and not os.path.isabs(path):
Uri.py(1425):         return path
Uri.py(859):             try:
Uri.py(860):                 stream = open(path, 'rb')
Uri.py(873):         return stream
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: Catalog, funcname: startElementNS
Catalog.py(175):     def startElementNS(self, (namespace, name), qualifiedName, attrs):
Catalog.py(181):         base = self.base[-1]
Catalog.py(182):         if name not in ('rewriteSystem', 'rewriteURI'):
Catalog.py(183):             base = attrs.get((XML_NAMESPACE, 'base'), base)
Catalog.py(184):         self.base.append(base)
Catalog.py(186):         if name == 'public':
Catalog.py(193):         elif name == 'system':
Catalog.py(199):         elif name == 'uri':
Catalog.py(205):         elif name == 'rewriteURI':
Catalog.py(212):         elif name == 'rewriteSystem':
Catalog.py(219):         elif name == 'delegateSystem':
Catalog.py(227):         elif name == 'delegatePublic':
Catalog.py(236):         elif name == 'delegateURI':
Catalog.py(243):         elif name == 'nextCatalog':
Catalog.py(248):         elif name in ('catalog', 'group'):
Catalog.py(250):             prefer = self.prefer_public[-1] and 'public' or 'system'
Catalog.py(251):             prefer = attrs.get((None, 'prefer'), prefer) == 'public'
Catalog.py(252):             self.prefer_public.append(prefer)
Catalog.py(253):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: Catalog, funcname: startElementNS
Catalog.py(175):     def startElementNS(self, (namespace, name), qualifiedName, attrs):
Catalog.py(181):         base = self.base[-1]
Catalog.py(182):         if name not in ('rewriteSystem', 'rewriteURI'):
Catalog.py(183):             base = attrs.get((XML_NAMESPACE, 'base'), base)
Catalog.py(184):         self.base.append(base)
Catalog.py(186):         if name == 'public':
Catalog.py(188):             if self.__ensure_attrs(name, attrs, 'publicId', 'uri'):
 --- modulename: Catalog, funcname: __ensure_attrs
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(266):         return True
Catalog.py(190):                 publicId = attrs[(None, 'publicId')]
Catalog.py(191):                 uri = Uri.Absolutize(attrs[(None, 'uri')], base)
 --- modulename: Uri, funcname: Absolutize
Uri.py(584):     if not baseUri or not IsAbsolute(baseUri):
 --- modulename: Uri, funcname: IsAbsolute
Uri.py(1019):     return GetScheme(identifier) is not None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(588):     if uriRef == '' or uriRef[0] == '#':
Uri.py(591):     tScheme = tAuth = tPath = tQuery = None
Uri.py(593):     (rScheme, rAuth, rPath, rQuery, rFrag) = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(596):     if rScheme is not None:
Uri.py(603):         (bScheme, bAuth, bPath, bQuery, bFrag) = SplitUriRef(baseUri)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(606):         if rAuth is not None:
Uri.py(613):             if not rPath:
Uri.py(620):                 if rPath[0] == '/':
Uri.py(624):                     if bAuth is not None and not bPath:
Uri.py(627):                         tPath = bPath[:bPath.rfind('/')+1] + rPath
Uri.py(628):                     tPath = RemoveDotSegments(tPath)
 --- modulename: Uri, funcname: RemoveDotSegments
Uri.py(653):     if path == '.' or path == '..':
Uri.py(656):     while path:
Uri.py(657):         if path[:2] == './':
Uri.py(659):         elif path[:3] == '../':
Uri.py(662):             break
Uri.py(667):     leading_slash = False
Uri.py(668):     if path[:1] == '/':
Uri.py(669):         path = path[1:]
Uri.py(670):         leading_slash = True
Uri.py(672):     if path[-2:] == '/.':
Uri.py(676):     segments = path.split('/')
Uri.py(677):     keepers = []
Uri.py(678):     segments.reverse()
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(696):     return leading_slash * '/' + '/'.join(keepers)
Uri.py(630):                 tQuery = rQuery
Uri.py(633):             tAuth = bAuth
Uri.py(635):         tScheme = bScheme
Uri.py(640):     return UnsplitUriRef((tScheme, tAuth, tPath, tQuery, rFrag))
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
Catalog.py(192):                 self.publicIds[publicId] = (uri, self.prefer_public[-1])
Catalog.py(253):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: Catalog, funcname: endElementNS
Catalog.py(269):     def endElementNS(self, (namespace, name), qualifiedName):
Catalog.py(274):         self.base.pop()
Catalog.py(275):         if name in ('catalog', 'group'):
Catalog.py(278):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: Catalog, funcname: startElementNS
Catalog.py(175):     def startElementNS(self, (namespace, name), qualifiedName, attrs):
Catalog.py(181):         base = self.base[-1]
Catalog.py(182):         if name not in ('rewriteSystem', 'rewriteURI'):
Catalog.py(183):             base = attrs.get((XML_NAMESPACE, 'base'), base)
Catalog.py(184):         self.base.append(base)
Catalog.py(186):         if name == 'public':
Catalog.py(188):             if self.__ensure_attrs(name, attrs, 'publicId', 'uri'):
 --- modulename: Catalog, funcname: __ensure_attrs
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(266):         return True
Catalog.py(190):                 publicId = attrs[(None, 'publicId')]
Catalog.py(191):                 uri = Uri.Absolutize(attrs[(None, 'uri')], base)
 --- modulename: Uri, funcname: Absolutize
Uri.py(584):     if not baseUri or not IsAbsolute(baseUri):
 --- modulename: Uri, funcname: IsAbsolute
Uri.py(1019):     return GetScheme(identifier) is not None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(588):     if uriRef == '' or uriRef[0] == '#':
Uri.py(591):     tScheme = tAuth = tPath = tQuery = None
Uri.py(593):     (rScheme, rAuth, rPath, rQuery, rFrag) = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(596):     if rScheme is not None:
Uri.py(603):         (bScheme, bAuth, bPath, bQuery, bFrag) = SplitUriRef(baseUri)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(606):         if rAuth is not None:
Uri.py(613):             if not rPath:
Uri.py(620):                 if rPath[0] == '/':
Uri.py(624):                     if bAuth is not None and not bPath:
Uri.py(627):                         tPath = bPath[:bPath.rfind('/')+1] + rPath
Uri.py(628):                     tPath = RemoveDotSegments(tPath)
 --- modulename: Uri, funcname: RemoveDotSegments
Uri.py(653):     if path == '.' or path == '..':
Uri.py(656):     while path:
Uri.py(657):         if path[:2] == './':
Uri.py(659):         elif path[:3] == '../':
Uri.py(662):             break
Uri.py(667):     leading_slash = False
Uri.py(668):     if path[:1] == '/':
Uri.py(669):         path = path[1:]
Uri.py(670):         leading_slash = True
Uri.py(672):     if path[-2:] == '/.':
Uri.py(676):     segments = path.split('/')
Uri.py(677):     keepers = []
Uri.py(678):     segments.reverse()
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(696):     return leading_slash * '/' + '/'.join(keepers)
Uri.py(630):                 tQuery = rQuery
Uri.py(633):             tAuth = bAuth
Uri.py(635):         tScheme = bScheme
Uri.py(640):     return UnsplitUriRef((tScheme, tAuth, tPath, tQuery, rFrag))
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
Catalog.py(192):                 self.publicIds[publicId] = (uri, self.prefer_public[-1])
Catalog.py(253):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: Catalog, funcname: endElementNS
Catalog.py(269):     def endElementNS(self, (namespace, name), qualifiedName):
Catalog.py(274):         self.base.pop()
Catalog.py(275):         if name in ('catalog', 'group'):
Catalog.py(278):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: Catalog, funcname: startElementNS
Catalog.py(175):     def startElementNS(self, (namespace, name), qualifiedName, attrs):
Catalog.py(181):         base = self.base[-1]
Catalog.py(182):         if name not in ('rewriteSystem', 'rewriteURI'):
Catalog.py(183):             base = attrs.get((XML_NAMESPACE, 'base'), base)
Catalog.py(184):         self.base.append(base)
Catalog.py(186):         if name == 'public':
Catalog.py(188):             if self.__ensure_attrs(name, attrs, 'publicId', 'uri'):
 --- modulename: Catalog, funcname: __ensure_attrs
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(266):         return True
Catalog.py(190):                 publicId = attrs[(None, 'publicId')]
Catalog.py(191):                 uri = Uri.Absolutize(attrs[(None, 'uri')], base)
 --- modulename: Uri, funcname: Absolutize
Uri.py(584):     if not baseUri or not IsAbsolute(baseUri):
 --- modulename: Uri, funcname: IsAbsolute
Uri.py(1019):     return GetScheme(identifier) is not None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(588):     if uriRef == '' or uriRef[0] == '#':
Uri.py(591):     tScheme = tAuth = tPath = tQuery = None
Uri.py(593):     (rScheme, rAuth, rPath, rQuery, rFrag) = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(596):     if rScheme is not None:
Uri.py(603):         (bScheme, bAuth, bPath, bQuery, bFrag) = SplitUriRef(baseUri)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(606):         if rAuth is not None:
Uri.py(613):             if not rPath:
Uri.py(620):                 if rPath[0] == '/':
Uri.py(624):                     if bAuth is not None and not bPath:
Uri.py(627):                         tPath = bPath[:bPath.rfind('/')+1] + rPath
Uri.py(628):                     tPath = RemoveDotSegments(tPath)
 --- modulename: Uri, funcname: RemoveDotSegments
Uri.py(653):     if path == '.' or path == '..':
Uri.py(656):     while path:
Uri.py(657):         if path[:2] == './':
Uri.py(659):         elif path[:3] == '../':
Uri.py(662):             break
Uri.py(667):     leading_slash = False
Uri.py(668):     if path[:1] == '/':
Uri.py(669):         path = path[1:]
Uri.py(670):         leading_slash = True
Uri.py(672):     if path[-2:] == '/.':
Uri.py(676):     segments = path.split('/')
Uri.py(677):     keepers = []
Uri.py(678):     segments.reverse()
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(696):     return leading_slash * '/' + '/'.join(keepers)
Uri.py(630):                 tQuery = rQuery
Uri.py(633):             tAuth = bAuth
Uri.py(635):         tScheme = bScheme
Uri.py(640):     return UnsplitUriRef((tScheme, tAuth, tPath, tQuery, rFrag))
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
Catalog.py(192):                 self.publicIds[publicId] = (uri, self.prefer_public[-1])
Catalog.py(253):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: Catalog, funcname: endElementNS
Catalog.py(269):     def endElementNS(self, (namespace, name), qualifiedName):
Catalog.py(274):         self.base.pop()
Catalog.py(275):         if name in ('catalog', 'group'):
Catalog.py(278):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: Catalog, funcname: startElementNS
Catalog.py(175):     def startElementNS(self, (namespace, name), qualifiedName, attrs):
Catalog.py(181):         base = self.base[-1]
Catalog.py(182):         if name not in ('rewriteSystem', 'rewriteURI'):
Catalog.py(183):             base = attrs.get((XML_NAMESPACE, 'base'), base)
Catalog.py(184):         self.base.append(base)
Catalog.py(186):         if name == 'public':
Catalog.py(188):             if self.__ensure_attrs(name, attrs, 'publicId', 'uri'):
 --- modulename: Catalog, funcname: __ensure_attrs
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(266):         return True
Catalog.py(190):                 publicId = attrs[(None, 'publicId')]
Catalog.py(191):                 uri = Uri.Absolutize(attrs[(None, 'uri')], base)
 --- modulename: Uri, funcname: Absolutize
Uri.py(584):     if not baseUri or not IsAbsolute(baseUri):
 --- modulename: Uri, funcname: IsAbsolute
Uri.py(1019):     return GetScheme(identifier) is not None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(588):     if uriRef == '' or uriRef[0] == '#':
Uri.py(591):     tScheme = tAuth = tPath = tQuery = None
Uri.py(593):     (rScheme, rAuth, rPath, rQuery, rFrag) = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(596):     if rScheme is not None:
Uri.py(603):         (bScheme, bAuth, bPath, bQuery, bFrag) = SplitUriRef(baseUri)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(606):         if rAuth is not None:
Uri.py(613):             if not rPath:
Uri.py(620):                 if rPath[0] == '/':
Uri.py(624):                     if bAuth is not None and not bPath:
Uri.py(627):                         tPath = bPath[:bPath.rfind('/')+1] + rPath
Uri.py(628):                     tPath = RemoveDotSegments(tPath)
 --- modulename: Uri, funcname: RemoveDotSegments
Uri.py(653):     if path == '.' or path == '..':
Uri.py(656):     while path:
Uri.py(657):         if path[:2] == './':
Uri.py(659):         elif path[:3] == '../':
Uri.py(662):             break
Uri.py(667):     leading_slash = False
Uri.py(668):     if path[:1] == '/':
Uri.py(669):         path = path[1:]
Uri.py(670):         leading_slash = True
Uri.py(672):     if path[-2:] == '/.':
Uri.py(676):     segments = path.split('/')
Uri.py(677):     keepers = []
Uri.py(678):     segments.reverse()
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(696):     return leading_slash * '/' + '/'.join(keepers)
Uri.py(630):                 tQuery = rQuery
Uri.py(633):             tAuth = bAuth
Uri.py(635):         tScheme = bScheme
Uri.py(640):     return UnsplitUriRef((tScheme, tAuth, tPath, tQuery, rFrag))
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
Catalog.py(192):                 self.publicIds[publicId] = (uri, self.prefer_public[-1])
Catalog.py(253):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: Catalog, funcname: endElementNS
Catalog.py(269):     def endElementNS(self, (namespace, name), qualifiedName):
Catalog.py(274):         self.base.pop()
Catalog.py(275):         if name in ('catalog', 'group'):
Catalog.py(278):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: Catalog, funcname: startElementNS
Catalog.py(175):     def startElementNS(self, (namespace, name), qualifiedName, attrs):
Catalog.py(181):         base = self.base[-1]
Catalog.py(182):         if name not in ('rewriteSystem', 'rewriteURI'):
Catalog.py(183):             base = attrs.get((XML_NAMESPACE, 'base'), base)
Catalog.py(184):         self.base.append(base)
Catalog.py(186):         if name == 'public':
Catalog.py(188):             if self.__ensure_attrs(name, attrs, 'publicId', 'uri'):
 --- modulename: Catalog, funcname: __ensure_attrs
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(262):             if not attrs.has_key((None, attr_name)):
Catalog.py(260):         for attr_name in attr_names:
Catalog.py(266):         return True
Catalog.py(190):                 publicId = attrs[(None, 'publicId')]
Catalog.py(191):                 uri = Uri.Absolutize(attrs[(None, 'uri')], base)
 --- modulename: Uri, funcname: Absolutize
Uri.py(584):     if not baseUri or not IsAbsolute(baseUri):
 --- modulename: Uri, funcname: IsAbsolute
Uri.py(1019):     return GetScheme(identifier) is not None
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(588):     if uriRef == '' or uriRef[0] == '#':
Uri.py(591):     tScheme = tAuth = tPath = tQuery = None
Uri.py(593):     (rScheme, rAuth, rPath, rQuery, rFrag) = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(596):     if rScheme is not None:
Uri.py(603):         (bScheme, bAuth, bPath, bQuery, bFrag) = SplitUriRef(baseUri)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(606):         if rAuth is not None:
Uri.py(613):             if not rPath:
Uri.py(620):                 if rPath[0] == '/':
Uri.py(624):                     if bAuth is not None and not bPath:
Uri.py(627):                         tPath = bPath[:bPath.rfind('/')+1] + rPath
Uri.py(628):                     tPath = RemoveDotSegments(tPath)
 --- modulename: Uri, funcname: RemoveDotSegments
Uri.py(653):     if path == '.' or path == '..':
Uri.py(656):     while path:
Uri.py(657):         if path[:2] == './':
Uri.py(659):         elif path[:3] == '../':
Uri.py(662):             break
Uri.py(667):     leading_slash = False
Uri.py(668):     if path[:1] == '/':
Uri.py(669):         path = path[1:]
Uri.py(670):         leading_slash = True
Uri.py(672):     if path[-2:] == '/.':
Uri.py(676):     segments = path.split('/')
Uri.py(677):     keepers = []
Uri.py(678):     segments.reverse()
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(680):         seg = segments.pop()
Uri.py(685):         if seg == '..':
Uri.py(693):         elif seg != '.':
Uri.py(694):             keepers.append(seg)
Uri.py(679):     while segments:
Uri.py(696):     return leading_slash * '/' + '/'.join(keepers)
Uri.py(630):                 tQuery = rQuery
Uri.py(633):             tAuth = bAuth
Uri.py(635):         tScheme = bScheme
Uri.py(640):     return UnsplitUriRef((tScheme, tAuth, tPath, tQuery, rFrag))
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
Catalog.py(192):                 self.publicIds[publicId] = (uri, self.prefer_public[-1])
Catalog.py(253):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: Catalog, funcname: endElementNS
Catalog.py(269):     def endElementNS(self, (namespace, name), qualifiedName):
Catalog.py(274):         self.base.pop()
Catalog.py(275):         if name in ('catalog', 'group'):
Catalog.py(278):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: Catalog, funcname: endElementNS
Catalog.py(269):     def endElementNS(self, (namespace, name), qualifiedName):
Catalog.py(274):         self.base.pop()
Catalog.py(275):         if name in ('catalog', 'group'):
Catalog.py(277):             self.prefer_public.pop()
Catalog.py(278):         return
Catalog.py(140):         del self.prefer_public
Catalog.py(141):         del self.base
Catalog.py(142):         return
Catalog.py(114):         if not quiet:
Catalog.py(119):         return
Catalog.py(312):     for uri in uris:
Catalog.py(333):     if not quiet:
Catalog.py(337):     return catalog
 --- modulename: InputSource, funcname: __init__
InputSource.py(294):         self._klass = inputSourceClass or InputSource
InputSource.py(295):         self.resolver = resolver
InputSource.py(296):         self.catalog = catalog
InputSource.py(297):         return
Domlette.py(31): from Lib.Print import Print, PrettyPrint
 --- modulename: Print, funcname: ?
Print.py(9): """
Print.py(11): import sys
Print.py(12): from xml.dom import Node
Print.py(13): from Ft.Xml import XML_NAMESPACE, XMLNS_NAMESPACE
Print.py(14): import XmlPrinter, XmlPrettyPrinter, HtmlPrinter, HtmlPrettyPrinter
 --- modulename: XmlPrinter, funcname: ?
XmlPrinter.py(9): """
XmlPrinter.py(11): import cStreamWriter
XmlPrinter.py(13): class XmlPrinter:
 --- modulename: XmlPrinter, funcname: XmlPrinter
XmlPrinter.py(13): class XmlPrinter:
XmlPrinter.py(33):     def __init__(self, stream, encoding):
XmlPrinter.py(49):     def startDocument(self, version='1.0', standalone=None):
XmlPrinter.py(63):     def endDocument(self):
XmlPrinter.py(74):     def doctype(self, name, publicId, systemId):
XmlPrinter.py(99):     def startElement(self, namespaceUri, tagName, namespaces, attributes):
XmlPrinter.py(132):     def endElement(self, namespaceUri, tagName):
XmlPrinter.py(152):     def attribute(self, elementUri, elementName, name, value):
XmlPrinter.py(195):     def text(self, text, disableEscaping=0):
XmlPrinter.py(220):     def cdataSection(self, data):
XmlPrinter.py(239):     def processingInstruction(self, target, data):
XmlPrinter.py(257):     def comment(self, data):
XmlPrinter.py(274):     textEntities = cStreamWriter.EntityMap({'<' : '&lt;',
XmlPrinter.py(280):     attrEntitiesQuot = cStreamWriter.EntityMap({'<' : '&lt;',
XmlPrinter.py(288):     attrEntitiesApos = cStreamWriter.EntityMap({'<' : '&lt;',
 --- modulename: XmlPrettyPrinter, funcname: ?
XmlPrettyPrinter.py(9): """
XmlPrettyPrinter.py(11): from XmlPrinter import XmlPrinter
XmlPrettyPrinter.py(13): class XmlPrettyPrinter(XmlPrinter):
 --- modulename: XmlPrettyPrinter, funcname: XmlPrettyPrinter
XmlPrettyPrinter.py(13): class XmlPrettyPrinter(XmlPrinter):
XmlPrettyPrinter.py(26):     indent = '  '
XmlPrettyPrinter.py(28):     def __init__(self, stream, encoding):
XmlPrettyPrinter.py(34):     def startElement(self, namespaceUri, tagName, namespaces, attributes):
XmlPrettyPrinter.py(46):     def endElement(self, namespaceUri, tagName):
XmlPrettyPrinter.py(56):     def text(self, data, disableEscaping=0):
XmlPrettyPrinter.py(62):     def cdataSection(self, data):
XmlPrettyPrinter.py(68):     def processingInstruction(self, target, data):
XmlPrettyPrinter.py(79):     def comment(self, data):
 --- modulename: HtmlPrinter, funcname: ?
HtmlPrinter.py(9): """
HtmlPrinter.py(11): import re
HtmlPrinter.py(13): from Ft.Xml import EMPTY_NAMESPACE
HtmlPrinter.py(15): import cStreamWriter
HtmlPrinter.py(16): from XmlPrinter import XmlPrinter
HtmlPrinter.py(19): class HtmlPrinter(XmlPrinter):
 --- modulename: HtmlPrinter, funcname: HtmlPrinter
HtmlPrinter.py(19): class HtmlPrinter(XmlPrinter):
HtmlPrinter.py(32):     def __init__(self, stream, encoding):
HtmlPrinter.py(44):     def startDocument(self, version='4.0', standalone=None):
HtmlPrinter.py(60):     def doctype(self, name, publicId, systemId):
HtmlPrinter.py(78):     def startElement(self, namespaceUri, tagName, namespaces, attributes):
HtmlPrinter.py(101):     def endElement(self, namespaceUri, tagName):
HtmlPrinter.py(123):     def attribute(self, elementUri, elementName, name, value):
HtmlPrinter.py(167):     def text(self, data, disableEscaping=0):
HtmlPrinter.py(182):     def processingInstruction(self, target, data):
HtmlPrinter.py(202):     forbiddenEndElements = {}
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(205):         forbiddenEndElements[name] = True
HtmlPrinter.py(203):     for name in ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr',
HtmlPrinter.py(206):     del name
HtmlPrinter.py(214):     noEscapeElements = {'script' : True,
HtmlPrinter.py(219):     booleanAttributes = {
HtmlPrinter.py(237):     uriAttributes = {
HtmlPrinter.py(252):     entities_3_2 = {
HtmlPrinter.py(353):     entities_4_0 = {
HtmlPrinter.py(521):     _versionedEntities = {
HtmlPrinter.py(526):     textEntities = {'<' : '&lt;',
HtmlPrinter.py(531):     textEntities.update(entities_3_2)
HtmlPrinter.py(532):     _versionedEntities['3.2'].append(cStreamWriter.EntityMap(textEntities))
HtmlPrinter.py(533):     textEntities.update(entities_4_0)
HtmlPrinter.py(534):     textEntities = cStreamWriter.EntityMap(textEntities)
HtmlPrinter.py(535):     _versionedEntities['4.0'].append(textEntities)
HtmlPrinter.py(541):     def attr_amp_escape(string, offset):
HtmlPrinter.py(547):     attrEntitiesQuot = {'&' : attr_amp_escape,
HtmlPrinter.py(553):     attrEntitiesQuot.update(entities_3_2)
HtmlPrinter.py(554):     _versionedEntities['3.2'].append(cStreamWriter.EntityMap(attrEntitiesQuot))
HtmlPrinter.py(555):     attrEntitiesQuot.update(entities_4_0)
HtmlPrinter.py(556):     attrEntitiesQuot = cStreamWriter.EntityMap(attrEntitiesQuot)
HtmlPrinter.py(557):     _versionedEntities['4.0'].append(attrEntitiesQuot)
HtmlPrinter.py(559):     attrEntitiesApos = {'&' : attr_amp_escape,
HtmlPrinter.py(565):     attrEntitiesApos.update(entities_3_2)
HtmlPrinter.py(566):     _versionedEntities['3.2'].append(cStreamWriter.EntityMap(attrEntitiesApos))
HtmlPrinter.py(567):     attrEntitiesApos.update(entities_4_0)
HtmlPrinter.py(568):     attrEntitiesApos = cStreamWriter.EntityMap(attrEntitiesApos)
HtmlPrinter.py(569):     _versionedEntities['4.0'].append(attrEntitiesApos)
HtmlPrinter.py(571):     del entities_3_2
HtmlPrinter.py(572):     del entities_4_0
HtmlPrinter.py(573):     del attr_amp_escape
 --- modulename: HtmlPrettyPrinter, funcname: ?
HtmlPrettyPrinter.py(9): """
HtmlPrettyPrinter.py(11): from Ft.Xml import EMPTY_NAMESPACE
HtmlPrettyPrinter.py(13): from HtmlPrinter import HtmlPrinter
HtmlPrettyPrinter.py(16): class HtmlPrettyPrinter(HtmlPrinter):
 --- modulename: HtmlPrettyPrinter, funcname: HtmlPrettyPrinter
HtmlPrettyPrinter.py(16): class HtmlPrettyPrinter(HtmlPrinter):
HtmlPrettyPrinter.py(29):     indent = '  '
HtmlPrettyPrinter.py(31):     def __init__(self, stream, encoding):
HtmlPrettyPrinter.py(42):     def startElement(self, namespaceUri, tagName, namespaces, attributes):
HtmlPrettyPrinter.py(67):     def endElement(self, namespaceUri, tagName):
HtmlPrettyPrinter.py(86):     def processingInstruction(self, target, data):
HtmlPrettyPrinter.py(100):     def comment(self, data):
HtmlPrettyPrinter.py(115):     inlineElements = {}
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(122):         inlineElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(116):     for name in ['tt', 'i', 'b', 'u', 's', 'strike', 'big', 'small', 'em',
HtmlPrettyPrinter.py(127):     noIndentElements = {}
HtmlPrettyPrinter.py(128):     for name in ['script', 'style', 'pre', 'textarea', 'xmp']:
HtmlPrettyPrinter.py(129):         noIndentElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(128):     for name in ['script', 'style', 'pre', 'textarea', 'xmp']:
HtmlPrettyPrinter.py(129):         noIndentElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(128):     for name in ['script', 'style', 'pre', 'textarea', 'xmp']:
HtmlPrettyPrinter.py(129):         noIndentElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(128):     for name in ['script', 'style', 'pre', 'textarea', 'xmp']:
HtmlPrettyPrinter.py(129):         noIndentElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(128):     for name in ['script', 'style', 'pre', 'textarea', 'xmp']:
HtmlPrettyPrinter.py(129):         noIndentElements[(EMPTY_NAMESPACE, name)] = True
HtmlPrettyPrinter.py(128):     for name in ['script', 'style', 'pre', 'textarea', 'xmp']:
HtmlPrettyPrinter.py(131):     del name
Print.py(16): class PrintVisitor:
 --- modulename: Print, funcname: PrintVisitor
Print.py(16): class PrintVisitor:
Print.py(23):     def __init__(self, stream, encoding, nsHints=None, isHtml=False, indent=False):
Print.py(45):     _dispatch = {}
Print.py(46):     def visit(self, node):
Print.py(69):     def visitNotImplemented(self, node):
Print.py(78):     _dispatch[Node.ENTITY_REFERENCE_NODE] = visitNotImplemented
Print.py(79):     _dispatch[Node.ENTITY_NODE] = visitNotImplemented
Print.py(80):     _dispatch[Node.NOTATION_NODE] = visitNotImplemented
Print.py(82):     def visitDocumentFragment(self, node):
Print.py(90):     _dispatch[Node.DOCUMENT_FRAGMENT_NODE] = visitDocumentFragment
Print.py(92):     def visitDocument(self, node):
Print.py(116):     _dispatch[Node.DOCUMENT_NODE] = visitDocument
Print.py(118):     def visitDocumentType(self, node):
Print.py(126):     _dispatch[Node.DOCUMENT_TYPE_NODE] = visitDocumentType
Print.py(128):     def visitElement(self, node):
Print.py(181):     _dispatch[Node.ELEMENT_NODE] = visitElement
Print.py(183):     def visitAttribute(self, node):
Print.py(190):     _dispatch[Node.ATTRIBUTE_NODE] = visitAttribute
Print.py(192):     def visitText(self, node):
Print.py(199):     _dispatch[Node.TEXT_NODE] = visitText
Print.py(201):     def visitCDATASection(self, node):
Print.py(208):     _dispatch[Node.CDATA_SECTION_NODE] = visitCDATASection
Print.py(210):     def visitComment(self, node):
Print.py(217):     _dispatch[Node.COMMENT_NODE] = visitComment
Print.py(219):     def visitProcessingInstruction(self, node):
Print.py(226):     _dispatch[Node.PROCESSING_INSTRUCTION_NODE] = visitProcessingInstruction
Print.py(229): def Print(root, stream=sys.stdout, encoding='UTF-8', asHtml=None):
Print.py(254): def PrettyPrint(root, stream=sys.stdout, encoding='UTF-8', asHtml=None):
Domlette.py(35): from Lib.XmlString import XmlStrLStrip, XmlStrRStrip, XmlStrStrip, IsXmlSpace
Domlette.py(37): from cDomlette import implementation, NonvalParse, ValParse
 --- modulename: cDomlette, funcname: ?
cDomlette.py(9): """
cDomlette.py(10): import re, warnings
cDomlette.py(12): from Ft.Xml import XML_NAMESPACE, XMLNS_NAMESPACE
cDomlette.py(15): from cDomlettec import implementation
cDomlette.py(16): from cDomlettec import NonvalParse, Parse, CreateParser
cDomlette.py(19): from cDomlettec import GetAllNs, SeekNss
cDomlette.py(22): from cDomlettec import TestTree, TestRefCounts, StartNodeCounting, GetNodeCount
cDomlette.py(27): from cDomlettec import XPTR_START_STATE
cDomlette.py(28): from cDomlettec import XPTR_ELEMENT_MATCH as ELEMENT_MATCH
cDomlette.py(29): from cDomlettec import XPTR_ELEMENT_COUNT as ELEMENT_COUNT
cDomlette.py(30): from cDomlettec import XPTR_ATTRIBUTE_MATCH as ATTRIBUTE_MATCH
cDomlette.py(31): from cDomlettec import PARSE_STREAM_STATE as INITIAL_STATE
cDomlette.py(34): __all__ = ['implementation',
cDomlette.py(40): class FragmentSpec:
 --- modulename: cDomlette, funcname: FragmentSpec
cDomlette.py(40): class FragmentSpec:
cDomlette.py(41):     def __init__(self):
cDomlette.py(48): def ProcessFragment(frag):
cDomlette.py(83): def HandleStep(expr, spec, nss):
cDomlette.py(143): from xml.sax import xmlreader
cDomlette.py(144): from Ft import FtWarning
cDomlette.py(145): from Ft.Xml import ReaderException, EMPTY_NAMESPACE
cDomlette.py(146): from Ft.Xml.XInclude import XINCLUDE_NAMESPACE
cDomlette.py(147): from Ft.Xml.Lib.XmlString import SplitQName, IsXmlSpace
cDomlette.py(149): class _ValReader:
 --- modulename: cDomlette, funcname: _ValReader
cDomlette.py(149): class _ValReader:
cDomlette.py(153):     def fromSrc(self, source, parseParamEntities=1):
cDomlette.py(164):     def prepareParser(self):
cDomlette.py(187):     def parse(self, source):
cDomlette.py(190):     def reset(self):
cDomlette.py(194):     def initHandler(self, inputSource, parseParamEntities):
cDomlette.py(224):     def getRootNode(self):
cDomlette.py(232):     def create_input_source(self, systemId):
cDomlette.py(238):     def resolve_pe_pubid(self, publicId, systemId):
cDomlette.py(249):     def resolve_doctype_pubid(self, publicId, systemId):
cDomlette.py(260):     def resolve_entity_pubid(self, publicId, systemId):
cDomlette.py(273):     def dtd_start(self):
cDomlette.py(278):     def dtd_end(self):
cDomlette.py(283):     def new_general_entity(self,name,val):
cDomlette.py(287):     def new_external_entity(self,ent_name,pub_id,sys_id,ndata):
cDomlette.py(296):     def new_parameter_entity(self,name,val):
cDomlette.py(300):     def new_external_pe(self,name,pubid,sysid):
cDomlette.py(304):     def new_notation(self,name,pubid,sysid):
cDomlette.py(308):     def new_element_type(self,elem_name,elem_cont):
cDomlette.py(312):     def new_attribute(self,elem,attr,a_type,a_decl,a_def):
cDomlette.py(318):     def set_locator(self, locator):
cDomlette.py(322):     def doc_start(self):
cDomlette.py(325):     def doc_end(self):
cDomlette.py(328):     def handle_start_tag(self, name, attribs):
cDomlette.py(492):     def handle_end_tag(self, name):
cDomlette.py(518):     def handle_data(self, data, start, end):
cDomlette.py(530):     handle_ignorable_data = handle_data
cDomlette.py(532):     def handle_pi(self, target, data):
cDomlette.py(549):     def handle_comment(self, data):
cDomlette.py(561):     def handle_doctype(self, name, publicId, systemId):
cDomlette.py(577):     def set_entity_info(self, xmlver, enc, sddecl):
cDomlette.py(582):     def get_locator(self):
cDomlette.py(585):     def fatal(self, message):
cDomlette.py(591):     error = fatal
cDomlette.py(593):     def warning(self, message):
cDomlette.py(604):     def _completeTextNode(self):
cDomlette.py(625): try:
cDomlette.py(626):     from xml.parsers import xmlproc
cDomlette.py(627): except ImportError:
cDomlette.py(628):     def ValParse(isrc, readExtDtd=True):
Domlette.py(38): from cDomlette import GetAllNs, SeekNss
Domlette.py(40): def parse(isrc, readExtDtd=READ_EXTERNAL_DTD, parseAsEntity=False):
Domlette.py(45): def nonvalParse(isrc, readExtDtd=READ_EXTERNAL_DTD, parseAsEntity=False):
Domlette.py(50): def valParse(isrc, readExtDtd=True):
Domlette.py(56): def ConvertDocument(oldDocument, documentURI=u''):
Domlette.py(86): class _Reader:
 --- modulename: Domlette, funcname: _Reader
Domlette.py(86): class _Reader:
Domlette.py(91):     def __init__(self, parseMethod, inputSourceFactory=None, args=(), kwargs=None):
Domlette.py(98):     def parse(self, inputSource):
Domlette.py(108):     def parseString(self, st, uri=None, *v_args, **kw_args):
Domlette.py(124):     def parseStream(self, stream, uri=None, *v_args, **kw_args):
Domlette.py(139):     def parseUri(self, uri, *v_args, **kw_args):
Domlette.py(148): class ValidatingReaderBase(_Reader):
 --- modulename: Domlette, funcname: ValidatingReaderBase
Domlette.py(148): class ValidatingReaderBase(_Reader):
Domlette.py(153):     def __init__(self, inputSourceFactory=None):
Domlette.py(157): class NonvalidatingReaderBase(_Reader):
 --- modulename: Domlette, funcname: NonvalidatingReaderBase
Domlette.py(157): class NonvalidatingReaderBase(_Reader):
Domlette.py(163):     def __init__(self, inputSourceFactory=None):
Domlette.py(168): class EntityReaderBase(_Reader):
 --- modulename: Domlette, funcname: EntityReaderBase
Domlette.py(168): class EntityReaderBase(_Reader):
Domlette.py(175):     def __init__(self, inputSourceFactory=None):
Domlette.py(181): class NoExtDtdReaderBase(_Reader):
 --- modulename: Domlette, funcname: NoExtDtdReaderBase
Domlette.py(181): class NoExtDtdReaderBase(_Reader):
Domlette.py(187):     def __init__(self, inputSourceFactory=None):
Domlette.py(193): ValidatingReader = ValidatingReaderBase()
 --- modulename: Domlette, funcname: __init__
Domlette.py(154):         _Reader.__init__(self, ValParse, inputSourceFactory)
 --- modulename: Domlette, funcname: __init__
Domlette.py(92):         self.inputSourceFactory = inputSourceFactory or InputSource.DefaultFactory
Domlette.py(93):         self.parseMethod = parseMethod
Domlette.py(94):         self.kwargs = kwargs or {}
Domlette.py(95):         self.args = args
Domlette.py(96):         return
Domlette.py(194): ValidatingReader.__doc__ = \
Domlette.py(203): NonvalidatingReader = NonvalidatingReaderBase()
 --- modulename: Domlette, funcname: __init__
Domlette.py(164):         _Reader.__init__(self, NonvalParse, inputSourceFactory,
Domlette.py(165):                          kwargs={'readExtDtd': READ_EXTERNAL_DTD})
 --- modulename: Domlette, funcname: __init__
Domlette.py(92):         self.inputSourceFactory = inputSourceFactory or InputSource.DefaultFactory
Domlette.py(93):         self.parseMethod = parseMethod
Domlette.py(94):         self.kwargs = kwargs or {}
Domlette.py(95):         self.args = args
Domlette.py(96):         return
Domlette.py(204): NonvalidatingReader.__doc__ = \
Domlette.py(213): NoExtDtdReader = NoExtDtdReaderBase()
 --- modulename: Domlette, funcname: __init__
Domlette.py(188):         _Reader.__init__(self, NonvalParse, inputSourceFactory,
Domlette.py(189):                          kwargs={'readExtDtd': False})
 --- modulename: Domlette, funcname: __init__
Domlette.py(92):         self.inputSourceFactory = inputSourceFactory or InputSource.DefaultFactory
Domlette.py(93):         self.parseMethod = parseMethod
Domlette.py(94):         self.kwargs = kwargs or {}
Domlette.py(95):         self.args = args
Domlette.py(96):         return
Domlette.py(214): NoExtDtdReader.__doc__ = \
Domlette.py(224): EntityReader = EntityReaderBase()
 --- modulename: Domlette, funcname: __init__
Domlette.py(176):         _Reader.__init__(self, NonvalParse, inputSourceFactory,
Domlette.py(177):                          kwargs={'readExtDtd': READ_EXTERNAL_DTD,
 --- modulename: Domlette, funcname: __init__
Domlette.py(92):         self.inputSourceFactory = inputSourceFactory or InputSource.DefaultFactory
Domlette.py(93):         self.parseMethod = parseMethod
Domlette.py(94):         self.kwargs = kwargs or {}
Domlette.py(95):         self.args = args
Domlette.py(96):         return
Domlette.py(225): EntityReader.__doc__ = \
Domlette.py(236): class DeprecatedReader:
 --- modulename: Domlette, funcname: DeprecatedReader
Domlette.py(236): class DeprecatedReader:
Domlette.py(241):     def __init__(self, resolveEntity=None, processIncludes=1):
Domlette.py(248):     def fromUri(self, uri, baseUri='', ownerDoc=None, stripElements=None):
Domlette.py(264):     def fromStream(self, stream, refUri='', ownerDoc=None,
Domlette.py(283):     def fromString(self, st, refUri='', ownerDoc=None, stripElements=None):
Domlette.py(304): class DEFAULT_NONVALIDATING_READER(DeprecatedReader):
 --- modulename: Domlette, funcname: DEFAULT_NONVALIDATING_READER
Domlette.py(304): class DEFAULT_NONVALIDATING_READER(DeprecatedReader):
Domlette.py(305):     _parseMethod = (NonvalParse,)
Domlette.py(307): class DEFAULT_VALIDATING_READER(DeprecatedReader):
 --- modulename: Domlette, funcname: DEFAULT_VALIDATING_READER
Domlette.py(307): class DEFAULT_VALIDATING_READER(DeprecatedReader):
Domlette.py(308):     _parseMethod = (ValParse,)
Util.py(16): from Ft.Xml.Lib.XmlString import SplitQName
Util.py(20): __all__ = [# XPath expression parser:
Util.py(32): g_documentIdIndex = {}
Util.py(34): def GetElementById(document, idstr):
Util.py(51): def ElementsById(element, idmap):
Util.py(72): def ExpandQName(qname, refNode=None, namespaces=None):
Util.py(98): def NormalizeNode(node):
Util.py(148): def SimpleEvaluate(expr, node, explicitNss=None):
Util.py(180): def Evaluate(expr, contextNode=None, context=None):
Util.py(232): def Compile(expr):
__init__.py(118): from Util import NormalizeNode
__init__.py(120): Util.XPathParser = g_parser
__init__.py(121): Util.Context = Context
 --- modulename: XPatterns, funcname: ?
XPatterns.py(9): """
XPatterns.py(11): from xml.dom import Node
XPatterns.py(13): ChildAxis = Node.ELEMENT_NODE
XPatterns.py(14): AttributeAxis = Node.ATTRIBUTE_NODE
XPatterns.py(16): class Patterns:
 --- modulename: XPatterns, funcname: Patterns
XPatterns.py(16): class Patterns:
XPatterns.py(17):     def __init__(self, patterns):
XPatterns.py(20):     def getShortcuts(self, namespaces):
XPatterns.py(24):     def match(self, context, node):
XPatterns.py(30):     def pprint(self, indent=''):
XPatterns.py(36):     def __str__(self):
XPatterns.py(39):     def __repr__(self):
XPatterns.py(45): class Pattern:
 --- modulename: XPatterns, funcname: Pattern
XPatterns.py(45): class Pattern:
XPatterns.py(46):     def __init__(self, steps):
XPatterns.py(52):     def getShortcut(self):
XPatterns.py(62):     def getQuickKey(self, namespaces):
XPatterns.py(69):     def match(self, context, node, dummy=None):
XPatterns.py(95):     def pprint(self, indent=''):
XPatterns.py(98):     def __str__(self):
XPatterns.py(101):     def __repr__(self):
XPatterns.py(113): class PredicatedNodeTest:
 --- modulename: XPatterns, funcname: PredicatedNodeTest
XPatterns.py(113): class PredicatedNodeTest:
XPatterns.py(114):     def __init__(self, nodeTest, predicateList):
XPatterns.py(120):     def getQuickKey(self, namespaces):
XPatterns.py(123):     def match(self, context, node, principalType):
XPatterns.py(139):     def __str__(self):
XPatterns.py(145):     def __repr__(self):
XPatterns.py(148): class DocumentNodeTest:
 --- modulename: XPatterns, funcname: DocumentNodeTest
XPatterns.py(148): class DocumentNodeTest:
XPatterns.py(149):     def __init__(self):
XPatterns.py(152):     def getQuickKey(self, namespaces):
XPatterns.py(155):     def match(self, context, node, principalType):
XPatterns.py(158):     def __str__(self):
XPatterns.py(164):     def __repr__(self):
XPatterns.py(167): class IdKeyNodeTest:
 --- modulename: XPatterns, funcname: IdKeyNodeTest
XPatterns.py(167): class IdKeyNodeTest:
XPatterns.py(168):     def __init__(self, idOrKey):
XPatterns.py(172):     def getQuickKey(self, namespaces):
XPatterns.py(175):     def match(self, context, node, principalType):
XPatterns.py(178):     def __str__(self):
XPatterns.py(184):     def __repr__(self):
__init__.py(66): parser = XPatternParser
__init__.py(70): from xml.dom import Node
__init__.py(71): class PatternList:
 --- modulename: __init__, funcname: PatternList
__init__.py(71): class PatternList:
__init__.py(76):     PARSER = parser.new()
__init__.py(77):     def __init__(self, patterns, namespaces=None):
__init__.py(116):     def lookup(self, node, context=None):
__init__.py(136):     def lookupAsSet(self, node, context=None):
__init__.py(158):     def xsltKeyPrep(self, context, node):
__init__.py(171): from StylesheetTree import XsltElement
 --- modulename: StylesheetTree, funcname: ?
StylesheetTree.py(9): """
StylesheetTree.py(10): from Ft.Xml import EMPTY_NAMESPACE
StylesheetTree.py(11): from Ft.Xml.Domlette import GetAllNs
StylesheetTree.py(12): from Ft.Xml.Xslt import XSL_NAMESPACE, XsltException, XsltRuntimeException, Error
StylesheetTree.py(13): from Ft.Xml.Xslt import AttributeValueTemplate
 --- modulename: AttributeValueTemplate, funcname: ?
AttributeValueTemplate.py(9): """
AttributeValueTemplate.py(11): import re
AttributeValueTemplate.py(12): from Ft.Xml import XPath
AttributeValueTemplate.py(13): from Ft.Xml.Lib.XmlString import IsXmlSpace
AttributeValueTemplate.py(14): from Ft.Xml.Xslt import XsltException, Error
AttributeValueTemplate.py(15): from Ft.Xml.XPath import Conversions
AttributeValueTemplate.py(16): from Ft.Xml.XPath import parser as XPathParser
AttributeValueTemplate.py(18): g_braceSplitPattern = re.compile(r'([\{\}])')
AttributeValueTemplate.py(19): g_parser = XPathParser.new()
AttributeValueTemplate.py(21): class AttributeValueTemplate:
 --- modulename: AttributeValueTemplate, funcname: AttributeValueTemplate
AttributeValueTemplate.py(21): class AttributeValueTemplate:
AttributeValueTemplate.py(22):     def __init__(self, source, validator=None, element=None):
AttributeValueTemplate.py(86):     def isConstant(self):
AttributeValueTemplate.py(89):     def evaluate(self, context):
AttributeValueTemplate.py(106):     def __nonzero__(self):
StylesheetTree.py(14): from Ft.Xml.Xslt import CategoryTypes
StylesheetTree.py(15): from Ft.Xml.Xslt import ContentInfo
 --- modulename: ContentInfo, funcname: ?
ContentInfo.py(1): import sys
ContentInfo.py(2): from Ft.Xml.Xslt import XSL_NAMESPACE
ContentInfo.py(3): from Ft.Xml.Xslt import CategoryTypes
ContentInfo.py(5): TEXT_NODE = (None, None)
ContentInfo.py(6): EMPTY = -sys.maxint
ContentInfo.py(7): ELSE = EMPTY + 1
ContentInfo.py(9): class Atom:
 --- modulename: ContentInfo, funcname: Atom
ContentInfo.py(9): class Atom:
ContentInfo.py(14):     def __init__(self, token):
ContentInfo.py(17):     def buildValidator(self, validator, initial, final):
ContentInfo.py(22): class Seq:
 --- modulename: ContentInfo, funcname: Seq
ContentInfo.py(22): class Seq:
ContentInfo.py(27):     def __init__(self, *args):
ContentInfo.py(35):     def __str__(self):
ContentInfo.py(41):     def buildValidator(self, validator, initial, final):
ContentInfo.py(51): class Alt:
 --- modulename: ContentInfo, funcname: Alt
ContentInfo.py(51): class Alt:
ContentInfo.py(57):     def __init__(self, *args):
ContentInfo.py(65):     def __str__(self):
ContentInfo.py(71):     def buildValidator(self, validator, initial, final):
ContentInfo.py(77): class Rep1:
 --- modulename: ContentInfo, funcname: Rep1
ContentInfo.py(77): class Rep1:
ContentInfo.py(82):     def __init__(self, arg):
ContentInfo.py(88):     def __str__(self):
ContentInfo.py(91):     def buildValidator(self, validator, initial, final):
ContentInfo.py(98): class Opt:
 --- modulename: ContentInfo, funcname: Opt
ContentInfo.py(98): class Opt:
ContentInfo.py(104):     def __init__(self, arg):
ContentInfo.py(110):     def __str__(self):
ContentInfo.py(113):     def buildValidator(self, validator, initial, final):
ContentInfo.py(117): class Rep:
 --- modulename: ContentInfo, funcname: Rep
ContentInfo.py(117): class Rep:
ContentInfo.py(122):     def __init__(self, arg):
ContentInfo.py(128):     def __str__(self):
ContentInfo.py(131):     def buildValidator(self, validator, initial, final):
ContentInfo.py(138): Empty = Atom(EMPTY)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(139): Empty.__str__ = lambda : '/empty/'
ContentInfo.py(140): Empty.__doc__ = """
ContentInfo.py(143): Empty.__nonzero__ = lambda : 0
ContentInfo.py(145): Text = Atom(TEXT_NODE)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(146): Text.__str__ = lambda : '#PCDATA'
ContentInfo.py(147): Text.__doc__ = """\
ContentInfo.py(151): class QName(Atom):
 --- modulename: ContentInfo, funcname: QName
ContentInfo.py(151): class QName(Atom):
ContentInfo.py(156):     def __init__(self, namespaceUri, qualifiedName):
ContentInfo.py(166):     def __str__(self):
ContentInfo.py(170): ResultElements = Rep(Atom(CategoryTypes.RESULT_ELEMENT))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
ContentInfo.py(171): ResultElements.__str__ = lambda : '/result-elements/'
ContentInfo.py(172): ResultElements.__doc__ = """
ContentInfo.py(176): Instructions = Rep(Atom(CategoryTypes.INSTRUCTION))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
ContentInfo.py(177): Instructions.__str__ = lambda : '/instructions/'
ContentInfo.py(178): Instructions.__doc__ = """\
ContentInfo.py(182): Template = Rep(Alt(Text,
ContentInfo.py(183):                    QName(XSL_NAMESPACE, 'xsl:variable'),
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
ContentInfo.py(184):                    Atom(CategoryTypes.INSTRUCTION),
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(185):                    Atom(CategoryTypes.RESULT_ELEMENT)))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(58):         self.args = []
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(63):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
ContentInfo.py(186): Template.__str__ = lambda : '/template/'
ContentInfo.py(187): Template.__doc__ = """
ContentInfo.py(191): TopLevelElements = Rep(Alt(QName(XSL_NAMESPACE, 'xsl:variable'),
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
ContentInfo.py(192):                            QName(XSL_NAMESPACE, 'xsl:param'),
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
ContentInfo.py(193):                            Atom(CategoryTypes.TOP_LEVEL_ELEMENT),
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(194):                            Atom(CategoryTypes.RESULT_ELEMENT)))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(58):         self.args = []
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(63):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
ContentInfo.py(195): TopLevelElements.__str__ = lambda : '/top-level-elements/'
ContentInfo.py(196): TopLevelElements.__doc__ = """\
ContentInfo.py(201): class Validator:
 --- modulename: ContentInfo, funcname: Validator
ContentInfo.py(201): class Validator:
ContentInfo.py(202):     def __init__(self, expr):
ContentInfo.py(210):     def __str__(self):
ContentInfo.py(213):     def transition(self, token, state1, state2):
ContentInfo.py(226):     def getValidation(self):
ContentInfo.py(229):     def validate(self, validation, token):
StylesheetTree.py(17): from Ft.Xml.XPath import parser
StylesheetTree.py(18): _xpath_parser = parser
StylesheetTree.py(19): from Ft.Xml.Xslt import parser
StylesheetTree.py(20): _xpattern_parser = parser
StylesheetTree.py(21): del parser
StylesheetTree.py(23): class XsltNode:
 --- modulename: StylesheetTree, funcname: XsltNode
StylesheetTree.py(23): class XsltNode:
StylesheetTree.py(27):     baseUri = ''
StylesheetTree.py(28):     lineNumber = '??'
StylesheetTree.py(29):     columnNumber = '??'
StylesheetTree.py(30):     importIndex = -1
StylesheetTree.py(32):     root = None
StylesheetTree.py(33):     parent = None
StylesheetTree.py(34):     expandedName = (None, None)
StylesheetTree.py(35):     nodeName = None
StylesheetTree.py(36):     children = None
StylesheetTree.py(37):     attributes = None
StylesheetTree.py(40):     doesSetup = False
StylesheetTree.py(41):     doesPrime = False
StylesheetTree.py(42):     doesIdle = False
StylesheetTree.py(44):     def isLastChild(self):
StylesheetTree.py(56):     def setup(self):
StylesheetTree.py(59):     def prime(self, processor, context):
StylesheetTree.py(62):     def idle(self, processor):
StylesheetTree.py(65):     def instantiate(self, context, processor):
StylesheetTree.py(68):     def isPseudoNode(self):
StylesheetTree.py(71):     def pprint(self, _indent=''):
StylesheetTree.py(80): class XsltRoot(XsltNode):
 --- modulename: StylesheetTree, funcname: XsltRoot
StylesheetTree.py(80): class XsltRoot(XsltNode):
StylesheetTree.py(82):     content = ContentInfo.Alt(ContentInfo.QName(XSL_NAMESPACE, 'xsl:stylesheet'),
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
StylesheetTree.py(83):                               ContentInfo.QName(XSL_NAMESPACE, 'xsl:transform'),
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
StylesheetTree.py(84):                               ContentInfo.ResultElements)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(58):         self.args = []
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(63):         return
StylesheetTree.py(86):     validator = ContentInfo.Validator(content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(74):         return
ContentInfo.py(208):         return
StylesheetTree.py(88):     nodeName = u'#document'
StylesheetTree.py(90):     def __init__(self, baseUri):
StylesheetTree.py(134):     def appendChild(self, child):
StylesheetTree.py(141):     def __str__(self):
StylesheetTree.py(146): class XsltElement(XsltNode):
 --- modulename: StylesheetTree, funcname: XsltElement
StylesheetTree.py(146): class XsltElement(XsltNode):
StylesheetTree.py(148):     category = CategoryTypes.RESULT_ELEMENT
StylesheetTree.py(149):     content = ContentInfo.Template
StylesheetTree.py(150):     validator = ContentInfo.Validator(content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(74):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(208):         return
StylesheetTree.py(151):     legalAttrs = None # this means no error checking or defaulting
StylesheetTree.py(153):     def __init__(self, root, namespaceUri, localName, baseUri):
StylesheetTree.py(162):     def insertChild(self, index, child):
StylesheetTree.py(169):     def appendChild(self, child):
StylesheetTree.py(176):     def parseAVT(self, avt):
StylesheetTree.py(189):     def parseExpression(self, expression):
StylesheetTree.py(199):     def parsePattern(self, pattern):
StylesheetTree.py(209):     def splitQName(self, qname):
StylesheetTree.py(218):     def expandQName(self, qname, refNode=None):
StylesheetTree.py(235):     def instantiate(self, context, processor):
StylesheetTree.py(243):     def processChildren(self, context, processor):
StylesheetTree.py(251):     def __str__(self):
StylesheetTree.py(259): class XsltText(XsltNode):
 --- modulename: StylesheetTree, funcname: XsltText
StylesheetTree.py(259): class XsltText(XsltNode):
StylesheetTree.py(261):     nodeName = u'#text'
StylesheetTree.py(263):     def __init__(self, root, baseUri, data):
StylesheetTree.py(269):     def instantiate(self, context, processor):
StylesheetTree.py(273):     def __str__(self):
 --- modulename: Processor, funcname: ?
Processor.py(9): """
Processor.py(11): import os, sys, operator, cStringIO, warnings
Processor.py(12): from xml.dom import Node
Processor.py(15): import Exslt, BuiltInExtElements
 --- modulename: __init__, funcname: ?
__init__.py(1): import Common
 --- modulename: Common, funcname: ?
Common.py(9): """
Common.py(11): import os
Common.py(12): from xml.dom import Node
Common.py(13): from Ft.Lib import boolean, Uri
Common.py(14): from Ft.Xml.XPath import Conversions
Common.py(15): from Ft.Xml.Xslt import XsltElement, OutputParameters
 --- modulename: OutputParameters, funcname: ?
OutputParameters.py(10): """
OutputParameters.py(12): from Ft.Xml.Xslt.AttributeValueTemplate import AttributeValueTemplate
OutputParameters.py(14): class OutputParameters:
 --- modulename: OutputParameters, funcname: OutputParameters
OutputParameters.py(14): class OutputParameters:
OutputParameters.py(16):     def __init__(self):
OutputParameters.py(28):     def clone(self):
OutputParameters.py(33):     def setDefault(self, attr, value):
OutputParameters.py(41):     def avtParse(self, owner, context):
OutputParameters.py(75):     def parse(self, owner):
Common.py(16): from Ft.Xml.Xslt import ContentInfo, AttributeInfo
 --- modulename: AttributeInfo, funcname: ?
AttributeInfo.py(10): """
AttributeInfo.py(12): from Ft import TranslateMessage as _
AttributeInfo.py(14): import cStringIO, traceback
AttributeInfo.py(16): from Ft.Xml.XPath import Conversions
AttributeInfo.py(17): from Ft.Xml.XPath import RuntimeException as XPathRuntimeException
AttributeInfo.py(18): from Ft.Xml.XPath import parser
AttributeInfo.py(19): _xpath_parser = parser.new()
AttributeInfo.py(21): from Ft.Xml.Xslt import XsltException, XsltRuntimeException, Error
AttributeInfo.py(22): from Ft.Xml.Xslt import parser
AttributeInfo.py(23): _xpattern_parser = parser.new()
AttributeInfo.py(24): del parser
AttributeInfo.py(26): from Ft.Xml import XML_NAMESPACE, XMLNS_NAMESPACE, EMPTY_NAMESPACE
AttributeInfo.py(27): from Ft.Xml.Lib.XmlString import IsQName, SplitQName
AttributeInfo.py(29): from AttributeValueTemplate import AttributeValueTemplate
AttributeInfo.py(32): class AttributeInfo:
 --- modulename: AttributeInfo, funcname: AttributeInfo
AttributeInfo.py(32): class AttributeInfo:
AttributeInfo.py(34):     display = 'unknown'
AttributeInfo.py(36):     def __init__(self, required=0, default=None, description=''):
AttributeInfo.py(42):     def __str__(self):
AttributeInfo.py(45):     def prepare(self, element, value):
AttributeInfo.py(49):     reprocess = prepare
AttributeInfo.py(51):     def validate(self, validation):
AttributeInfo.py(55): class _ConstantValue:
 --- modulename: AttributeInfo, funcname: _ConstantValue
AttributeInfo.py(55): class _ConstantValue:
AttributeInfo.py(56):     def __init__(self, value):
AttributeInfo.py(59):     def isConstant(self):
AttributeInfo.py(62):     def evaluate(self, context):
AttributeInfo.py(65):     def __repr__(self):
AttributeInfo.py(68):     def __nonzero__(self):
AttributeInfo.py(72): class Choice(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Choice
AttributeInfo.py(72): class Choice(AttributeInfo):
AttributeInfo.py(74):     def __init__(self, values, required=0, default=None, description=''):
AttributeInfo.py(79):     def prepare(self, element, value):
AttributeInfo.py(94):     reprocess = prepare
AttributeInfo.py(96):     def __str__(self):
AttributeInfo.py(100): class Avt:
 --- modulename: AttributeInfo, funcname: Avt
AttributeInfo.py(100): class Avt:
AttributeInfo.py(102):     def __str__(self):
AttributeInfo.py(105):     def prepare(self, element, value):
AttributeInfo.py(123): class ChoiceAvt(Avt, Choice):
 --- modulename: AttributeInfo, funcname: ChoiceAvt
AttributeInfo.py(123): class ChoiceAvt(Avt, Choice):
AttributeInfo.py(125):     def __str__(self):
AttributeInfo.py(129): class AnyAvt(Avt, AttributeInfo):
 --- modulename: AttributeInfo, funcname: AnyAvt
AttributeInfo.py(129): class AnyAvt(Avt, AttributeInfo):
AttributeInfo.py(130):     display = _('any avt')
AttributeInfo.py(133): class String(AttributeInfo):
 --- modulename: AttributeInfo, funcname: String
AttributeInfo.py(133): class String(AttributeInfo):
AttributeInfo.py(134):     display = _('string')
AttributeInfo.py(137): class StringAvt(Avt, String):
 --- modulename: AttributeInfo, funcname: StringAvt
AttributeInfo.py(137): class StringAvt(Avt, String):
AttributeInfo.py(138):     pass
AttributeInfo.py(141): class Char(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Char
AttributeInfo.py(141): class Char(AttributeInfo):
AttributeInfo.py(145):     display = _('char')
AttributeInfo.py(147):     def prepare(self, element, value):
AttributeInfo.py(153):     reprocess = prepare
AttributeInfo.py(156): class CharAvt(Avt, Char):
 --- modulename: AttributeInfo, funcname: CharAvt
AttributeInfo.py(156): class CharAvt(Avt, Char):
AttributeInfo.py(157):     pass
AttributeInfo.py(160): class Number(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Number
AttributeInfo.py(160): class Number(AttributeInfo):
AttributeInfo.py(161):     display = _('number')
AttributeInfo.py(163):     def prepare(self, element, value):
AttributeInfo.py(170):     reprocess = prepare
AttributeInfo.py(173): class NumberAvt(Avt, Number):
 --- modulename: AttributeInfo, funcname: NumberAvt
AttributeInfo.py(173): class NumberAvt(Avt, Number):
AttributeInfo.py(174):     reprocess = Number.prepare
AttributeInfo.py(177): class UriReference(AttributeInfo):
 --- modulename: AttributeInfo, funcname: UriReference
AttributeInfo.py(177): class UriReference(AttributeInfo):
AttributeInfo.py(178):     display = _('uri-reference')
AttributeInfo.py(180):     def __init__(self, required=0, default=None, description='', isNsName=0):
AttributeInfo.py(184):     def prepare(self, element, value):
AttributeInfo.py(191):     reprocess = prepare
AttributeInfo.py(194): class UriReferenceAvt(Avt, UriReference):
 --- modulename: AttributeInfo, funcname: UriReferenceAvt
AttributeInfo.py(194): class UriReferenceAvt(Avt, UriReference):
AttributeInfo.py(195):     pass
AttributeInfo.py(198): class Id(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Id
AttributeInfo.py(198): class Id(AttributeInfo):
AttributeInfo.py(199):     display = _('id')
AttributeInfo.py(201):     def prepare(self, element, value):
AttributeInfo.py(207):     reprocess = prepare
AttributeInfo.py(210): class IdAvt(Avt, Id):
 --- modulename: AttributeInfo, funcname: IdAvt
AttributeInfo.py(210): class IdAvt(Avt, Id):
AttributeInfo.py(211):     pass
AttributeInfo.py(214): class QName(AttributeInfo):
 --- modulename: AttributeInfo, funcname: QName
AttributeInfo.py(214): class QName(AttributeInfo):
AttributeInfo.py(215):     display = _('qname')
AttributeInfo.py(217):     def prepare(self, element, value):
AttributeInfo.py(235):     reprocess = prepare
AttributeInfo.py(238): class QNameAvt(Avt, QName):
 --- modulename: AttributeInfo, funcname: QNameAvt
AttributeInfo.py(238): class QNameAvt(Avt, QName):
AttributeInfo.py(239):     pass
AttributeInfo.py(242): class RawQName(QName):
 --- modulename: AttributeInfo, funcname: RawQName
AttributeInfo.py(242): class RawQName(QName):
AttributeInfo.py(244):     def prepare(self, element, value):
AttributeInfo.py(252):     reprocess = prepare
AttributeInfo.py(255): class RawQNameAvt(Avt, RawQName):
 --- modulename: AttributeInfo, funcname: RawQNameAvt
AttributeInfo.py(255): class RawQNameAvt(Avt, RawQName):
AttributeInfo.py(256):     pass
AttributeInfo.py(259): class NCName(AttributeInfo):
 --- modulename: AttributeInfo, funcname: NCName
AttributeInfo.py(259): class NCName(AttributeInfo):
AttributeInfo.py(260):     display = _('ncname')
AttributeInfo.py(262):     def prepare(self, element, value):
AttributeInfo.py(270):     reprocess = prepare
AttributeInfo.py(273): class NCNameAvt(Avt, NCName):
 --- modulename: AttributeInfo, funcname: NCNameAvt
AttributeInfo.py(273): class NCNameAvt(Avt, NCName):
AttributeInfo.py(274):     pass
AttributeInfo.py(277): class Prefix(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Prefix
AttributeInfo.py(277): class Prefix(AttributeInfo):
AttributeInfo.py(278):     display = _('prefix')
AttributeInfo.py(280):     def prepare(self, element, value):
AttributeInfo.py(290):     reprocess = prepare
AttributeInfo.py(293): class PrefixAvt(Avt, Prefix):
 --- modulename: AttributeInfo, funcname: PrefixAvt
AttributeInfo.py(293): class PrefixAvt(Avt, Prefix):
AttributeInfo.py(294):     pass
AttributeInfo.py(297): class NMToken(AttributeInfo):
 --- modulename: AttributeInfo, funcname: NMToken
AttributeInfo.py(297): class NMToken(AttributeInfo):
AttributeInfo.py(298):     display = _('nmtoken')
AttributeInfo.py(300):     def prepare(self, element, value):
AttributeInfo.py(306):     reprocess = prepare
AttributeInfo.py(309): class NMTokenAvt(Avt, NMToken):
 --- modulename: AttributeInfo, funcname: NMTokenAvt
AttributeInfo.py(309): class NMTokenAvt(Avt, NMToken):
AttributeInfo.py(310):     pass
AttributeInfo.py(313): class QNameButNotNCName(AttributeInfo):
 --- modulename: AttributeInfo, funcname: QNameButNotNCName
AttributeInfo.py(313): class QNameButNotNCName(AttributeInfo):
AttributeInfo.py(314):     display = _('qname-but-not-ncname')
AttributeInfo.py(316):     def prepare(self, element, value):
AttributeInfo.py(335):     reprocess = prepare
AttributeInfo.py(338): class Token(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Token
AttributeInfo.py(338): class Token(AttributeInfo):
AttributeInfo.py(342):     display = _('token')
AttributeInfo.py(344):     def prepare(self, element, value):
AttributeInfo.py(361):     reprocess = prepare
AttributeInfo.py(364): class TokenAvt(Avt, Token):
 --- modulename: AttributeInfo, funcname: TokenAvt
AttributeInfo.py(364): class TokenAvt(Avt, Token):
AttributeInfo.py(365):     pass
AttributeInfo.py(368): class ExpressionWrapper:
 --- modulename: AttributeInfo, funcname: ExpressionWrapper
AttributeInfo.py(368): class ExpressionWrapper:
AttributeInfo.py(370):     def __init__(self, expression, element, original):
AttributeInfo.py(376):     def __nonzero__(self):
AttributeInfo.py(381):     def __getattr__(self, attr):
AttributeInfo.py(387):     def __getstate__(self):
AttributeInfo.py(390):     def __setstate__(self, state):
AttributeInfo.py(394):     def evaluate(self,context):
AttributeInfo.py(423): class Expression(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Expression
AttributeInfo.py(423): class Expression(AttributeInfo):
AttributeInfo.py(427):     display = _('expression')
AttributeInfo.py(429):     def prepare(self, element, value):
AttributeInfo.py(442): class NodeSetExpression(Expression):
 --- modulename: AttributeInfo, funcname: NodeSetExpression
AttributeInfo.py(442): class NodeSetExpression(Expression):
AttributeInfo.py(443):     display = _('node-set-expression')
AttributeInfo.py(445): class StringExpression(Expression):
 --- modulename: AttributeInfo, funcname: StringExpression
AttributeInfo.py(445): class StringExpression(Expression):
AttributeInfo.py(446):     display = _('string-expression')
AttributeInfo.py(448): class NumberExpression(Expression):
 --- modulename: AttributeInfo, funcname: NumberExpression
AttributeInfo.py(448): class NumberExpression(Expression):
AttributeInfo.py(449):     display = _('number-expression')
AttributeInfo.py(451): class BooleanExpression(Expression):
 --- modulename: AttributeInfo, funcname: BooleanExpression
AttributeInfo.py(451): class BooleanExpression(Expression):
AttributeInfo.py(452):     display = _('boolean-expression')
AttributeInfo.py(455): class Pattern(AttributeInfo):
 --- modulename: AttributeInfo, funcname: Pattern
AttributeInfo.py(455): class Pattern(AttributeInfo):
AttributeInfo.py(459):     display = _('pattern')
AttributeInfo.py(461):     def prepare(self, element, value):
AttributeInfo.py(474): class Tokens(Token):
 --- modulename: AttributeInfo, funcname: Tokens
AttributeInfo.py(474): class Tokens(Token):
AttributeInfo.py(478):     display = _('tokens')
AttributeInfo.py(480):     def prepare(self, element, value):
AttributeInfo.py(488):     reprocess = prepare
AttributeInfo.py(490): class TokensAvt(Avt, Tokens):
 --- modulename: AttributeInfo, funcname: TokensAvt
AttributeInfo.py(490): class TokensAvt(Avt, Tokens):
AttributeInfo.py(491):     pass
AttributeInfo.py(494): class QNames(QName):
 --- modulename: AttributeInfo, funcname: QNames
AttributeInfo.py(494): class QNames(QName):
AttributeInfo.py(498):     display = _('qnames')
AttributeInfo.py(500):     def prepare(self, element, value):
AttributeInfo.py(508):     reprocess = prepare
AttributeInfo.py(510): class QNamesAvt(Avt, QNames):
 --- modulename: AttributeInfo, funcname: QNamesAvt
AttributeInfo.py(510): class QNamesAvt(Avt, QNames):
AttributeInfo.py(511):     pass
AttributeInfo.py(514): class Prefixes(Prefix):
 --- modulename: AttributeInfo, funcname: Prefixes
AttributeInfo.py(514): class Prefixes(Prefix):
AttributeInfo.py(518):     display = _('prefixes')
AttributeInfo.py(520):     def prepare(self, element, value):
AttributeInfo.py(528):     reprocess = prepare
AttributeInfo.py(530): class PrefixesAvt(Avt, Prefixes):
 --- modulename: AttributeInfo, funcname: PrefixesAvt
AttributeInfo.py(530): class PrefixesAvt(Avt, Prefixes):
AttributeInfo.py(531):     pass
AttributeInfo.py(534): class YesNo(AttributeInfo):
 --- modulename: AttributeInfo, funcname: YesNo
AttributeInfo.py(534): class YesNo(AttributeInfo):
AttributeInfo.py(536):     display = '"yes" | "no"'
AttributeInfo.py(538):     def prepare(self, element, value):
AttributeInfo.py(544):     reprocess = prepare
AttributeInfo.py(546): class YesNoAvt(Avt, YesNo):
 --- modulename: AttributeInfo, funcname: YesNoAvt
AttributeInfo.py(546): class YesNoAvt(Avt, YesNo):
AttributeInfo.py(547):     pass
Common.py(17): from Ft.Xml.Xslt import XsltRuntimeException, Error
Common.py(18): from Ft.Xml.Xslt.Exslt.MessageSource import Error as ExsltError
 --- modulename: MessageSource, funcname: ?
MessageSource.py(1): from Ft import TranslateMessage as _
MessageSource.py(4): from Ft.Xml.Xslt.MessageSource import g_errorMessages
MessageSource.py(6): class Error:
 --- modulename: MessageSource, funcname: Error
MessageSource.py(6): class Error:
MessageSource.py(8):     UNSUPPORTED_DOCUMENT_URI_SCHEME = 3000
MessageSource.py(10):     ILLEGAL_DURATION_FORMAT = 3100
MessageSource.py(12):     RESULT_NOT_IN_FUNCTION = 3200
MessageSource.py(13):     ILLEGAL_RESULT_SIBLINGS = 3201
MessageSource.py(16): g_exsltErrorMessages = {
MessageSource.py(23): g_errorMessages.update(g_exsltErrorMessages)
Common.py(20): EXSL_COMMON_NS = "http://exslt.org/common"
Common.py(22): def NodeSet(context, obj):
Common.py(44): def ObjectType(context, obj):
Common.py(64): class DocumentElement(XsltElement):
 --- modulename: Common, funcname: DocumentElement
Common.py(64): class DocumentElement(XsltElement):
Common.py(70):     content = ContentInfo.Template
Common.py(71):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(181):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(182):         self._isNsName = isNsName
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
Common.py(85):     def __init__(self, root, namespaceUri, localName, baseUri):
Common.py(90):     def instantiate(self, context, processor):
Common.py(124): ExtNamespaces = {
Common.py(128): ExtFunctions = {
Common.py(133): ExtElements = {
__init__.py(2): import DateTime
 --- modulename: DateTime, funcname: ?
DateTime.py(9): """
DateTime.py(11): import re, calendar
DateTime.py(12): from math import ceil
DateTime.py(13): from xml.dom import Node
DateTime.py(14): from Ft.Lib import boolean, number
DateTime.py(15): from Ft.Xml.Xslt.Exslt.MessageSource import Error as ExsltError
DateTime.py(16): from Ft.Xml.Xslt import XsltElement, XsltRuntimeException
DateTime.py(17): from Ft.Xml.XPath import Conversions
DateTime.py(18): from Ft.Lib import Time as FtTime
 --- modulename: Time, funcname: ?
Time.py(12): """
Time.py(14): import re, time, calendar, rfc822
Time.py(16): _month_days = (
Time.py(21): def DayOfYearFromYMD(year, month, day):
Time.py(33): def WeekdayFromYMD(year, month, day):
Time.py(76): class DT:
 --- modulename: Time, funcname: DT
Time.py(76): class DT:
Time.py(90):     def __init__(self,
Time.py(181):     def asISO8601DateTime(self, local=0):
Time.py(190):     def asISO8601Date(self, local=0):
Time.py(208):     def asISO8601Time(self, local=0):
Time.py(246):     def asRFC822DateTime(self, local=0):
Time.py(290):     def asPythonTime(self, local=0):
Time.py(297):     def asPythonTimeTuple(self, local=0):
Time.py(326):     def year(self, local=0):
Time.py(334):     def month(self, local=0):
Time.py(342):     def monthName(self, local=0):
Time.py(351):     def abbreviatedMonthName(self, local=0):
Time.py(360):     def day(self, local=0):
Time.py(368):     def dayOfYear(self, local=0):
Time.py(376):     def dayOfWeek(self, local=0):
Time.py(384):     def hour(self, local=0):
Time.py(392):     def minute(self, local=0):
Time.py(400):     def second(self):
Time.py(407):     def milliSecond(self):
Time.py(414):     def tzName(self):
Time.py(421):     def tzHourOffset(self):
Time.py(428):     def tzMinuteOffset(self):
Time.py(435):     def __normalizeMinute(self, minute):
Time.py(445):     def __normalizeHour(self, hour):
Time.py(455):     def __normalizeDate(self, day, month, year):
Time.py(488):     __str__ = asISO8601DateTime
Time.py(490):     def __cmp__(self, other):
Time.py(501):     def __hash__(self):
Time.py(505):     abbreviatedMonthNameTable = ('ERR', 'Jan', 'Feb', 'Mar', 'Apr', 'May',
Time.py(509):     monthNameTable = ('ERROR', 'January', 'February', 'March', 'April',
Time.py(513):     weekdayNameTable = ('Monday', 'Tuesday', 'Wednesday', 'Thursday',
Time.py(516):     abbreviatedWeekdayNameTable = ('Mon', 'Tue', 'Wed', 'Thu',
Time.py(522):     tzNameTable = {
Time.py(562): CENTURY="(?P<Century>[0-9]{2,2})"
Time.py(563): YEAR="(?P<Year>[0-9]{2,2})"
Time.py(564): MONTH="(?P<Month>[0-9]{2,2})"
Time.py(565): DAY="(?P<Day>[0-9]{2,2})"
Time.py(566): BASIC_DATE="%s?%s%s%s" % (CENTURY, YEAR, MONTH, DAY)
Time.py(567): EXTENDED_DATE="%s?%s-%s-%s" % (CENTURY, YEAR, MONTH, DAY)
Time.py(568): YEAR_AND_MONTH_DATE="(-|%s)%s-%s" % (CENTURY, YEAR, MONTH)
Time.py(569): YEAR_AND_MONTH_DATE_EXTENDED="-%s%s" % (YEAR, MONTH)
Time.py(570): YEAR_ONLY_DATE="(-|%s)%s" % (CENTURY, YEAR)
Time.py(571): CENTURY_ONLY_DATE=CENTURY
Time.py(572): DAY_OF_MONTH="--%s(?:-?%s)?" % (MONTH, DAY)
Time.py(573): DAY_ONLY_DATE="---%s" % (DAY)
Time.py(576): cd_expressions = [BASIC_DATE,
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(584): cd_expressions = map(lambda x:"(?P<CalendarDate>%s)" % x, cd_expressions)
Time.py(586): ORDINAL_DAY="(?P<Ordinal>[0-9]{3,3})"
Time.py(587): ORDINAL_DATE="(?P<OrdinalDate>%s?%s-?%s)" % (CENTURY, YEAR, ORDINAL_DAY)
Time.py(588): ORDINAL_DATE_ONLY="(?P<OrdinalDate>-%s)" % (ORDINAL_DAY)
Time.py(589): od_expressions = [ORDINAL_DATE, ORDINAL_DATE_ONLY]
Time.py(591): WEEK="(?P<Week>[0-9][0-9])"
Time.py(592): WEEK_DAY="(?P<Weekday>[1-7])"
Time.py(593): BASIC_WEEK_DATE="%s?%sW%s%s?" %(CENTURY, YEAR, WEEK, WEEK_DAY)
Time.py(594): EXTENDED_WEEK_DATE="%s?%s-W%s(?:-%s)?" %(CENTURY, YEAR, WEEK, WEEK_DAY)
Time.py(595): WEEK_IN_DECADE="-(?P<YearInDecade>[0-9])W%s%s" % (WEEK, WEEK_DAY)
Time.py(596): WEEK_IN_DECADE_EXTENDED="-(?P<YearInDecade>[0-9])-W%s-%s" % (WEEK, WEEK_DAY)
Time.py(597): WEEK_AND_DAY_BASIC="-W%s(?:-?%s)?"%(WEEK, WEEK_DAY)
Time.py(598): WEEKDAY_ONLY="-W?-%s" % (WEEK_DAY)
Time.py(601): wd_expressions=[BASIC_WEEK_DATE,
Time.py(607): wd_expressions = map(lambda x:"(?P<WeekDate>%s)" % x, wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(607): wd_expressions = map(lambda x:"(?P<WeekDate>%s)" % x, wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(607): wd_expressions = map(lambda x:"(?P<WeekDate>%s)" % x, wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(607): wd_expressions = map(lambda x:"(?P<WeekDate>%s)" % x, wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(607): wd_expressions = map(lambda x:"(?P<WeekDate>%s)" % x, wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(607): wd_expressions = map(lambda x:"(?P<WeekDate>%s)" % x, wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(607): wd_expressions = map(lambda x:"(?P<WeekDate>%s)" % x, wd_expressions)
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(610): date_expressions = map(lambda x:"(?P<Date>%s)" % x, cd_expressions+od_expressions+wd_expressions)
Time.py(612): HOUR="(?P<Hour>(?:0[0-9])|(?:1[0-9])|(?:2[0-4]))"
Time.py(613): MINUTE="(?P<Minute>(?:[0-5][0-9])|(?:60))"
Time.py(614): SECOND="(?P<Second>(?:[0-5][0-9])|(?:60))"
Time.py(615): DECIMAL_SEPARATOR="(?:\.|,)"
Time.py(616): DECIMAL_VALUE="(?P<DecimalValue>[0-9]*)"
Time.py(618): BASIC_TIME_FORMAT="(?:%s%s%s(?:%s%s)?)" % (HOUR, MINUTE, SECOND, DECIMAL_SEPARATOR, DECIMAL_VALUE)
Time.py(619): EXTENDED_TIME_FORMAT="(?:%s:%s:%s(?:%s%s)?)" % (HOUR, MINUTE, SECOND, DECIMAL_SEPARATOR, DECIMAL_VALUE)
Time.py(621): HOUR_MINUTE_TIME="(?:%s:?%s(?:%s%s)?)" % (HOUR, MINUTE, DECIMAL_SEPARATOR, DECIMAL_VALUE)
Time.py(622): HOUR_TIME="(?:%s(?:%s%s)?)" % (HOUR, DECIMAL_SEPARATOR, DECIMAL_VALUE)
Time.py(623): MINUTE_SECOND_TIME="(?:-%s:?%s(?:%s%s)?)" % (MINUTE, SECOND, DECIMAL_SEPARATOR, DECIMAL_VALUE)
Time.py(624): MINUTE_TIME="(?:-%s(?:%s%s)?)" % (MINUTE, DECIMAL_SEPARATOR, DECIMAL_VALUE)
Time.py(625): SECOND_TIME="(?P<CurrentSecond>--%s(?:%s%s)?)" % (SECOND, DECIMAL_SEPARATOR, DECIMAL_VALUE)
Time.py(628): bt_expressions = [BASIC_TIME_FORMAT,
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(635): bt_expressions = map(lambda x:"(?P<Time>%s)"%x, bt_expressions)
Time.py(637): UTC_TIME_ZONE="Z"
Time.py(638): TZ_DIRECTION="(?P<TzDirection>\+|-)"
Time.py(639): TZ_HOUR="(?P<TzHour>(?:0[0-9])|(?:1[0-9])|(?:2[0-4]))"
Time.py(640): TZ_MINUTE="(?P<TzMinute>(?:[0-5][0-9])|(?:60))"
Time.py(641): BASIC_TIME_ZONE="(?P<TzOffset>%s%s(?::?%s)?)" % (TZ_DIRECTION, TZ_HOUR, TZ_MINUTE)
Time.py(642): TIME_ZONE="(?P<TimeZone>%s|%s)" % (UTC_TIME_ZONE,
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
 --- modulename: Time, funcname: <lambda>
Time.py(646): tz_expressions=map(lambda x, t=TIME_ZONE: "%s%s?" % (x, t), bt_expressions)
Time.py(649): g_isoExpressions = []
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(652):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(651): for e in date_expressions:
Time.py(655): for e in tz_expressions:
Time.py(656):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(655): for e in tz_expressions:
Time.py(656):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(655): for e in tz_expressions:
Time.py(656):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(655): for e in tz_expressions:
Time.py(656):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(655): for e in tz_expressions:
Time.py(656):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(655): for e in tz_expressions:
Time.py(656):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(655): for e in tz_expressions:
Time.py(656):     g_isoExpressions.append(["^"+e+"$", None])
Time.py(655): for e in tz_expressions:
Time.py(657): for e in tz_expressions:
Time.py(658):     g_isoExpressions.append(["^T"+e+"$", None])
Time.py(657): for e in tz_expressions:
Time.py(658):     g_isoExpressions.append(["^T"+e+"$", None])
Time.py(657): for e in tz_expressions:
Time.py(658):     g_isoExpressions.append(["^T"+e+"$", None])
Time.py(657): for e in tz_expressions:
Time.py(658):     g_isoExpressions.append(["^T"+e+"$", None])
Time.py(657): for e in tz_expressions:
Time.py(658):     g_isoExpressions.append(["^T"+e+"$", None])
Time.py(657): for e in tz_expressions:
Time.py(658):     g_isoExpressions.append(["^T"+e+"$", None])
Time.py(657): for e in tz_expressions:
Time.py(658):     g_isoExpressions.append(["^T"+e+"$", None])
Time.py(657): for e in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(663):         g_isoExpressions.append(["^"+d+"T"+t+"$", None])
Time.py(662):     for t in tz_expressions:
Time.py(661): for d in date_expressions:
Time.py(666): del BASIC_DATE, BASIC_TIME_FORMAT, BASIC_TIME_ZONE, BASIC_WEEK_DATE
Time.py(667): del CENTURY, CENTURY_ONLY_DATE
Time.py(668): del DAY, DAY_OF_MONTH, DAY_ONLY_DATE, DECIMAL_SEPARATOR, DECIMAL_VALUE
Time.py(669): del EXTENDED_DATE, EXTENDED_TIME_FORMAT, EXTENDED_WEEK_DATE
Time.py(670): del HOUR, HOUR_MINUTE_TIME, HOUR_TIME
Time.py(671): del MINUTE, MINUTE_SECOND_TIME, MINUTE_TIME, MONTH
Time.py(672): del ORDINAL_DATE, ORDINAL_DATE_ONLY, ORDINAL_DAY
Time.py(673): del SECOND, SECOND_TIME
Time.py(674): del TIME_ZONE, TZ_DIRECTION, TZ_HOUR
Time.py(675): del TZ_MINUTE, UTC_TIME_ZONE,
Time.py(676): del WEEK, WEEKDAY_ONLY, WEEK_AND_DAY_BASIC, WEEK_DAY, WEEK_IN_DECADE, WEEK_IN_DECADE_EXTENDED
Time.py(677): del YEAR, YEAR_AND_MONTH_DATE, YEAR_AND_MONTH_DATE_EXTENDED, YEAR_ONLY_DATE,
Time.py(678): del bt_expressions, cd_expressions, d, date_expressions, e, od_expressions, t, tz_expressions, wd_expressions
Time.py(680): def FromISO8601(st):
Time.py(865): def FromRFC822(st):
Time.py(908): def FromPythonTime(t=None):
Time.py(920): def FromPythonTimeTuple(t):
Time.py(954): def isDST(t):
DateTime.py(20): EXSL_DATE_TIME_NS = 'http://exslt.org/dates-and-times'
DateTime.py(21): ISO_8601_DATETIME = '%Y-%m-%dT%H:%M:%S'
DateTime.py(22): ISO_8601_DATE = '%Y-%m-%d'
DateTime.py(23): ISO_8601_TIME = '%H:%M:%S'
DateTime.py(54): def DateTime(context):
DateTime.py(62): def Date(context, dateTime=None):
DateTime.py(92): def Time(context, dateTime=None):
DateTime.py(120): def Year(context, dateTime=None):
DateTime.py(129): def LeapYear(context, dateTime=None):
DateTime.py(140): def MonthInYear(context,dateTime=None):
DateTime.py(149): def MonthName(context,dateTime=None):
DateTime.py(158): def MonthAbbreviation(context, dateTime=None):
DateTime.py(167): def WeekInYear(context, dateTime=None):
DateTime.py(176): def DayInYear(context, dateTime=None):
DateTime.py(185): def DayInMonth(context, dateTime=None):
DateTime.py(194): def DayOfWeekInMonth(context, dateTime=None):
DateTime.py(204): def DayInWeek(context, dateTime=None):
DateTime.py(215): def DayName(context, dateTime=None):
DateTime.py(228): def DayAbbreviation(context, dateTime=None):
DateTime.py(237): def HourInDay(context, dateTime=None):
DateTime.py(246): def MinuteInHour(context, dateTime=None):
DateTime.py(255): def SecondInMinute(context, dateTime=None):
DateTime.py(266): class DateFormatElement(XsltElement):
 --- modulename: DateTime, funcname: DateFormatElement
DateTime.py(266): class DateFormatElement(XsltElement):
DateTime.py(267):     pass
DateTime.py(272): def FormatDate(context, dateTime, pattern):
DateTime.py(277): def ParseDate(context, dateString, pattern):
DateTime.py(282): def WeekInMonth(context, dateTime=None):
DateTime.py(287): def Difference(context, dateTime1, dateTime2):
DateTime.py(439): import re
DateTime.py(440): durationRE = re.compile('(-)?P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+(?:\.\d+)?S)?)?$')
DateTime.py(442): def Add(context, dateTime, duration):
DateTime.py(514): def AddDuration(context, duration1, duration2):
DateTime.py(519): def Sum(context, nodeset):
DateTime.py(524): def Seconds(context, dateOrDuration):
DateTime.py(531): def SecondsFromDuration(duration):
DateTime.py(545): def SecondsFromDate(context, date):
DateTime.py(550): def Duration(context, seconds):
DateTime.py(556): def _coerce(dateTime):
DateTime.py(570): def _moLen(year, month):
DateTime.py(582): def _strptime(time, format):
DateTime.py(595): def _strptimePython(time, format):
DateTime.py(599): def _strptimeJava(time, format):
DateTime.py(604): def _strptimePython(timestr, format):
DateTime.py(657): import time
DateTime.py(658): if hasattr(time,'strptime'):
DateTime.py(659):     _strptimePython = time.strptime
DateTime.py(661): def _strptimeJava(time, format):
DateTime.py(667): ExtNamespaces = {
DateTime.py(671): ExtElements = {
DateTime.py(675): ExtFunctions = {
__init__.py(3): import Dynamic
 --- modulename: Dynamic, funcname: ?
Dynamic.py(7): """
Dynamic.py(9): from Ft.Xml.XPath import parser
Dynamic.py(10): from Ft.Xml.XPath import Conversions
Dynamic.py(11): from Ft.Xml.Xslt import XsltRuntimeException, Error
Dynamic.py(12): from Ft.Xml.Xslt.CopyOfElement import CopyNode
 --- modulename: CopyOfElement, funcname: ?
CopyOfElement.py(13): """
CopyOfElement.py(15): from xml.dom import Node
CopyOfElement.py(16): from Ft.Xml import EMPTY_NAMESPACE, XMLNS_NAMESPACE
CopyOfElement.py(17): from Ft.Xml.Xslt import XsltElement, XsltException, Error, XSL_NAMESPACE
CopyOfElement.py(18): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
CopyOfElement.py(19): from Ft.Xml.XPath import Conversions, NAMESPACE_NODE
CopyOfElement.py(22): class CopyOfElement(XsltElement):
 --- modulename: CopyOfElement, funcname: CopyOfElement
CopyOfElement.py(22): class CopyOfElement(XsltElement):
CopyOfElement.py(24):     category = CategoryTypes.INSTRUCTION
CopyOfElement.py(25):     content = ContentInfo.Empty
CopyOfElement.py(26):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
CopyOfElement.py(30):     def instantiate(self, context, processor):
CopyOfElement.py(49): def CopyNode(processor, node):
CopyOfElement.py(58): from Ft.Xml.Domlette import GetAllNs
CopyOfElement.py(60): def OldCopyNode(processor, node):
Dynamic.py(14): EXSL_DYNAMIC_NS = "http://exslt.org/dynamic"
Dynamic.py(16): def Closure(context, nodeset, string):
Dynamic.py(31): def Evaluate(context, string):
Dynamic.py(48): def Map(context, nodeset, string):
Dynamic.py(62): def Max(context, nodeset, string):
Dynamic.py(76): def Min(context, nodeset, string):
Dynamic.py(90): def Sum(context, nodeset, string):
Dynamic.py(104): ExtNamespaces = {
Dynamic.py(108): ExtFunctions = {
Dynamic.py(117): ExtElements = {}
__init__.py(4): import Functions
 --- modulename: Functions, funcname: ?
Functions.py(7): """
Functions.py(9): from Ft.Xml import XPath
Functions.py(10): from Ft.Xml.Xslt import XSL_NAMESPACE, XsltElement
Functions.py(11): from Ft.Xml.Xslt import XsltRuntimeException
Functions.py(12): from Ft.Xml.Xslt import ContentInfo, AttributeInfo
Functions.py(13): from Ft.Xml.Xslt.Exslt.MessageSource import Error as ExsltError
Functions.py(14): from Ft.Xml.Xslt.XPathExtensions import RtfExpr
 --- modulename: XPathExtensions, funcname: ?
XPathExtensions.py(1): class RtfExpr:
 --- modulename: XPathExtensions, funcname: RtfExpr
XPathExtensions.py(1): class RtfExpr:
XPathExtensions.py(2):     def __init__(self, nodes):
XPathExtensions.py(5):     def evaluate(self, context):
XPathExtensions.py(20):     def pprint(self, indent=''):
XPathExtensions.py(23):     def __str__(self):
XPathExtensions.py(27): class SortedExpression:
 --- modulename: XPathExtensions, funcname: SortedExpression
XPathExtensions.py(27): class SortedExpression:
XPathExtensions.py(28):     def __init__(self, expression, sortKeys):
XPathExtensions.py(33):     def __str__(self):
XPathExtensions.py(36):     def compare(self, (node1, keys1), (node2, keys2)):
XPathExtensions.py(45):     def evaluate(self, context):
Functions.py(16): EXSL_FUNCTIONS_NS = 'http://exslt.org/functions'
Functions.py(18): class FunctionElement(XsltElement):
 --- modulename: Functions, funcname: FunctionElement
Functions.py(18): class FunctionElement(XsltElement):
Functions.py(20):     content = ContentInfo.Seq(
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
Functions.py(22):         ContentInfo.Template,
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(28):         self.args = []
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(33):         return
Functions.py(24):     validator = ContentInfo.Validator(content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(42):         s1 = initial
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(44):             s2 = {}
ContentInfo.py(45):             arg.buildValidator(validator, s1, s2)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(46):             s1 = s2
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(47):         self.args[-1].buildValidator(validator, s1, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(74):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(48):         return
ContentInfo.py(208):         return
Functions.py(26):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
Functions.py(30):     doesPrime = 1
Functions.py(32):     def prime(self, processor, context):
Functions.py(36):     def __call__(self, context, *args):
Functions.py(69): class ResultElement(XsltElement):
 --- modulename: Functions, funcname: ResultElement
Functions.py(69): class ResultElement(XsltElement):
Functions.py(76):     content = ContentInfo.Template
Functions.py(77):     validator = ContentInfo.Validator(content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(74):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(208):         return
Functions.py(78):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
Functions.py(82):     doesSetup = doesPrime = 1
Functions.py(84):     def setup(self):
Functions.py(89):     def prime(self, processor, context):
Functions.py(110):     def instantiate(self, context, processor):
Functions.py(117): class ScriptElement(XsltElement):
 --- modulename: Functions, funcname: ScriptElement
Functions.py(117): class ScriptElement(XsltElement):
Functions.py(123):     """
Functions.py(127): ExtNamespaces = {
Functions.py(131): ExtFunctions = {}
Functions.py(133): ExtElements = {
__init__.py(5): import Math_
 --- modulename: Math_, funcname: ?
Math_.py(9): """
Math_.py(11): import math
Math_.py(12): from Ft.Lib import number
Math_.py(13): from Ft.Lib.Random import Random
Math_.py(14): from Ft.Xml.XPath import Conversions
Math_.py(15): from Ft.Xml.Xslt import XsltRuntimeException, Error
Math_.py(17): EXSL_MATH_NS = "http://exslt.org/math"
Math_.py(19): CONSTANTS = {
Math_.py(31): def _max(numbers):
Math_.py(38): def _min(numbers):
Math_.py(47): def Abs(context, num):
Math_.py(54): def ACos(context, num):
Math_.py(61): def ASin(context, num):
Math_.py(67): def ATan(context, num):
Math_.py(73): def ATan2(context, y, x):
Math_.py(80): def Constant(context, name, precision):
Math_.py(91): def Cos(context, num):
Math_.py(97): def Exp(context, num):
Math_.py(104): def Highest(context, nodeset):
Math_.py(127): def Log(context, num):
Math_.py(133): def Lowest(context, nodeset):
Math_.py(156): def Max(context, nodeset):
Math_.py(167): def Min(context, nodeset):
Math_.py(178): def Power(context, base, exponent):
Math_.py(185): def Random(context):
Math_.py(191): def Sin(context, num):
Math_.py(197): def Sqrt(context, num):
Math_.py(203): def Tan(context, num):
Math_.py(210): ExtNamespaces = {
Math_.py(214): ExtFunctions = {
Math_.py(235): ExtElements = {}
__init__.py(6): import RegularExpressions
 --- modulename: RegularExpressions, funcname: ?
RegularExpressions.py(7): """
RegularExpressions.py(9): import re
RegularExpressions.py(10): from Ft.Lib import boolean
RegularExpressions.py(11): from Ft.Xml.XPath import Conversions
RegularExpressions.py(13): EXSL_REGEXP_NS = "http://exslt.org/regular-expressions"
RegularExpressions.py(15): def Match(context, source, pattern, flags=''):
RegularExpressions.py(74): def Replace(context, source, pattern, flags, repl):
RegularExpressions.py(104): def Test(context, source, pattern, flags=''):
RegularExpressions.py(126): ExtNamespaces = {
RegularExpressions.py(130): ExtFunctions = {
RegularExpressions.py(136): ExtElements = {}
__init__.py(7): import Sets
 --- modulename: Sets, funcname: ?
Sets.py(7): """
Sets.py(9): from Ft.Lib import boolean
Sets.py(10): from Ft.Xml.XPath import Conversions
Sets.py(11): from Ft.Xml.Xslt import XsltRuntimeException, Error
Sets.py(13): EXSL_SETS_NS = "http://exslt.org/sets"
Sets.py(15): def Difference(context, nodes1, nodes2):
Sets.py(28): def Distinct(context, nodeset):
Sets.py(48): def HasSameNode(context, ns1, ns2):
Sets.py(62): def Intersection(context, ns1, ns2):
Sets.py(73): def Leading(context, ns1, ns2):
Sets.py(96): def Trailing(context, ns1, ns2):
Sets.py(119): ExtNamespaces = {
Sets.py(123): ExtFunctions = {
Sets.py(132): ExtElements = {}
__init__.py(8): import Strings
 --- modulename: Strings, funcname: ?
Strings.py(9): """
Strings.py(11): import urllib, re, codecs
Strings.py(12): from Ft.Xml.XPath import Conversions, NAMESPACE_NODE
Strings.py(13): from Ft.Xml.Xslt import XsltRuntimeException, Error
Strings.py(14): from Ft.Xml.Xslt.CopyOfElement import CopyNode
Strings.py(16): EXSL_STRINGS_NS = "http://exslt.org/strings"
Strings.py(18): def Align(context, target, padding, alignment=''):
Strings.py(50): def Concat(context, nodeset):
Strings.py(63): def DecodeUri(context, uri, encoding=u'UTF-8'):
Strings.py(90): _unreserved = ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'
Strings.py(96): _reserved = ';/?:@&=+$,[]'
Strings.py(98): def EncodeUri(context, uri, escapeReserved, encoding=u'UTF-8'):
Strings.py(141): def Padding(context, length, chars=''):
Strings.py(156): def Replace(context, s, searchNodes, replNodes):
Strings.py(219): def _replace(s, replmap, processor):
Strings.py(250): def Split(context, string, pattern=u' '):
Strings.py(279): def Tokenize(context, string, delimiters=''):
Strings.py(313): ExtNamespaces = {
Strings.py(317): ExtFunctions = {
Strings.py(328): ExtElements = {}
__init__.py(10): ExtNamespaces = {}
__init__.py(11): ExtNamespaces.update(Common.ExtNamespaces)
__init__.py(12): ExtNamespaces.update(DateTime.ExtNamespaces)
__init__.py(13): ExtNamespaces.update(Dynamic.ExtNamespaces)
__init__.py(14): ExtNamespaces.update(Functions.ExtNamespaces)
__init__.py(15): ExtNamespaces.update(Math_.ExtNamespaces)
__init__.py(16): ExtNamespaces.update(RegularExpressions.ExtNamespaces)
__init__.py(17): ExtNamespaces.update(Sets.ExtNamespaces)
__init__.py(18): ExtNamespaces.update(Strings.ExtNamespaces)
__init__.py(20): ExtFunctions = {}
__init__.py(21): ExtFunctions.update(Common.ExtFunctions)
__init__.py(22): ExtFunctions.update(DateTime.ExtFunctions)
__init__.py(23): ExtFunctions.update(Dynamic.ExtFunctions)
__init__.py(24): ExtFunctions.update(Functions.ExtFunctions)
__init__.py(25): ExtFunctions.update(Math_.ExtFunctions)
__init__.py(26): ExtFunctions.update(RegularExpressions.ExtFunctions)
__init__.py(27): ExtFunctions.update(Sets.ExtFunctions)
__init__.py(28): ExtFunctions.update(Strings.ExtFunctions)
__init__.py(30): ExtElements = {}
__init__.py(31): ExtElements.update(Common.ExtElements)
__init__.py(32): ExtElements.update(DateTime.ExtElements)
__init__.py(33): ExtElements.update(Dynamic.ExtElements)
__init__.py(34): ExtElements.update(Functions.ExtElements)
__init__.py(35): ExtElements.update(Math_.ExtElements)
__init__.py(36): ExtElements.update(RegularExpressions.ExtElements)
__init__.py(37): ExtElements.update(Sets.ExtElements)
__init__.py(38): ExtElements.update(Strings.ExtElements)
 --- modulename: BuiltInExtElements, funcname: ?
BuiltInExtElements.py(9): """
BuiltInExtElements.py(11): from xml.dom import Node
BuiltInExtElements.py(13): from Ft.Xml import EMPTY_NAMESPACE
BuiltInExtElements.py(14): from Ft.Xml.XPath import Conversions
BuiltInExtElements.py(15): from Ft.Xml.XPath import FT_EXT_NAMESPACE
BuiltInExtElements.py(16): from Ft.Xml.Xslt import XSL_NAMESPACE, XsltElement, XsltException, Error
BuiltInExtElements.py(17): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
BuiltInExtElements.py(18): from Ft.Xml.Xslt import ApplyTemplatesElement, ApplyImportsElement
 --- modulename: ApplyTemplatesElement, funcname: ?
ApplyTemplatesElement.py(9): """
ApplyTemplatesElement.py(11): from Ft.Xml import EMPTY_NAMESPACE
ApplyTemplatesElement.py(12): from Ft.Xml.Xslt import XsltElement, XSL_NAMESPACE, XsltRuntimeException, Error
ApplyTemplatesElement.py(13): from Ft.Xml.Xslt import CategoryTypes, AttributeInfo, ContentInfo
ApplyTemplatesElement.py(14): from Ft.Xml.Xslt.XPathExtensions import SortedExpression
ApplyTemplatesElement.py(16): class ApplyTemplatesElement(XsltElement):
 --- modulename: ApplyTemplatesElement, funcname: ApplyTemplatesElement
ApplyTemplatesElement.py(16): class ApplyTemplatesElement(XsltElement):
ApplyTemplatesElement.py(18):     category = CategoryTypes.INSTRUCTION
ApplyTemplatesElement.py(19):     content = ContentInfo.Rep(
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
ApplyTemplatesElement.py(21):                         ContentInfo.QName(XSL_NAMESPACE, 'xsl:with-param'))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(58):         self.args = []
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(60):             if isinstance(arg, type('')):
ContentInfo.py(62):             self.args.append(arg)
ContentInfo.py(59):         for arg in args:
ContentInfo.py(63):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
ApplyTemplatesElement.py(23):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
ApplyTemplatesElement.py(28):     doesSetup = 1
ApplyTemplatesElement.py(30):     def setup(self):
ApplyTemplatesElement.py(47):     def _instantiate_mode(self, context):
ApplyTemplatesElement.py(50):     def instantiate(self, context, processor):
 --- modulename: ApplyImportsElement, funcname: ?
ApplyImportsElement.py(13): """
ApplyImportsElement.py(15): from Ft.Xml.Xslt import XsltElement, XSL_NAMESPACE, XsltRuntimeException, Error
ApplyImportsElement.py(16): from Ft.Xml.Xslt import CategoryTypes, AttributeInfo, ContentInfo
ApplyImportsElement.py(18): class ApplyImportsElement(XsltElement):
 --- modulename: ApplyImportsElement, funcname: ApplyImportsElement
ApplyImportsElement.py(18): class ApplyImportsElement(XsltElement):
ApplyImportsElement.py(20):     category = CategoryTypes.INSTRUCTION
ApplyImportsElement.py(21):     content = ContentInfo.Empty
ApplyImportsElement.py(22):     legalAttrs = {}
ApplyImportsElement.py(24):     def instantiate(self, context, processor):
BuiltInExtElements.py(19): from Ft.Xml.Xslt import OutputParameters
BuiltInExtElements.py(21): RESERVED_NAMESPACE = u'http://xmlns.4suite.org/reserved'
BuiltInExtElements.py(23): __all__ = ['RESERVED_NAMESPACE',
BuiltInExtElements.py(39): class FtApplyImports(XsltElement):
 --- modulename: BuiltInExtElements, funcname: FtApplyImports
BuiltInExtElements.py(39): class FtApplyImports(XsltElement):
BuiltInExtElements.py(46):     category = CategoryTypes.INSTRUCTION
BuiltInExtElements.py(47):     legalAttrs = {}
BuiltInExtElements.py(48):     content = ContentInfo.Rep(
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
BuiltInExtElements.py(52):     doesSetup = 1
BuiltInExtElements.py(54):     def setup(self):
BuiltInExtElements.py(61):     def instantiate(self, context, processor):
BuiltInExtElements.py(82): class FtApplyTemplates(ApplyTemplatesElement.ApplyTemplatesElement):
 --- modulename: BuiltInExtElements, funcname: FtApplyTemplates
BuiltInExtElements.py(82): class FtApplyTemplates(ApplyTemplatesElement.ApplyTemplatesElement):
BuiltInExtElements.py(90):     legalAttrs = ApplyTemplatesElement.ApplyTemplatesElement.legalAttrs.copy()
BuiltInExtElements.py(91):     legalAttrs['mode'] = AttributeInfo.QNameAvt(description="The mode to be used for template application.  In this variation the mode is an AVT and thus can be computed at run time.")
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(93):     def _instantiate_mode(self, context):
BuiltInExtElements.py(97): class FtOutputElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: FtOutputElement
BuiltInExtElements.py(97): class FtOutputElement(XsltElement):
BuiltInExtElements.py(104):     content = ContentInfo.Template
BuiltInExtElements.py(105):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(118):     def __init__(self, *args, **kwds):
BuiltInExtElements.py(123):     def instantiate(self, context, processor):
BuiltInExtElements.py(141): class AssignElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: AssignElement
BuiltInExtElements.py(141): class AssignElement(XsltElement):
BuiltInExtElements.py(177):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(183):     def instantiate(self, context, processor):
BuiltInExtElements.py(204): class DumpKeysElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: DumpKeysElement
BuiltInExtElements.py(204): class DumpKeysElement(XsltElement):
BuiltInExtElements.py(241):     """ % RESERVED_NAMESPACE
BuiltInExtElements.py(242):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(247):     def instantiate(self, context, processor):
BuiltInExtElements.py(287): class DumpVarsElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: DumpVarsElement
BuiltInExtElements.py(287): class DumpVarsElement(XsltElement):
BuiltInExtElements.py(311):     """ % RESERVED_NAMESPACE
BuiltInExtElements.py(312):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(316):     def instantiate(self, context, processor):
BuiltInExtElements.py(347): class ReplaceElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: ReplaceElement
BuiltInExtElements.py(347): class ReplaceElement(XsltElement):
BuiltInExtElements.py(355):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(360):     def instantiate(self, context, processor):
BuiltInExtElements.py(380): class MsgControlElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: MsgControlElement
BuiltInExtElements.py(380): class MsgControlElement(XsltElement):
BuiltInExtElements.py(386):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(390):     def instantiate(self, context, processor):
BuiltInExtElements.py(395): class CreateIndexElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: CreateIndexElement
BuiltInExtElements.py(395): class CreateIndexElement(XsltElement):
BuiltInExtElements.py(409):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(415):     def instantiate(self, context, processor):
BuiltInExtElements.py(439): class RawTextOutputElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: RawTextOutputElement
BuiltInExtElements.py(439): class RawTextOutputElement(XsltElement):
BuiltInExtElements.py(456):     legalAttrs = {
BuiltInExtElements.py(458):                                             description="An XPath expression that returns a Python Unicode object."),
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(461):     def instantiate(self, context, processor):
BuiltInExtElements.py(466): class ChainToElement(XsltElement):
 --- modulename: BuiltInExtElements, funcname: ChainToElement
BuiltInExtElements.py(466): class ChainToElement(XsltElement):
BuiltInExtElements.py(480):     legalAttrs = {
BuiltInExtElements.py(483):             description="The URI of the next stylesheet in the chain"),
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(181):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(182):         self._isNsName = isNsName
BuiltInExtElements.py(486):     content = ContentInfo.Rep(ContentInfo.QName(XSL_NAMESPACE, 'xsl:with-param'))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
BuiltInExtElements.py(487):     validator = ContentInfo.Validator(content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(208):         return
BuiltInExtElements.py(489):     def instantiate(self, context, processor):
BuiltInExtElements.py(504): import ElementElement
 --- modulename: ElementElement, funcname: ?
ElementElement.py(9): """
ElementElement.py(11): from Ft.Xml import EMPTY_NAMESPACE
ElementElement.py(12): from Ft.Xml.Xslt import XsltElement, XsltRuntimeException, Error, XSL_NAMESPACE
ElementElement.py(13): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
ElementElement.py(15): class ElementElement(XsltElement):
 --- modulename: ElementElement, funcname: ElementElement
ElementElement.py(15): class ElementElement(XsltElement):
ElementElement.py(16):     category = CategoryTypes.INSTRUCTION
ElementElement.py(17):     content = ContentInfo.Template
ElementElement.py(18):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(181):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(182):         self._isNsName = isNsName
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
ElementElement.py(24):     def instantiate(self, context, processor):
ElementElement.py(56):     def execute(self, context, processor, name, namespace):
BuiltInExtElements.py(505): class UriToElementElement(ElementElement.ElementElement):
 --- modulename: BuiltInExtElements, funcname: UriToElementElement
BuiltInExtElements.py(505): class UriToElementElement(ElementElement.ElementElement):
BuiltInExtElements.py(523):     content = ContentInfo.Template
BuiltInExtElements.py(524):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(181):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(182):         self._isNsName = isNsName
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(181):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(182):         self._isNsName = isNsName
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
BuiltInExtElements.py(531):     def instantiate(self, context, processor):
BuiltInExtElements.py(556): ExtNamespaces = {
BuiltInExtElements.py(560): ExtElements = {
Processor.py(17): from Ft import DEFAULT_ENCODING
Processor.py(18): from Ft.Lib import Uri
Processor.py(19): from Ft.Xml import InputSource, Domlette, EMPTY_NAMESPACE
Processor.py(20): from Ft.Xml.Lib import StripElements
 --- modulename: StripElements, funcname: ?
StripElements.py(1): from xml.dom import Node
StripElements.py(2): from Ft.Xml import XML_NAMESPACE, EMPTY_NAMESPACE
StripElements.py(3): from Ft.Xml.Lib.XmlString import IsXmlSpace
StripElements.py(5): def StripElements(node,stripElements,stripState=0):
Processor.py(21): from Ft.Xml.Xslt import XsltContext, Error, XsltException, MessageSource
 --- modulename: XsltContext, funcname: ?
XsltContext.py(9): """
XsltContext.py(11): import Exslt, BuiltInExtFunctions
 --- modulename: BuiltInExtFunctions, funcname: ?
BuiltInExtFunctions.py(9): """
BuiltInExtFunctions.py(15): import re
BuiltInExtFunctions.py(17): from Ft.Xml.Lib.XmlString import SplitQName
BuiltInExtFunctions.py(18): from Ft.Xml.XPath import FT_EXT_NAMESPACE
BuiltInExtFunctions.py(19): from Ft.Xml.XPath import Conversions
BuiltInExtFunctions.py(20): from Ft.Xml.Xslt import XsltRuntimeException, Error
BuiltInExtFunctions.py(21): from Ft.Xml.Xslt.XsltFunctions import Key
 --- modulename: XsltFunctions, funcname: ?
XsltFunctions.py(9): """
XsltFunctions.py(11): import os, cStringIO, traceback
XsltFunctions.py(12): from Ft.Lib import boolean, UriException
XsltFunctions.py(13): from Ft.Lib.Uri import IsAbsolute
XsltFunctions.py(14): from Ft.Xml import __version__, EMPTY_NAMESPACE
XsltFunctions.py(15): from Ft.Xml.Lib import routines
XsltFunctions.py(16): from Ft.Xml.XPath import Conversions, Types, FT_EXT_NAMESPACE
XsltFunctions.py(17): from Ft.Xml.Xslt import XsltRuntimeException, Error, XSL_NAMESPACE
XsltFunctions.py(20): from Ft.Xml.Xslt.StylesheetHandler import _ELEMENT_MAPPING
 --- modulename: StylesheetHandler, funcname: ?
StylesheetHandler.py(9): """
StylesheetHandler.py(11): from Ft.Lib import Truncate, UriException
StylesheetHandler.py(12): from Ft.Xml import XML_NAMESPACE, EMPTY_NAMESPACE, Domlette
StylesheetHandler.py(13): from Ft.Xml.Lib.XmlString import IsXmlSpace
StylesheetHandler.py(14): from Ft.Xml.Xslt import XSL_NAMESPACE, MessageSource
StylesheetHandler.py(15): from Ft.Xml.Xslt import XsltException, XsltParserException, Error
StylesheetHandler.py(16): from Ft.Xml.Xslt import CategoryTypes, BuiltInExtElements
StylesheetHandler.py(17): from Ft.Xml.Xslt import Exslt
StylesheetHandler.py(19): from LiteralElement import LiteralElement
 --- modulename: LiteralElement, funcname: ?
LiteralElement.py(9): """
LiteralElement.py(11): from Ft.Xml.XPath import RuntimeException as XPathRuntimeException
LiteralElement.py(12): from Ft.Xml.Xslt import XsltElement, XsltRuntimeException, Error
LiteralElement.py(14): class LiteralElement(XsltElement):
 --- modulename: LiteralElement, funcname: LiteralElement
LiteralElement.py(14): class LiteralElement(XsltElement):
LiteralElement.py(17):     _use_attribute_sets = []
LiteralElement.py(21):     def fixupAliases(self, namespaceAliases):
LiteralElement.py(56):     def instantiate(self, context, processor):
StylesheetHandler.py(20): from UndefinedElements import UndefinedXsltElement, UndefinedExtensionElement
 --- modulename: UndefinedElements, funcname: ?
UndefinedElements.py(9): """
UndefinedElements.py(10): from Ft.Xml.Xslt import XSL_NAMESPACE, XsltElement
UndefinedElements.py(11): from Ft.Xml.Xslt import XsltRuntimeException, Error
UndefinedElements.py(12): from Ft.Xml.Xslt import CategoryTypes, ContentInfo
UndefinedElements.py(14): class _UndefinedElement(XsltElement):
 --- modulename: UndefinedElements, funcname: _UndefinedElement
UndefinedElements.py(14): class _UndefinedElement(XsltElement):
UndefinedElements.py(16):     def instantiate(self, context, processor):
UndefinedElements.py(32):     def _getError(self):
UndefinedElements.py(35): class UndefinedXsltElement(_UndefinedElement):
 --- modulename: UndefinedElements, funcname: UndefinedXsltElement
UndefinedElements.py(35): class UndefinedXsltElement(_UndefinedElement):
UndefinedElements.py(37):     legalAttrs = {}
UndefinedElements.py(39):     def _getError(self):
UndefinedElements.py(43): class UndefinedExtensionElement(_UndefinedElement):
 --- modulename: UndefinedElements, funcname: UndefinedExtensionElement
UndefinedElements.py(43): class UndefinedExtensionElement(_UndefinedElement):
UndefinedElements.py(45):     legalAttrs = None
UndefinedElements.py(47):     def _getError(self):
StylesheetHandler.py(22): import StylesheetTree, ContentInfo, AttributeInfo
StylesheetHandler.py(25): _ELEMENT_MAPPING = {
StylesheetHandler.py(64): _RESULT_ELEMENT_XSL_ATTRS = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
StylesheetHandler.py(70): _RESULT_ELEMENT_ATTR_INFO = AttributeInfo.AnyAvt()
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
StylesheetHandler.py(72): _ELEMENT_CLASSES = {}
StylesheetHandler.py(73): _LEGAL_ATTRS = {}
StylesheetHandler.py(75): class ParseState:
 --- modulename: StylesheetHandler, funcname: ParseState
StylesheetHandler.py(75): class ParseState:
StylesheetHandler.py(95):     def __init__(self, node, validation, localVariables, forwardsCompatible,
StylesheetHandler.py(107): class StylesheetHandler:
 --- modulename: StylesheetHandler, funcname: StylesheetHandler
StylesheetHandler.py(107): class StylesheetHandler:
StylesheetHandler.py(113):     def __init__(self, importIndex=0, globalVars=None, extElements=None,
StylesheetHandler.py(134):     def reset(self):
StylesheetHandler.py(141):     def clone(self):
StylesheetHandler.py(146):     def getResult(self):
StylesheetHandler.py(149):     def addExtensionElementMapping(self, elementMapping):
StylesheetHandler.py(166):     def setDocumentLocator(self, locator):
StylesheetHandler.py(170):     def startDocument(self):
StylesheetHandler.py(204):     def endDocument(self):
StylesheetHandler.py(209):     def startPrefixMapping(self, prefix, uri):
StylesheetHandler.py(213):     def startElementNS(self, expandedName, qualifiedName, attribs):
StylesheetHandler.py(448):     def endElementNS(self, expandedName, qualifiedName):
StylesheetHandler.py(504):     def characters(self, data):
StylesheetHandler.py(535):     def _combine_stylesheet(self, href, is_import):
StylesheetHandler.py(592):     def _handle_standard_attr(self, state, instance, name, value):
StylesheetHandler.py(635):     def _handle_result_element_attr(self, state, instance, elementName,
StylesheetHandler.py(647):     def _mutate_exception(self, exception):
StylesheetHandler.py(658):     def _debug_validation(self, token=None, next=None):
XsltFunctions.py(22): def Document(context, object, nodeSet=None):
XsltFunctions.py(172): def Key(context, qname, keyList):
XsltFunctions.py(209): def Current(context):
XsltFunctions.py(218): def UnparsedEntityUri(context, name):
XsltFunctions.py(231): def GenerateId(context, nodeSet=None):
XsltFunctions.py(255): def SystemProperty(context, qname):
XsltFunctions.py(296): def FunctionAvailable(context, qname):
XsltFunctions.py(317): def ElementAvailable(context, qname):
XsltFunctions.py(344): def FormatNumber(context, number, formatString, decimalFormatName=None):
XsltFunctions.py(375): CoreFunctions = {
BuiltInExtFunctions.py(23): __all__ = ['ExtNamespaces', 'ExtFunctions',
BuiltInExtFunctions.py(33): def FtKey(context, qname, keyList, realContextNode=None):
BuiltInExtFunctions.py(50): def SearchRe(context, pattern, arg=None):
BuiltInExtFunctions.py(77): def Map(context, funcname, *nodesets):
BuiltInExtFunctions.py(118): def Lookup(context, name, key):
BuiltInExtFunctions.py(131): def DocAsString(context, obj, encoding='UTF-8'):
BuiltInExtFunctions.py(173): def SerializeXml(context, nodeset, method=None,
BuiltInExtFunctions.py(202): def Split(context, arg, delim=u' '):
BuiltInExtFunctions.py(228): ExtNamespaces = {
BuiltInExtFunctions.py(232): ExtFunctions = {
XsltContext.py(12): from Ft.Lib.Uri import UriDict
XsltContext.py(13): from Ft.Xml import EMPTY_NAMESPACE
XsltContext.py(14): from Ft.Xml.XPath import Context, Util, RuntimeException
XsltContext.py(15): from Ft.Xml.Xslt import XsltFunctions
XsltContext.py(22): class XsltContext(Context.Context):
 --- modulename: XsltContext, funcname: XsltContext
XsltContext.py(22): class XsltContext(Context.Context):
XsltContext.py(24):     functions = Context.Context.functions.copy()
XsltContext.py(25):     functions.update(XsltFunctions.CoreFunctions)
XsltContext.py(26):     functions.update(Exslt.ExtFunctions)
XsltContext.py(27):     functions.update(BuiltInExtFunctions.ExtFunctions)
XsltContext.py(29):     def __init__(self,
XsltContext.py(63):     def addDocument(self, document, documentUri=None):
XsltContext.py(70):     def splitQName(self, qname):
XsltContext.py(79):     def expandQName(self, qname):
XsltContext.py(91):     def setProcessState(self, execNode):
XsltContext.py(96):     def clone(self):
XsltContext.py(102):     def __repr__(self):
Processor.py(22): from Ft.Xml.Xslt import OutputHandler, RtfWriter, StringWriter
 --- modulename: OutputHandler, funcname: ?
OutputHandler.py(10): """
OutputHandler.py(12): from Ft.Xml import EMPTY_NAMESPACE
OutputHandler.py(13): from Ft.Xml.Lib.XmlString import IsXmlSpace
OutputHandler.py(14): from Ft.Xml.Xslt import PlainTextWriter, HtmlWriter, XmlWriter
 --- modulename: PlainTextWriter, funcname: ?
PlainTextWriter.py(9): """
PlainTextWriter.py(11): import codecs
PlainTextWriter.py(13): from Ft.Xml.Xslt import NullWriter
 --- modulename: NullWriter, funcname: ?
NullWriter.py(9): """
NullWriter.py(11): from xml.dom import Node
NullWriter.py(13): from Ft.Xml import EMPTY_NAMESPACE, XMLNS_NAMESPACE
NullWriter.py(14): from Ft.Xml.Domlette import GetAllNs
NullWriter.py(15): from Ft.Xml.XPath import NAMESPACE_NODE
NullWriter.py(17): from OutputParameters import OutputParameters
NullWriter.py(20): class NullWriter:
 --- modulename: NullWriter, funcname: NullWriter
NullWriter.py(20): class NullWriter:
NullWriter.py(24):     def __init__(self, outputParams=None):
NullWriter.py(33):     def getMediaType(self):
NullWriter.py(39):     def getStream(self):
NullWriter.py(46):     def getResult(self):
NullWriter.py(53):     def startDocument(self):
NullWriter.py(59):     def endDocument(self):
NullWriter.py(65):     def text(self, text, escapeOutput=True):
NullWriter.py(74):     def attribute(self, name, value, namespace=EMPTY_NAMESPACE):
NullWriter.py(84):     def processingInstruction(self, target, data):
NullWriter.py(93):     def comment(self, body):
NullWriter.py(101):     def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None):
NullWriter.py(113):     def endElement(self, name, namespace=EMPTY_NAMESPACE):
NullWriter.py(122):     def namespace(self, prefix, namespace):
NullWriter.py(132):     def copyNodes(self, nodeOrNodelist):
PlainTextWriter.py(16): class PlainTextWriter(NullWriter.NullWriter):
 --- modulename: PlainTextWriter, funcname: PlainTextWriter
PlainTextWriter.py(16): class PlainTextWriter(NullWriter.NullWriter):
PlainTextWriter.py(17):     def __init__(self, outputParams, stream):
PlainTextWriter.py(27):     def getStream(self):
PlainTextWriter.py(30):     def text(self, text, escapeOutput=True):
 --- modulename: HtmlWriter, funcname: ?
HtmlWriter.py(9): """
HtmlWriter.py(11): from Ft.Xml import EMPTY_NAMESPACE
HtmlWriter.py(12): from Ft.Xml.Lib import HtmlPrinter, HtmlPrettyPrinter
HtmlWriter.py(13): from Ft.Xml.Xslt import XmlWriter
 --- modulename: XmlWriter, funcname: ?
XmlWriter.py(9): """
XmlWriter.py(11): from Ft.Xml import XML_NAMESPACE, EMPTY_NAMESPACE, EMPTY_PREFIX, XMLNS_NAMESPACE
XmlWriter.py(12): from Ft.Xml.Lib import XmlPrinter, XmlPrettyPrinter
XmlWriter.py(13): from Ft.Xml.Lib.XmlString import XmlStrStrip, SplitQName
XmlWriter.py(14): from Ft.Xml.Xslt import NullWriter, XsltException, Error
XmlWriter.py(16): DEFAULT_GENERATED_PREFIX = u"org.4suite.4xslt.ns"
XmlWriter.py(19): class XmlWriter(NullWriter.NullWriter):
 --- modulename: XmlWriter, funcname: XmlWriter
XmlWriter.py(19): class XmlWriter(NullWriter.NullWriter):
XmlWriter.py(24):     GENERATED_PREFIX = DEFAULT_GENERATED_PREFIX + "%s"
XmlWriter.py(26):     def __init__(self, outputParams, stream):
XmlWriter.py(43):     def getStream(self):
XmlWriter.py(47):     def _completeLastElement(self):
XmlWriter.py(63):     def startDocument(self):
XmlWriter.py(83):     def endDocument(self):
XmlWriter.py(88):     def text(self, text, escapeOutput=True):
XmlWriter.py(94):     def attribute(self, name, value, namespace=EMPTY_NAMESPACE):
XmlWriter.py(137):     def _updateNamespace(self, prefix, namespace, local=u'', forcePrefix=0):
XmlWriter.py(190):     def changePrefix(self, namespace, forbidEmpty=False):
XmlWriter.py(220):     def matchesGeneratedPrefix(self, prefix):
XmlWriter.py(223):     def namespace(self, prefix, namespace):
XmlWriter.py(227):     def processingInstruction(self, target, data):
XmlWriter.py(235):     def comment(self, body):
XmlWriter.py(240):     def startElement(self, tagName, namespace=EMPTY_NAMESPACE, extraNss=None):
XmlWriter.py(262):     def endElement(self, tagName, namespace=EMPTY_NAMESPACE):
XmlWriter.py(270): class CdataSectionXmlWriter(XmlWriter):
 --- modulename: XmlWriter, funcname: CdataSectionXmlWriter
XmlWriter.py(270): class CdataSectionXmlWriter(XmlWriter):
XmlWriter.py(276):     def __init__(self, outputParams, stream):
XmlWriter.py(287):     def _completeLastElement(self):
XmlWriter.py(295):     def startElement(self, tagName, namespace=EMPTY_NAMESPACE, extraNss=None):
XmlWriter.py(302):     def endElement(self, tagName, namespace=EMPTY_NAMESPACE):
XmlWriter.py(307):     def text(self, text, escapeOutput=True):
HtmlWriter.py(15): class HtmlWriter(XmlWriter.XmlWriter):
 --- modulename: HtmlWriter, funcname: HtmlWriter
HtmlWriter.py(15): class HtmlWriter(XmlWriter.XmlWriter):
HtmlWriter.py(23):     def _completeLastElementAfterMeta(self):
HtmlWriter.py(27):     def _completeLastElement(self):
HtmlWriter.py(49):     def startDocument(self):
OutputHandler.py(15): from Ft.Xml.Xslt import XsltException, Error
OutputHandler.py(17): _TEXT_METHOD = (EMPTY_NAMESPACE, 'text')
OutputHandler.py(18): _HTML_METHOD = (EMPTY_NAMESPACE, 'html')
OutputHandler.py(19): _XML_METHOD = (EMPTY_NAMESPACE, 'xml')
OutputHandler.py(21): class OutputHandler:
 --- modulename: OutputHandler, funcname: OutputHandler
OutputHandler.py(21): class OutputHandler:
OutputHandler.py(23):     _methods = {
OutputHandler.py(29):     def __init__(self, outputParams, stream, notifyFunc=None):
OutputHandler.py(37):     def _finalize(self, method):
OutputHandler.py(70):     def getStream(self):
OutputHandler.py(73):     def getResult(self):
OutputHandler.py(76):     def startDocument(self):
OutputHandler.py(82):     def endDocument(self, *args, **kw):
OutputHandler.py(88):     def text(self, *args, **kw):
OutputHandler.py(95):     def processingInstruction(self, *args, **kw):
OutputHandler.py(99):     def comment(self, *args, **kw):
OutputHandler.py(103):     def startElement(self, name, namespace=None, *args, **kw):
 --- modulename: RtfWriter, funcname: ?
RtfWriter.py(9): """
RtfWriter.py(11): from Ft.Xml import XMLNS_NAMESPACE, EMPTY_NAMESPACE
RtfWriter.py(12): from Ft.Xml.Domlette import implementation
RtfWriter.py(13): from Ft.Xml.Xslt.NullWriter import NullWriter
RtfWriter.py(16): class RtfWriter(NullWriter):
 --- modulename: RtfWriter, funcname: RtfWriter
RtfWriter.py(16): class RtfWriter(NullWriter):
RtfWriter.py(20):     def __init__(self, outputParams, baseUri, implementation=implementation):
RtfWriter.py(30):     def __completeTextNode(self):
RtfWriter.py(39):     def getResult(self):
RtfWriter.py(46):     def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None):
RtfWriter.py(68):     def endElement(self, name, namespace=EMPTY_NAMESPACE):
RtfWriter.py(79):     def attribute(self, name, value, namespace=EMPTY_NAMESPACE):
RtfWriter.py(93):     def text(self, data, escapeOutput=True):
RtfWriter.py(99):     def processingInstruction(self, target, data):
RtfWriter.py(105):     def comment(self, data):
 --- modulename: StringWriter, funcname: ?
StringWriter.py(9): """
StringWriter.py(11): import NullWriter
StringWriter.py(13): class StringWriter(NullWriter.NullWriter):
 --- modulename: StringWriter, funcname: StringWriter
StringWriter.py(13): class StringWriter(NullWriter.NullWriter):
StringWriter.py(14):     def __init__(self, outputParams):
StringWriter.py(20):     def getResult(self):
StringWriter.py(23):     def text(self, text, escapeOutput=True):
StringWriter.py(28):     def startElement(self, name, namespace=None, extraNss=None):
StringWriter.py(34):     def endElement(self, name, namespace=None):
StringWriter.py(39):     def comment(self, body):
StringWriter.py(43):     def processingInstruction(self, target, data):
StringWriter.py(47):     def attribute(self, name, value, namespace=None):
Processor.py(23): from Ft.Xml.Xslt.StylesheetReader import StylesheetReader
 --- modulename: StylesheetReader, funcname: ?
StylesheetReader.py(9): """
StylesheetReader.py(11): import cStringIO
StylesheetReader.py(12): from xml.dom import Node
StylesheetReader.py(13): from xml.sax.handler import property_dom_node
StylesheetReader.py(15): from Ft.Xml import XMLNS_NAMESPACE, Sax, InputSource, ReaderException
StylesheetReader.py(16): from Ft.Xml.Xslt import XsltException, Error, XSL_NAMESPACE
StylesheetReader.py(17): from Ft.Xml.Xslt.StylesheetHandler import StylesheetHandler
StylesheetReader.py(21): def _change_node(xslt_node, attributes, importIndex=0):
StylesheetReader.py(32): STYLESHEET_WHITESPACE_RULES = [(XSL_NAMESPACE, 'text', False),
StylesheetReader.py(35): class StylesheetReader(StylesheetHandler):
 --- modulename: StylesheetReader, funcname: StylesheetReader
StylesheetReader.py(35): class StylesheetReader(StylesheetHandler):
StylesheetReader.py(45):     def __init__(self, altBaseUris=None, ownerDocument=None,
StylesheetReader.py(54):     def reset(self):
StylesheetReader.py(60):     def clone(self):
StylesheetReader.py(65):     def fromInstant(self, instant, baseUri='', is_import=0):
StylesheetReader.py(92):     def fromDocument(self, document, baseUri='', factory=None):
StylesheetReader.py(140):     def fromSrc(self, isrc, extElements=None):
StylesheetReader.py(188):     def _parseSrc(self, isrc, features, properties):
Processor.py(33): XSLT_IMT = ['application/xslt+xml', 'application/xslt',
Processor.py(37): class Processor(object):
 --- modulename: Processor, funcname: Processor
Processor.py(37): class Processor(object):
Processor.py(102):     _4xslt_debug = False
Processor.py(103):     _4xslt_profile = False
Processor.py(104):     _4xslt_trace = False
Processor.py(106):     def __init__(self, stylesheetAltUris=None,
Processor.py(148):     def getStripElements(self):
Processor.py(154):     def registerExtensionModules(self, moduleList):
Processor.py(178):     def registerExtensionFunction(self, namespace, localName, function):
Processor.py(194):     def registerExtensionElement(self, namespace, localName, klass):
Processor.py(209):     def setDocumentReader(self, docReader):
Processor.py(222):     def getDocumentReader(self):
Processor.py(228):     def setStylesheetReader(self, reader):
Processor.py(238):     def getStylesheetReader(self):
Processor.py(246):     def __add_stylesheet(self, stylesheet):
Processor.py(270):     def appendStylesheet(self, iSrc):
Processor.py(285):     def appendStylesheetInstance(self, instance, refUri=''):
Processor.py(320):     def appendStylesheetNode(self, node, refUri='', factory=None):
Processor.py(344):     def run(self, iSrc, ignorePis=0, topLevelParams=None,
Processor.py(395):     def runNode(self, node, sourceUri=None, ignorePis=0,
Processor.py(495):     def __cmp_stys(self, a, b):
Processor.py(524):     def __checkStylesheetPis(self, node, inputSource):
Processor.py(659):     def execute(self, node, docInputSource, ignorePis=0, topLevelParams=None,
Processor.py(741):     def applyTemplates(self, context, params=None):
Processor.py(776):     def xslMessage(self, msg):
Processor.py(792):     def warning(self, message):
Processor.py(805):     def messageControl(self, suppress):
Processor.py(813):     def __writerChanged(self, newWriter):
Processor.py(821):     def addHandler(self, outputParams, stream):
Processor.py(842):     def removeHandler(self):
Processor.py(852):     def pushResultTree(self, baseUri, implementation=None):
Processor.py(870):     def pushResultString(self):
Processor.py(884):     def pushResult(self, handler=None):
Processor.py(901):     def popResult(self):
Processor.py(913):     def output(self):
Processor.py(918):     def writer(self):
Processor.py(926):     writer = property(writer)
Processor.py(928):     def _stripElements(self, node):
Processor.py(932):     def _normalizeParams(self, params):
Processor.py(968):     def reset(self):
test4suite.py(5): from Ft.Xml.InputSource import DefaultFactory
test4suite.py(6): import trace,sys
test4suite.py(9): xsltproc = Processor()
 --- modulename: Processor, funcname: __init__
Processor.py(109):         self._suppressMsgs = 0
Processor.py(110):         self.msgPrefix = MessageSource.DEFAULT_MESSAGE_PREFIX
Processor.py(111):         self.msgSuffix = MessageSource.DEFAULT_MESSAGE_SUFFIX
Processor.py(112):         self.stylesheet = None
Processor.py(113):         self.inputSourceFactory = InputSource.DefaultFactory
Processor.py(114):         self._stylesheetAltUris = stylesheetAltUris or []
Processor.py(117):         if stylesheetIncPaths:
Processor.py(123):         self._docReader = documentReader or Domlette.NonvalidatingReader
Processor.py(125):         self._domimp = implementation or Domlette.implementation
Processor.py(127):         self._lastOutputParams = None
Processor.py(130):         self.mediaPref = None
Processor.py(133):         self._builtInWarningGiven = 0
Processor.py(135):         self.extFunctions = {}  #Cache ext functions to give to the context
Processor.py(137):         self.extElements = {}
Processor.py(138):         self.extElements.update(Exslt.ExtElements)
Processor.py(139):         self.extElements.update(BuiltInExtElements.ExtElements)
Processor.py(141):         self.extensionParams = {}
Processor.py(144):         self._styReader = None
Processor.py(146):         return
test4suite.py(11): xsltproc.appendStylesheet(DefaultFactory.fromUri("file:///home/t0rt00se/Travail/SILR3/pTrans/testset/persons_to_xhtml_list.xsl"))
 --- modulename: InputSource, funcname: fromUri
InputSource.py(311):         if self.catalog:
InputSource.py(312):             uri = self._resolveFromCatalog(uri)
 --- modulename: InputSource, funcname: _resolveFromCatalog
InputSource.py(349):         if uri in self.catalog.uris:
InputSource.py(351):         return uri
InputSource.py(313):         src = self.fromStream(*(None, uri) + v_args, **kw_args)
 --- modulename: InputSource, funcname: fromStream
InputSource.py(334):         if not uri:
InputSource.py(337):         kw_args['factory'] = self
InputSource.py(338):         if 'resolver' not in kw_args: kw_args['resolver'] = self.resolver
InputSource.py(339):         if 'catalog' not in kw_args: kw_args['catalog'] = self.catalog
InputSource.py(340):         return self._klass(*(stream, uri) + v_args, **kw_args)
 --- modulename: InputSource, funcname: __init__
InputSource.py(47):         if uri:
InputSource.py(48):             self.uri = uri
InputSource.py(51):         self.stream = stream
InputSource.py(52):         self.processIncludes = processIncludes
InputSource.py(53):         self.stripElements = stripElements or []
InputSource.py(54):         self.factory = factory
InputSource.py(55):         self.fragment = Uri.SplitFragment(self.uri)[1]
 --- modulename: Uri, funcname: SplitFragment
Uri.py(294):     pos = uri.rfind('#')
Uri.py(295):     if pos == -1:
Uri.py(296):         return (uri, uri[:0])
InputSource.py(56):         self._resolver = resolver
InputSource.py(57):         self._catalog = catalog
InputSource.py(58):         enc = self._getStreamEncoding(stream)
 --- modulename: InputSource, funcname: _getStreamEncoding
InputSource.py(94):         stream_url = getattr(stream, 'url', None)
InputSource.py(95):         if stream_url is None:
InputSource.py(96):             return None
InputSource.py(59):         if enc is None:
InputSource.py(60):             enc = encoding
InputSource.py(61):         self.encoding = enc
InputSource.py(62):         self.name = self.uri
InputSource.py(63):         return
InputSource.py(314):         stream = src._openStream(src.uri)
 --- modulename: InputSource, funcname: _openStream
InputSource.py(208):         try:
InputSource.py(209):             return self.getUriResolver().resolve(uri)
 --- modulename: InputSource, funcname: getUriResolver
InputSource.py(162):         return self._resolver
 --- modulename: Uri, funcname: resolve
Uri.py(836):         if baseUri is not None:
Uri.py(840):             scheme = GetScheme(uri)
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(842):             if scheme not in self.supportedSchemes:
Uri.py(857):         if scheme == 'file':
Uri.py(858):             path = UriToOsPath(uri, attemptAbsolute=False)
 --- modulename: Uri, funcname: UriToOsPath
Uri.py(1340):     (scheme, authority, path) = SplitUriRef(uri)[0:3]
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(1341):     if scheme and scheme != 'file':
Uri.py(1344):     if authority == 'localhost':
Uri.py(1346):     osname = osname or os.name
Uri.py(1348):     if osname == 'nt':
Uri.py(1411):     elif osname == 'posix':
Uri.py(1413):         if authority:
Uri.py(1420):         path = PercentDecode(re.sub('%2[fF]', '\\/', path))
 --- modulename: Uri, funcname: PercentDecode
Uri.py(491):     is_unicode = isinstance(s, unicode)
Uri.py(492):     if is_unicode:
Uri.py(495):         mychr = chr
Uri.py(496):     list_ = s.split('%')
Uri.py(497):     res = [list_[0]]
Uri.py(498):     myappend = res.append
Uri.py(499):     del list_[0]
Uri.py(500):     for item in list_:
Uri.py(514):     s = ''.join(res)
Uri.py(523):     if is_unicode:
Uri.py(525):     return s
Uri.py(1422):         if attemptAbsolute and osname == os.name and not os.path.isabs(path):
Uri.py(1425):         return path
Uri.py(859):             try:
Uri.py(860):                 stream = open(path, 'rb')
Uri.py(873):         return stream
InputSource.py(315):         return src.clone(stream, src.uri)
 --- modulename: InputSource, funcname: clone
InputSource.py(223):         if uri is None:
InputSource.py(225):         if stream is None:
InputSource.py(227):         if hint == 'new stream':
InputSource.py(231):             enc = self.encoding
InputSource.py(232):         return self.__class__(stream, uri,
InputSource.py(233):                               processIncludes=self.processIncludes,
InputSource.py(234):                               stripElements=self.stripElements,
InputSource.py(235):                               factory=self.factory, resolver=self._resolver,
InputSource.py(236):                               catalog=self._catalog, encoding=enc)
 --- modulename: InputSource, funcname: __init__
InputSource.py(47):         if uri:
InputSource.py(48):             self.uri = uri
InputSource.py(51):         self.stream = stream
InputSource.py(52):         self.processIncludes = processIncludes
InputSource.py(53):         self.stripElements = stripElements or []
InputSource.py(54):         self.factory = factory
InputSource.py(55):         self.fragment = Uri.SplitFragment(self.uri)[1]
 --- modulename: Uri, funcname: SplitFragment
Uri.py(294):     pos = uri.rfind('#')
Uri.py(295):     if pos == -1:
Uri.py(296):         return (uri, uri[:0])
InputSource.py(56):         self._resolver = resolver
InputSource.py(57):         self._catalog = catalog
InputSource.py(58):         enc = self._getStreamEncoding(stream)
 --- modulename: InputSource, funcname: _getStreamEncoding
InputSource.py(94):         stream_url = getattr(stream, 'url', None)
InputSource.py(95):         if stream_url is None:
InputSource.py(96):             return None
InputSource.py(59):         if enc is None:
InputSource.py(60):             enc = encoding
InputSource.py(61):         self.encoding = enc
InputSource.py(62):         self.name = self.uri
InputSource.py(63):         return
 --- modulename: Processor, funcname: appendStylesheet
Processor.py(280):         reader = self.getStylesheetReader()
 --- modulename: Processor, funcname: getStylesheetReader
Processor.py(242):         if self._styReader is None:
Processor.py(243):             self._styReader = StylesheetReader(self._stylesheetAltUris)
 --- modulename: StylesheetReader, funcname: __init__
StylesheetReader.py(48):         StylesheetHandler.__init__(self, importIndex, globalVars, extElements,
StylesheetReader.py(49):                                    visitedStyUris)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(115):         self._import_index = importIndex
StylesheetHandler.py(116):         if globalVars is None:
StylesheetHandler.py(119):             self._global_vars = {}
StylesheetHandler.py(122):         if extElements is None:
StylesheetHandler.py(123):             self._extElements = d = {}
StylesheetHandler.py(124):             d.update(Exslt.ExtElements)
StylesheetHandler.py(125):             d.update(BuiltInExtElements.ExtElements)
StylesheetHandler.py(129):         self._visited_stylesheet_uris = visitedStyUris or {}
StylesheetHandler.py(130):         self._alt_base_uris = altBaseUris or []
StylesheetHandler.py(131):         self._ownerDoc = ownerDocument
StylesheetHandler.py(132):         return
StylesheetReader.py(50):         self._alt_base_uris = altBaseUris or []
StylesheetReader.py(51):         self._ownerDoc = ownerDocument
StylesheetReader.py(52):         return
Processor.py(244):         return self._styReader
Processor.py(281):         stylesheet = reader.fromSrc(iSrc, self.extElements)
 --- modulename: StylesheetReader, funcname: fromSrc
StylesheetReader.py(147):         uri = isrc.uri
StylesheetReader.py(150):         content = ''
StylesheetReader.py(151):         if self._ownerDoc is not None:
StylesheetReader.py(169):         if not content:
StylesheetReader.py(170):             content = isrc.stream.read()
StylesheetReader.py(171):             isrc = isrc.clone(cStringIO.StringIO(content))
 --- modulename: InputSource, funcname: clone
InputSource.py(223):         if uri is None:
InputSource.py(224):             uri = self.uri
InputSource.py(225):         if stream is None:
InputSource.py(227):         if hint == 'new stream':
InputSource.py(231):             enc = self.encoding
InputSource.py(232):         return self.__class__(stream, uri,
InputSource.py(233):                               processIncludes=self.processIncludes,
InputSource.py(234):                               stripElements=self.stripElements,
InputSource.py(235):                               factory=self.factory, resolver=self._resolver,
InputSource.py(236):                               catalog=self._catalog, encoding=enc)
 --- modulename: InputSource, funcname: __init__
InputSource.py(47):         if uri:
InputSource.py(48):             self.uri = uri
InputSource.py(51):         self.stream = stream
InputSource.py(52):         self.processIncludes = processIncludes
InputSource.py(53):         self.stripElements = stripElements or []
InputSource.py(54):         self.factory = factory
InputSource.py(55):         self.fragment = Uri.SplitFragment(self.uri)[1]
 --- modulename: Uri, funcname: SplitFragment
Uri.py(294):     pos = uri.rfind('#')
Uri.py(295):     if pos == -1:
Uri.py(296):         return (uri, uri[:0])
InputSource.py(56):         self._resolver = resolver
InputSource.py(57):         self._catalog = catalog
InputSource.py(58):         enc = self._getStreamEncoding(stream)
 --- modulename: InputSource, funcname: _getStreamEncoding
InputSource.py(94):         stream_url = getattr(stream, 'url', None)
InputSource.py(95):         if stream_url is None:
InputSource.py(96):             return None
InputSource.py(59):         if enc is None:
InputSource.py(60):             enc = encoding
InputSource.py(61):         self.encoding = enc
InputSource.py(62):         self.name = self.uri
InputSource.py(63):         return
StylesheetReader.py(174):         if extElements is not None:
StylesheetReader.py(175):             self._extElements.update(extElements)
StylesheetReader.py(177):         features = [(Sax.FEATURE_PROCESS_XINCLUDES, isrc.processIncludes)]
StylesheetReader.py(178):         properties = [(Sax.PROPERTY_WHITESPACE_RULES,
StylesheetReader.py(180):         stylesheet = self._parseSrc(isrc, features, properties)
 --- modulename: StylesheetReader, funcname: _parseSrc
StylesheetReader.py(189):         self._input_source = isrc
StylesheetReader.py(191):         parser = Sax.CreateParser()
StylesheetReader.py(192):         parser.setContentHandler(self)
StylesheetReader.py(193):         for featurename, value in features:
StylesheetReader.py(194):             parser.setFeature(featurename, value)
StylesheetReader.py(193):         for featurename, value in features:
StylesheetReader.py(196):         for propertyname, value in properties:
StylesheetReader.py(197):             parser.setProperty(propertyname, value)
StylesheetReader.py(196):         for propertyname, value in properties:
StylesheetReader.py(199):         try:
StylesheetReader.py(200):             parser.parse(isrc)
 --- modulename: xmlparser, funcname: SetLocator
 --- modulename: StylesheetHandler, funcname: setDocumentLocator
StylesheetHandler.py(167):         self._locator = locator
StylesheetHandler.py(168):         return
 --- modulename: xmlparser, funcname: StartDocument
 --- modulename: StylesheetHandler, funcname: startDocument
StylesheetHandler.py(178):         document_uri = self._locator.getSystemId()
StylesheetHandler.py(179):         root = StylesheetTree.XsltRoot(document_uri)
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(91):         self.root = self
StylesheetTree.py(92):         self.baseUri = baseUri
StylesheetTree.py(94):         self.sources = {}      # XML strings
StylesheetTree.py(95):         self.sourceNodes = {}  # Domlette documents
StylesheetTree.py(128):         self.primeInstructions = []
StylesheetTree.py(129):         self.idleInstructions = []
StylesheetTree.py(130):         self.stylesheet = None
StylesheetTree.py(131):         self.children = []
StylesheetTree.py(132):         return
StylesheetHandler.py(181):         if not self._ownerDoc:
StylesheetHandler.py(182):             self._ownerDoc = root
StylesheetHandler.py(185):         self._stylesheet = None
StylesheetHandler.py(187):         self._state_stack = [
StylesheetHandler.py(189):                        validation=root.validator.getValidation(),
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(190):                        localVariables={},
StylesheetHandler.py(191):                        forwardsCompatible=False,
StylesheetHandler.py(192):                        currentNamespaces={'xml' : XML_NAMESPACE, None : None},
StylesheetHandler.py(193):                        extensionNamespaces={},
StylesheetHandler.py(194):                        outputNamespaces={})
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(198):         self._visited_stylesheet_uris[document_uri] = True
StylesheetHandler.py(201):         self._new_namespaces = {}
StylesheetHandler.py(202):         return
 --- modulename: xmlparser, funcname: StartNamespace
 --- modulename: StylesheetHandler, funcname: startPrefixMapping
StylesheetHandler.py(210):         self._new_namespaces[prefix] = uri
StylesheetHandler.py(211):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(219):             d = state.currentNamespaces = state.currentNamespaces.copy()
StylesheetHandler.py(220):             d.update(self._new_namespaces)
StylesheetHandler.py(222):             d = state.outputNamespaces = state.outputNamespaces.copy()
StylesheetHandler.py(223):             for prefix, uri in self._new_namespaces.items():
StylesheetHandler.py(224):                 if uri not in (XML_NAMESPACE, XSL_NAMESPACE):
StylesheetHandler.py(223):             for prefix, uri in self._new_namespaces.items():
StylesheetHandler.py(228):             self._new_namespaces = {}
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(236):             try:
StylesheetHandler.py(237):                 xsl_class = _ELEMENT_CLASSES[local]
StylesheetHandler.py(238):             except KeyError:
StylesheetHandler.py(240):                 try:
StylesheetHandler.py(241):                     module = _ELEMENT_MAPPING[local]
StylesheetHandler.py(248):                     parts = module.split('.')
StylesheetHandler.py(249):                     path = '.'.join(['Ft.Xml.Xslt'] + parts[:-1])
StylesheetHandler.py(250):                     module = __import__(path, {}, {}, parts[-1:])
 --- modulename: Stylesheet, funcname: ?
Stylesheet.py(10): """
Stylesheet.py(12): import sys
Stylesheet.py(13): from xml.dom import Node, XMLNS_NAMESPACE
Stylesheet.py(15): from Ft.Xml import XPath
Stylesheet.py(16): from Ft.Xml.XPath import Conversions
Stylesheet.py(17): from Ft.Xml.Xslt import XSL_NAMESPACE, XsltElement, XsltException, Error
Stylesheet.py(18): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
Stylesheet.py(19): from Ft.Xml.Xslt import XsltContext, PatternList
Stylesheet.py(20): from Ft.Xml.Xslt import OutputParameters, MessageSource
Stylesheet.py(21): from Ft.Xml.Xslt.LiteralElement import LiteralElement
Stylesheet.py(23): __all__ = ['MatchTree', 'StylesheetElement']
Stylesheet.py(25): def MatchTree(patterns, context):
Stylesheet.py(57): class StylesheetElement(XsltElement):
 --- modulename: Stylesheet, funcname: StylesheetElement
Stylesheet.py(57): class StylesheetElement(XsltElement):
Stylesheet.py(58):     category = None
Stylesheet.py(59):     content = ContentInfo.Seq(
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
Stylesheet.py(61):         ContentInfo.TopLevelElements)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(28):         self.args = []
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(33):         return
Stylesheet.py(62):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
Stylesheet.py(70):     doesSetup = doesPrime = doesIdle = 0
Stylesheet.py(72):     def __init__(self, root, namespaceUri, localName, baseUri):
Stylesheet.py(77):     def reset1(self):
Stylesheet.py(84):     def reset2(self):
Stylesheet.py(91):     def setup(self):
Stylesheet.py(136):     def _setupNamespaceAliases(self, aliases):
Stylesheet.py(156):     def _setupDecimalFormats(self, decimal_formats):
Stylesheet.py(179):     def _setupWhitespaceRules(self, space_rules):
Stylesheet.py(207):     def _setupOutput(self, outputs):
Stylesheet.py(213):     def _setupTemplates(self, templates):
Stylesheet.py(300):     def _setupKeys(self, keys):
Stylesheet.py(304):     def _setupLiteralElements(self, node):
Stylesheet.py(311):     def _setupTopLevelVarParams(self, global_vars):
Stylesheet.py(323):     def primeStylesheet(self, contextNode, processor, topLevelParams, docUri):
Stylesheet.py(364):     def _computeGlobalVar(self, vname, context, processed, deferred,
Stylesheet.py(431):     def updateKey(self, doc, keyName, processor):
Stylesheet.py(474):     def updateAllKeys(self, context, processor):
Stylesheet.py(486):     def idle(self, contextNode, processor, baseUri=None):
Stylesheet.py(492):     def reset(self):
Stylesheet.py(505):     def getNamedTemplates(self):
Stylesheet.py(508):     def getGlobalVariables(self):
Stylesheet.py(511):     def getInitialFunctions(self):
Stylesheet.py(514):     def applyTemplates(self, context, processor, params=None, maxImport=None):
Stylesheet.py(631):     def __getstate__(self):
StylesheetHandler.py(251):                     try:
StylesheetHandler.py(252):                         xsl_class = module.__dict__[parts[-1]]
StylesheetHandler.py(255):                 _ELEMENT_CLASSES[local] = xsl_class
StylesheetHandler.py(256):                 _LEGAL_ATTRS[xsl_class] = xsl_class.legalAttrs.items()
StylesheetHandler.py(257):                 xsl_class.validator = ContentInfo.Validator(xsl_class.content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(42):         s1 = initial
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(44):             s2 = {}
ContentInfo.py(45):             arg.buildValidator(validator, s1, s2)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(46):             s1 = s2
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(47):         self.args[-1].buildValidator(validator, s1, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(74):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(48):         return
ContentInfo.py(208):         return
StylesheetHandler.py(258):             category = xsl_class.category
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(280):             next = None
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(282):             next = state.validation.get(expandedName)
StylesheetHandler.py(283):             if next is None and validation_else in state.validation:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: Stylesheet, funcname: __init__
Stylesheet.py(73):         XsltElement.__init__(self, root, namespaceUri, localName, baseUri)
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
Stylesheet.py(74):         self.reset1()
 --- modulename: Stylesheet, funcname: reset1
Stylesheet.py(78):         self.matchTemplates = {}
Stylesheet.py(79):         self.namedTemplates = {}
Stylesheet.py(80):         self.globalVars = {}
Stylesheet.py(81):         self.initialFunctions = {}
Stylesheet.py(82):         return
Stylesheet.py(75):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(321):             inst_dict = instance.__dict__
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(521):         if value is None:
AttributeInfo.py(522):             return []
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(339):                     self._stylesheet = instance
StylesheetHandler.py(340):                     self._handle_standard_attr(state, instance, attr_name,
StylesheetHandler.py(341):                                                value)
 --- modulename: StylesheetHandler, funcname: _handle_standard_attr
StylesheetHandler.py(593):         if name == 'extension-element-prefixes':
StylesheetHandler.py(611):         elif name == 'exclude-result-prefixes':
StylesheetHandler.py(613):             out = state.outputNamespaces = state.outputNamespaces.copy()
StylesheetHandler.py(614):             for prefix in value:
StylesheetHandler.py(633):         return
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(521):         if value is None:
AttributeInfo.py(522):             return []
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(339):                     self._stylesheet = instance
StylesheetHandler.py(340):                     self._handle_standard_attr(state, instance, attr_name,
StylesheetHandler.py(341):                                                value)
 --- modulename: StylesheetHandler, funcname: _handle_standard_attr
StylesheetHandler.py(593):         if name == 'extension-element-prefixes':
StylesheetHandler.py(595):             ext = state.extensionNamespaces = state.extensionNamespaces.copy()
StylesheetHandler.py(596):             out = state.outputNamespaces = state.outputNamespaces.copy()
StylesheetHandler.py(597):             for prefix in value:
StylesheetHandler.py(633):         return
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(202):         if value is None:
AttributeInfo.py(203):             return self.default
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(339):                     self._stylesheet = instance
StylesheetHandler.py(340):                     self._handle_standard_attr(state, instance, attr_name,
StylesheetHandler.py(341):                                                value)
 --- modulename: StylesheetHandler, funcname: _handle_standard_attr
StylesheetHandler.py(593):         if name == 'extension-element-prefixes':
StylesheetHandler.py(611):         elif name == 'exclude-result-prefixes':
StylesheetHandler.py(625):         elif name == 'version':
StylesheetHandler.py(630):             if '-' in name:
StylesheetHandler.py(632):             instance.__dict__['_' + name] = value
StylesheetHandler.py(633):         return
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(325):                     value = attribs[attr_expanded]
StylesheetHandler.py(326):                     del attribs[attr_expanded]
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(164):         if value is None:
AttributeInfo.py(166):         try:
AttributeInfo.py(167):             return float(value or self.default)
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(339):                     self._stylesheet = instance
StylesheetHandler.py(340):                     self._handle_standard_attr(state, instance, attr_name,
StylesheetHandler.py(341):                                                value)
 --- modulename: StylesheetHandler, funcname: _handle_standard_attr
StylesheetHandler.py(593):         if name == 'extension-element-prefixes':
StylesheetHandler.py(611):         elif name == 'exclude-result-prefixes':
StylesheetHandler.py(625):         elif name == 'version':
StylesheetHandler.py(627):             state.forwardsCompatible = (value != 1.0)
StylesheetHandler.py(628):             instance._version = value
StylesheetHandler.py(633):         return
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(347):             if attribs:
StylesheetHandler.py(350):                 for expanded in attribs:
StylesheetHandler.py(361):             if local in ('import', 'include'):
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(236):             try:
StylesheetHandler.py(237):                 xsl_class = _ELEMENT_CLASSES[local]
StylesheetHandler.py(238):             except KeyError:
StylesheetHandler.py(240):                 try:
StylesheetHandler.py(241):                     module = _ELEMENT_MAPPING[local]
StylesheetHandler.py(248):                     parts = module.split('.')
StylesheetHandler.py(249):                     path = '.'.join(['Ft.Xml.Xslt'] + parts[:-1])
StylesheetHandler.py(250):                     module = __import__(path, {}, {}, parts[-1:])
 --- modulename: TemplateElement, funcname: ?
TemplateElement.py(13): """
TemplateElement.py(15): from xml.dom import Node
TemplateElement.py(16): from Ft.Xml import EMPTY_NAMESPACE
TemplateElement.py(17): from Ft.Xml.Xslt import XsltElement, XsltException, Error, XSL_NAMESPACE
TemplateElement.py(18): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
TemplateElement.py(20): class TemplateElement(XsltElement):
 --- modulename: TemplateElement, funcname: TemplateElement
TemplateElement.py(20): class TemplateElement(XsltElement):
TemplateElement.py(21):     category = CategoryTypes.TOP_LEVEL_ELEMENT
TemplateElement.py(22):     content = ContentInfo.Seq(
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
TemplateElement.py(24):         ContentInfo.Template)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(28):         self.args = []
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(33):         return
TemplateElement.py(25):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
TemplateElement.py(32):     def getTemplateInfo(self, position):
TemplateElement.py(50):     def _printTemplateInfo(self):
TemplateElement.py(69):     def instantiate(self, context, processor, params=None):
StylesheetHandler.py(251):                     try:
StylesheetHandler.py(252):                         xsl_class = module.__dict__[parts[-1]]
StylesheetHandler.py(255):                 _ELEMENT_CLASSES[local] = xsl_class
StylesheetHandler.py(256):                 _LEGAL_ATTRS[xsl_class] = xsl_class.legalAttrs.items()
StylesheetHandler.py(257):                 xsl_class.validator = ContentInfo.Validator(xsl_class.content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(42):         s1 = initial
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(44):             s2 = {}
ContentInfo.py(45):             arg.buildValidator(validator, s1, s2)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(46):             s1 = s2
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(47):         self.args[-1].buildValidator(validator, s1, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(74):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(48):         return
ContentInfo.py(208):         return
StylesheetHandler.py(258):             category = xsl_class.category
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(278):                 next = state.validation[validation_else].get(category)
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(321):             inst_dict = instance.__dict__
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(164):         if value is None:
AttributeInfo.py(165):             return self.default
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(218):         if value is None:
AttributeInfo.py(219):             if self.default is None:
AttributeInfo.py(220):                 return None
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(325):                     value = attribs[attr_expanded]
StylesheetHandler.py(326):                     del attribs[attr_expanded]
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(462):         if value is None:
AttributeInfo.py(467):         try:
AttributeInfo.py(468):             return _xpattern_parser.parse(value)
 --- modulename: XPatterns, funcname: __init__
XPatterns.py(150):         self.priority = 0.5
 --- modulename: XPatterns, funcname: __init__
XPatterns.py(48):         self.steps = steps
XPatterns.py(49):         self.priority = 0.5
XPatterns.py(50):         return
 --- modulename: XPatterns, funcname: __init__
XPatterns.py(18):         self.patterns = patterns
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(218):         if value is None:
AttributeInfo.py(219):             if self.default is None:
AttributeInfo.py(220):                 return None
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(347):             if attribs:
StylesheetHandler.py(350):                 for expanded in attribs:
StylesheetHandler.py(361):             if local in ('import', 'include'):
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(259):         elif namespace in state.extensionNamespaces:
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(278):                 next = state.validation[validation_else].get(category)
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(365):         elif ext_class:
StylesheetHandler.py(408):             output_attrs = []
StylesheetHandler.py(409):             for expanded in attribs:
StylesheetHandler.py(424):             instance._output_namespace = namespace
StylesheetHandler.py(425):             instance._output_nss = state.outputNamespaces
StylesheetHandler.py(426):             instance._output_attrs = output_attrs
StylesheetHandler.py(429):             parent = state.node
StylesheetHandler.py(430):             if parent is self._stylesheet and \
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(259):         elif namespace in state.extensionNamespaces:
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(365):         elif ext_class:
StylesheetHandler.py(408):             output_attrs = []
StylesheetHandler.py(409):             for expanded in attribs:
StylesheetHandler.py(424):             instance._output_namespace = namespace
StylesheetHandler.py(425):             instance._output_nss = state.outputNamespaces
StylesheetHandler.py(426):             instance._output_attrs = output_attrs
StylesheetHandler.py(429):             parent = state.node
StylesheetHandler.py(430):             if parent is self._stylesheet and \
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(259):         elif namespace in state.extensionNamespaces:
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(365):         elif ext_class:
StylesheetHandler.py(408):             output_attrs = []
StylesheetHandler.py(409):             for expanded in attribs:
StylesheetHandler.py(424):             instance._output_namespace = namespace
StylesheetHandler.py(425):             instance._output_nss = state.outputNamespaces
StylesheetHandler.py(426):             instance._output_attrs = output_attrs
StylesheetHandler.py(429):             parent = state.node
StylesheetHandler.py(430):             if parent is self._stylesheet and \
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: Characters
 --- modulename: StylesheetHandler, funcname: characters
StylesheetHandler.py(505):         state = self._state_stack[-1]
StylesheetHandler.py(507):         validation = state.validation
StylesheetHandler.py(508):         token = ContentInfo.TEXT_NODE
StylesheetHandler.py(509):         next = validation.get(token)
StylesheetHandler.py(510):         if next is None and ContentInfo.ELSE in validation:
StylesheetHandler.py(512):         if next is None:
StylesheetHandler.py(525):             state.validation = next
StylesheetHandler.py(527):             node = StylesheetTree.XsltText(self._ownerDoc,
StylesheetHandler.py(528):                                            self._locator.getSystemId(),
StylesheetHandler.py(529):                                            data)
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(264):         self.root = root
StylesheetTree.py(265):         self.baseUri = baseUri
StylesheetTree.py(266):         self.data = data
StylesheetTree.py(267):         return
StylesheetHandler.py(530):             state.node.appendChild(node)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(531):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(259):         elif namespace in state.extensionNamespaces:
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(365):         elif ext_class:
StylesheetHandler.py(408):             output_attrs = []
StylesheetHandler.py(409):             for expanded in attribs:
StylesheetHandler.py(424):             instance._output_namespace = namespace
StylesheetHandler.py(425):             instance._output_nss = state.outputNamespaces
StylesheetHandler.py(426):             instance._output_attrs = output_attrs
StylesheetHandler.py(429):             parent = state.node
StylesheetHandler.py(430):             if parent is self._stylesheet and \
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(236):             try:
StylesheetHandler.py(237):                 xsl_class = _ELEMENT_CLASSES[local]
StylesheetHandler.py(238):             except KeyError:
StylesheetHandler.py(240):                 try:
StylesheetHandler.py(241):                     module = _ELEMENT_MAPPING[local]
StylesheetHandler.py(248):                     parts = module.split('.')
StylesheetHandler.py(249):                     path = '.'.join(['Ft.Xml.Xslt'] + parts[:-1])
StylesheetHandler.py(250):                     module = __import__(path, {}, {}, parts[-1:])
 --- modulename: ForEachElement, funcname: ?
ForEachElement.py(13): """
ForEachElement.py(15): from Ft.Xml import EMPTY_NAMESPACE
ForEachElement.py(16): from Ft.Xml.Xslt import XsltElement, XsltRuntimeException, Error, XSL_NAMESPACE
ForEachElement.py(17): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
ForEachElement.py(18): from Ft.Xml.Xslt.XPathExtensions import SortedExpression
ForEachElement.py(20): from Ft.Xml.Xslt.SortElement import SortElement
 --- modulename: SortElement, funcname: ?
SortElement.py(9): """
SortElement.py(11): from Ft.Lib import number
SortElement.py(12): from Ft.Xml import EMPTY_NAMESPACE
SortElement.py(13): from Ft.Xml.XPath import Conversions
SortElement.py(14): from Ft.Xml.Xslt import XsltElement
SortElement.py(16): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
SortElement.py(18): class SortElement(XsltElement):
 --- modulename: SortElement, funcname: SortElement
SortElement.py(18): class SortElement(XsltElement):
SortElement.py(19):     category = None
SortElement.py(20):     content = ContentInfo.Empty
SortElement.py(21):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
SortElement.py(27):                                               default='text'),
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(75):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(76):         self.values = values
AttributeInfo.py(77):         return
SortElement.py(29):                                           default='ascending'),
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(75):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(76):         self.values = values
AttributeInfo.py(77):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(75):         AttributeInfo.__init__(self, required, default, description)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
AttributeInfo.py(76):         self.values = values
AttributeInfo.py(77):         return
SortElement.py(33):     doesSetup = 1
SortElement.py(35):     def setup(self):
SortElement.py(47):     def makeComparer(self, order, data_type, case_order):
SortElement.py(71):     def getComparer(self, context):
SortElement.py(79):     def evaluate(self, context):
SortElement.py(85): class Descending:
 --- modulename: SortElement, funcname: Descending
SortElement.py(85): class Descending:
SortElement.py(86):     def __init__(self, comparer):
SortElement.py(89):     def __call__(self, a, b):
SortElement.py(92): def FloatCompare(a, b):
SortElement.py(108): def LowerFirstCompare(a, b):
SortElement.py(119): def UpperFirstCompare(a, b):
ForEachElement.py(22): class ForEachElement(XsltElement):
 --- modulename: ForEachElement, funcname: ForEachElement
ForEachElement.py(22): class ForEachElement(XsltElement):
ForEachElement.py(24):     category = CategoryTypes.INSTRUCTION
ForEachElement.py(25):     content = ContentInfo.Seq(
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(157):         self.qualifiedName = qualifiedName
ContentInfo.py(158):         index = qualifiedName.rfind(':')
ContentInfo.py(159):         if index == -1:
ContentInfo.py(162):             local = qualifiedName[index+1:]
ContentInfo.py(163):         Atom.__init__(self, (namespaceUri, local))
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(15):         self.token = token
ContentInfo.py(164):         return
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(123):         if isinstance(arg, type('')):
ContentInfo.py(125):         self.arg = arg
ContentInfo.py(126):         return
ForEachElement.py(27):         ContentInfo.Template)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(28):         self.args = []
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(30):             if isinstance(arg, type('')):
ContentInfo.py(32):             self.args.append(arg)
ContentInfo.py(29):         for arg in args:
ContentInfo.py(33):         return
ForEachElement.py(28):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
ForEachElement.py(32):     doesSetup = 1
ForEachElement.py(34):     def setup(self):
ForEachElement.py(40):     def instantiate(self, context, processor):
StylesheetHandler.py(251):                     try:
StylesheetHandler.py(252):                         xsl_class = module.__dict__[parts[-1]]
StylesheetHandler.py(255):                 _ELEMENT_CLASSES[local] = xsl_class
StylesheetHandler.py(256):                 _LEGAL_ATTRS[xsl_class] = xsl_class.legalAttrs.items()
StylesheetHandler.py(257):                 xsl_class.validator = ContentInfo.Validator(xsl_class.content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(42):         s1 = initial
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(44):             s2 = {}
ContentInfo.py(45):             arg.buildValidator(validator, s1, s2)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(46):             s1 = s2
ContentInfo.py(43):         for arg in self.args[:-1]:
ContentInfo.py(47):         self.args[-1].buildValidator(validator, s1, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(132):         self.arg.buildValidator(validator, initial, initial)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(73):             arg.buildValidator(validator, initial, final)
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(72):         for arg in self.args:
ContentInfo.py(74):         return
ContentInfo.py(133):         validator.transition(ELSE, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(134):         return
ContentInfo.py(48):         return
ContentInfo.py(208):         return
StylesheetHandler.py(258):             category = xsl_class.category
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(321):             inst_dict = instance.__dict__
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(325):                     value = attribs[attr_expanded]
StylesheetHandler.py(326):                     del attribs[attr_expanded]
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(430):         if value is None:
AttributeInfo.py(434):         try:
AttributeInfo.py(435):             expression = _xpath_parser.parse(value)
 --- modulename: ParsedAxisSpecifier, funcname: ParsedAxisSpecifier
ParsedAxisSpecifier.py(16):     try:
ParsedAxisSpecifier.py(17):         return g_classMap[axis](axis)
 --- modulename: ParsedAxisSpecifier, funcname: __init__
ParsedAxisSpecifier.py(27):         self._axis = axis
 --- modulename: ParsedNodeTest, funcname: ParsedNameTest
ParsedNodeTest.py(18):     if name == '*':
ParsedNodeTest.py(20):     index = name.find(':')
ParsedNodeTest.py(21):     if index == -1:
ParsedNodeTest.py(22):         return LocalNameTest(name)
 --- modulename: ParsedNodeTest, funcname: __init__
ParsedNodeTest.py(137):         self.priority = 0
ParsedNodeTest.py(138):         self._name = name
 --- modulename: ParsedStep, funcname: __init__
ParsedStep.py(18):         self._axis = axis
ParsedStep.py(19):         self._nodeTest = nodeTest
ParsedStep.py(20):         self._predicates = predicates
ParsedStep.py(21):         return
 --- modulename: ParsedAxisSpecifier, funcname: ParsedAxisSpecifier
ParsedAxisSpecifier.py(16):     try:
ParsedAxisSpecifier.py(17):         return g_classMap[axis](axis)
 --- modulename: ParsedAxisSpecifier, funcname: __init__
ParsedAxisSpecifier.py(27):         self._axis = axis
 --- modulename: ParsedNodeTest, funcname: ParsedNameTest
ParsedNodeTest.py(18):     if name == '*':
ParsedNodeTest.py(20):     index = name.find(':')
ParsedNodeTest.py(21):     if index == -1:
ParsedNodeTest.py(22):         return LocalNameTest(name)
 --- modulename: ParsedNodeTest, funcname: __init__
ParsedNodeTest.py(137):         self.priority = 0
ParsedNodeTest.py(138):         self._name = name
 --- modulename: ParsedStep, funcname: __init__
ParsedStep.py(18):         self._axis = axis
ParsedStep.py(19):         self._nodeTest = nodeTest
ParsedStep.py(20):         self._predicates = predicates
ParsedStep.py(21):         return
 --- modulename: ParsedRelativeLocationPath, funcname: __init__
ParsedRelativeLocationPath.py(13):         self._left = left
ParsedRelativeLocationPath.py(14):         self._right = right
ParsedRelativeLocationPath.py(15):         return
AttributeInfo.py(440):         return ExpressionWrapper(expression, element, value)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(371):         self.expression = expression
AttributeInfo.py(372):         self.element = element
AttributeInfo.py(373):         self.original = original
AttributeInfo.py(374):         return
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(347):             if attribs:
StylesheetHandler.py(350):                 for expanded in attribs:
StylesheetHandler.py(361):             if local in ('import', 'include'):
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(259):         elif namespace in state.extensionNamespaces:
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(278):                 next = state.validation[validation_else].get(category)
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(365):         elif ext_class:
StylesheetHandler.py(408):             output_attrs = []
StylesheetHandler.py(409):             for expanded in attribs:
StylesheetHandler.py(424):             instance._output_namespace = namespace
StylesheetHandler.py(425):             instance._output_nss = state.outputNamespaces
StylesheetHandler.py(426):             instance._output_attrs = output_attrs
StylesheetHandler.py(429):             parent = state.node
StylesheetHandler.py(430):             if parent is self._stylesheet and \
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(236):             try:
StylesheetHandler.py(237):                 xsl_class = _ELEMENT_CLASSES[local]
StylesheetHandler.py(238):             except KeyError:
StylesheetHandler.py(240):                 try:
StylesheetHandler.py(241):                     module = _ELEMENT_MAPPING[local]
StylesheetHandler.py(248):                     parts = module.split('.')
StylesheetHandler.py(249):                     path = '.'.join(['Ft.Xml.Xslt'] + parts[:-1])
StylesheetHandler.py(250):                     module = __import__(path, {}, {}, parts[-1:])
 --- modulename: ValueOfElement, funcname: ?
ValueOfElement.py(9): """
ValueOfElement.py(11): from Ft.Xml.Xslt import XsltElement
ValueOfElement.py(12): from Ft.Xml.Xslt import CategoryTypes, ContentInfo, AttributeInfo
ValueOfElement.py(13): from Ft.Xml.XPath import Conversions
ValueOfElement.py(15): class ValueOfElement(XsltElement):
 --- modulename: ValueOfElement, funcname: ValueOfElement
ValueOfElement.py(15): class ValueOfElement(XsltElement):
ValueOfElement.py(16):     category = CategoryTypes.INSTRUCTION
ValueOfElement.py(17):     content = ContentInfo.Empty
ValueOfElement.py(18):     legalAttrs = {
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(37):         self.required = required
AttributeInfo.py(38):         self.default = default
AttributeInfo.py(39):         self.description = description
AttributeInfo.py(40):         return
ValueOfElement.py(23):     def instantiate(self, context, processor):
StylesheetHandler.py(251):                     try:
StylesheetHandler.py(252):                         xsl_class = module.__dict__[parts[-1]]
StylesheetHandler.py(255):                 _ELEMENT_CLASSES[local] = xsl_class
StylesheetHandler.py(256):                 _LEGAL_ATTRS[xsl_class] = xsl_class.legalAttrs.items()
StylesheetHandler.py(257):                 xsl_class.validator = ContentInfo.Validator(xsl_class.content)
 --- modulename: ContentInfo, funcname: __init__
ContentInfo.py(203):         if expr is None:
ContentInfo.py(205):         self._expr = expr
ContentInfo.py(206):         self._initial = {}
ContentInfo.py(207):         expr.buildValidator(self, self._initial, {})
 --- modulename: ContentInfo, funcname: buildValidator
ContentInfo.py(18):         validator.transition(self.token, initial, final)
 --- modulename: ContentInfo, funcname: transition
ContentInfo.py(214):         state = state1.get(token)
ContentInfo.py(215):         if not state:
ContentInfo.py(217):             state1[token] = state2
ContentInfo.py(224):         return
ContentInfo.py(19):         return
ContentInfo.py(208):         return
StylesheetHandler.py(258):             category = xsl_class.category
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(321):             inst_dict = instance.__dict__
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(539):         if value is None:
AttributeInfo.py(540):             return self.default and self.default == 'yes'
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(344):                         attr_name = attr_name.replace('-', '_')
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(325):                     value = attribs[attr_expanded]
StylesheetHandler.py(326):                     del attribs[attr_expanded]
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(430):         if value is None:
AttributeInfo.py(434):         try:
AttributeInfo.py(435):             expression = _xpath_parser.parse(value)
 --- modulename: ParsedAxisSpecifier, funcname: ParsedAxisSpecifier
ParsedAxisSpecifier.py(16):     try:
ParsedAxisSpecifier.py(17):         return g_classMap[axis](axis)
 --- modulename: ParsedAxisSpecifier, funcname: __init__
ParsedAxisSpecifier.py(27):         self._axis = axis
 --- modulename: ParsedNodeTest, funcname: ParsedNameTest
ParsedNodeTest.py(18):     if name == '*':
ParsedNodeTest.py(20):     index = name.find(':')
ParsedNodeTest.py(21):     if index == -1:
ParsedNodeTest.py(22):         return LocalNameTest(name)
 --- modulename: ParsedNodeTest, funcname: __init__
ParsedNodeTest.py(137):         self.priority = 0
ParsedNodeTest.py(138):         self._name = name
 --- modulename: ParsedStep, funcname: __init__
ParsedStep.py(18):         self._axis = axis
ParsedStep.py(19):         self._nodeTest = nodeTest
ParsedStep.py(20):         self._predicates = predicates
ParsedStep.py(21):         return
AttributeInfo.py(440):         return ExpressionWrapper(expression, element, value)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(371):         self.expression = expression
AttributeInfo.py(372):         self.element = element
AttributeInfo.py(373):         self.original = original
AttributeInfo.py(374):         return
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(347):             if attribs:
StylesheetHandler.py(350):                 for expanded in attribs:
StylesheetHandler.py(361):             if local in ('import', 'include'):
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: StartElement
 --- modulename: StylesheetHandler, funcname: startElementNS
StylesheetHandler.py(214):         state = ParseState(**self._state_stack[-1].__dict__)
 --- modulename: StylesheetHandler, funcname: __init__
StylesheetHandler.py(97):         self.node = node
StylesheetHandler.py(98):         self.validation = validation
StylesheetHandler.py(99):         self.localVariables = localVariables
StylesheetHandler.py(100):         self.forwardsCompatible = forwardsCompatible
StylesheetHandler.py(101):         self.currentNamespaces = currentNamespaces
StylesheetHandler.py(102):         self.extensionNamespaces = extensionNamespaces
StylesheetHandler.py(103):         self.outputNamespaces = outputNamespaces
StylesheetHandler.py(104):         return
StylesheetHandler.py(218):         if self._new_namespaces:
StylesheetHandler.py(232):         namespace, local = expandedName
StylesheetHandler.py(233):         xsl_class = ext_class = None
StylesheetHandler.py(234):         category = CategoryTypes.RESULT_ELEMENT
StylesheetHandler.py(235):         if namespace == XSL_NAMESPACE:
StylesheetHandler.py(236):             try:
StylesheetHandler.py(237):                 xsl_class = _ELEMENT_CLASSES[local]
StylesheetHandler.py(258):             category = xsl_class.category
StylesheetHandler.py(274):         validation_else = ContentInfo.ELSE
StylesheetHandler.py(275):         if category is not None:
StylesheetHandler.py(276):             next = state.validation.get(category)
StylesheetHandler.py(277):             if next is None and validation_else in state.validation:
StylesheetHandler.py(281):         if next is None:
StylesheetHandler.py(285):         if next is None:
StylesheetHandler.py(305):             self._state_stack[-1].validation = next
StylesheetHandler.py(309):         klass = (xsl_class or ext_class or LiteralElement)
StylesheetHandler.py(310):         instance = klass(self._ownerDoc, namespace, local,
StylesheetHandler.py(311):                          self._locator.getSystemId())
 --- modulename: StylesheetTree, funcname: __init__
StylesheetTree.py(154):         self.root = root
StylesheetTree.py(155):         self.baseUri = baseUri
StylesheetTree.py(156):         self.expandedName = (namespaceUri, localName)
StylesheetTree.py(157):         self.children = []
StylesheetTree.py(158):         self.attributes = {}
StylesheetTree.py(159):         self.namespaces = {}
StylesheetTree.py(160):         return
StylesheetHandler.py(312):         instance.lineNumber = self._locator.getLineNumber()
StylesheetHandler.py(313):         instance.columnNumber = self._locator.getColumnNumber()
StylesheetHandler.py(314):         instance.importIndex = self._import_index
StylesheetHandler.py(315):         instance.namespaces = state.currentNamespaces
StylesheetHandler.py(316):         instance.nodeName = qualifiedName
StylesheetHandler.py(319):         if xsl_class:
StylesheetHandler.py(321):             inst_dict = instance.__dict__
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(327):                 elif attr_info.required:
StylesheetHandler.py(332):                     value = None
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(539):         if value is None:
AttributeInfo.py(540):             return self.default and self.default == 'yes'
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(344):                         attr_name = attr_name.replace('-', '_')
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(323):                 attr_expanded = (None, attr_name)
StylesheetHandler.py(324):                 if attr_expanded in attribs:
StylesheetHandler.py(325):                     value = attribs[attr_expanded]
StylesheetHandler.py(326):                     del attribs[attr_expanded]
StylesheetHandler.py(333):                 try:
StylesheetHandler.py(334):                     value = attr_info.prepare(instance, value)
 --- modulename: AttributeInfo, funcname: prepare
AttributeInfo.py(430):         if value is None:
AttributeInfo.py(434):         try:
AttributeInfo.py(435):             expression = _xpath_parser.parse(value)
 --- modulename: ParsedAxisSpecifier, funcname: ParsedAxisSpecifier
ParsedAxisSpecifier.py(16):     try:
ParsedAxisSpecifier.py(17):         return g_classMap[axis](axis)
 --- modulename: ParsedAxisSpecifier, funcname: __init__
ParsedAxisSpecifier.py(27):         self._axis = axis
 --- modulename: ParsedNodeTest, funcname: ParsedNameTest
ParsedNodeTest.py(18):     if name == '*':
ParsedNodeTest.py(20):     index = name.find(':')
ParsedNodeTest.py(21):     if index == -1:
ParsedNodeTest.py(22):         return LocalNameTest(name)
 --- modulename: ParsedNodeTest, funcname: __init__
ParsedNodeTest.py(137):         self.priority = 0
ParsedNodeTest.py(138):         self._name = name
 --- modulename: ParsedStep, funcname: __init__
ParsedStep.py(18):         self._axis = axis
ParsedStep.py(19):         self._nodeTest = nodeTest
ParsedStep.py(20):         self._predicates = predicates
ParsedStep.py(21):         return
AttributeInfo.py(440):         return ExpressionWrapper(expression, element, value)
 --- modulename: AttributeInfo, funcname: __init__
AttributeInfo.py(371):         self.expression = expression
AttributeInfo.py(372):         self.element = element
AttributeInfo.py(373):         self.original = original
AttributeInfo.py(374):         return
StylesheetHandler.py(338):                 if local in ('stylesheet', 'transform'):
StylesheetHandler.py(343):                     if '-' in attr_name:
StylesheetHandler.py(345):                     inst_dict['_' + attr_name] = value
StylesheetHandler.py(322):             for attr_name, attr_info in _LEGAL_ATTRS[xsl_class]:
StylesheetHandler.py(347):             if attribs:
StylesheetHandler.py(350):                 for expanded in attribs:
StylesheetHandler.py(361):             if local in ('import', 'include'):
StylesheetHandler.py(438):         state.node = instance
StylesheetHandler.py(439):         state.validation = instance.validator.getValidation()
 --- modulename: ContentInfo, funcname: getValidation
ContentInfo.py(227):         return self._initial
StylesheetHandler.py(440):         self._state_stack.append(state)
StylesheetHandler.py(442):         if instance.doesPrime:
StylesheetHandler.py(444):         if instance.doesIdle:
StylesheetHandler.py(446):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(173):             child.setup()
 --- modulename: ForEachElement, funcname: setup
ForEachElement.py(35):         sort_keys = filter(lambda x: isinstance(x, SortElement), self.children)
 --- modulename: ForEachElement, funcname: <lambda>
ForEachElement.py(35):         sort_keys = filter(lambda x: isinstance(x, SortElement), self.children)
ForEachElement.py(36):         if sort_keys:
ForEachElement.py(38):         return
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(170):         self.children.append(child)
StylesheetTree.py(171):         child.parent = self
StylesheetTree.py(172):         if child.doesSetup:
StylesheetTree.py(174):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndElement
 --- modulename: StylesheetHandler, funcname: endElementNS
StylesheetHandler.py(449):         state = self._state_stack.pop()
StylesheetHandler.py(450):         element = state.node
StylesheetHandler.py(451):         if len(self._state_stack) == 1 and isinstance(element, LiteralElement):
StylesheetHandler.py(474):             self._state_stack[-1].node.appendChild(element)
 --- modulename: StylesheetTree, funcname: appendChild
StylesheetTree.py(136):         child.parent = self
StylesheetTree.py(137):         self.stylesheet = child
StylesheetTree.py(138):         self.children = [child]
StylesheetTree.py(139):         return
StylesheetHandler.py(476):             if expandedName in ((XSL_NAMESPACE, u'variable'),
StylesheetHandler.py(502):         return
 --- modulename: xmlparser, funcname: EndDocument
 --- modulename: StylesheetHandler, funcname: endDocument
StylesheetHandler.py(205):         self._import_index += 1
StylesheetHandler.py(206):         self._locator = None
StylesheetHandler.py(207):         return
StylesheetReader.py(204):         self._input_source = None
StylesheetReader.py(206):         root = self._state_stack[0].node
StylesheetReader.py(207):         if root is self._ownerDoc:
StylesheetReader.py(209):             root.stylesheet.setup()
 --- modulename: Stylesheet, funcname: setup
Stylesheet.py(95):         self.reset2()
 --- modulename: Stylesheet, funcname: reset2
Stylesheet.py(85):         self.outputParams = OutputParameters.OutputParameters()
 --- modulename: OutputParameters, funcname: __init__
OutputParameters.py(17):         self.method = None
OutputParameters.py(18):         self.version = None
OutputParameters.py(19):         self.encoding = None
OutputParameters.py(20):         self.omitXmlDeclaration = None
OutputParameters.py(21):         self.standalone = None
OutputParameters.py(22):         self.doctypeSystem = None
OutputParameters.py(23):         self.doctypePublic = None
OutputParameters.py(24):         self.mediaType = None
OutputParameters.py(25):         self.cdataSectionElements = []
OutputParameters.py(26):         self.indent = None
Stylesheet.py(86):         self.spaceRules = []
Stylesheet.py(87):         self.namespaceAliases = {}
Stylesheet.py(88):         self.decimalFormats = {}
Stylesheet.py(89):         return
Stylesheet.py(98):         space_rules = []
Stylesheet.py(99):         global_vars = []
Stylesheet.py(102):         top_level_elements = {
Stylesheet.py(116):         reduce(lambda ignored, child, toplevel=top_level_elements:
Stylesheet.py(119):                self.children, 'ignored')
 --- modulename: Stylesheet, funcname: <lambda>
Stylesheet.py(116):         reduce(lambda ignored, child, toplevel=top_level_elements:
Stylesheet.py(122):         self._setupNamespaceAliases(top_level_elements['namespace-alias'])
 --- modulename: Stylesheet, funcname: _setupNamespaceAliases
Stylesheet.py(137):         merged = {}
Stylesheet.py(138):         for alias in aliases:
Stylesheet.py(150):         for stylesheet_ns, alias in merged.items():
Stylesheet.py(154):         return
Stylesheet.py(123):         self._setupDecimalFormats(top_level_elements['decimal-format'])
 --- modulename: Stylesheet, funcname: _setupDecimalFormats
Stylesheet.py(157):         for df in decimal_formats:
Stylesheet.py(173):         if None not in self.decimalFormats:
Stylesheet.py(175):             self.decimalFormats[None] = ('.', ',', 'Infinity', '-', 'NaN', '%',
Stylesheet.py(177):         return
Stylesheet.py(124):         self._setupWhitespaceRules(space_rules)
 --- modulename: Stylesheet, funcname: _setupWhitespaceRules
Stylesheet.py(183):         space_rules.sort(lambda a, b: cmp(a.importIndex, b.importIndex))
Stylesheet.py(184):         merged = {}
Stylesheet.py(185):         for rule in space_rules:
Stylesheet.py(192):         star = None
Stylesheet.py(193):         prefix_star = []
Stylesheet.py(194):         for (namespace, local), strip in merged.items():
Stylesheet.py(203):         self.spaceRules.extend(prefix_star)
Stylesheet.py(204):         star and self.spaceRules.append(star)
Stylesheet.py(205):         return
Stylesheet.py(125):         self._setupOutput(top_level_elements['output'])
 --- modulename: Stylesheet, funcname: _setupOutput
Stylesheet.py(208):         outputs.sort(lambda a, b: cmp(a.importIndex, b.importIndex))
Stylesheet.py(209):         for output in outputs:
Stylesheet.py(211):         return
Stylesheet.py(126):         self._setupTemplates(top_level_elements['template'])
 --- modulename: Stylesheet, funcname: _setupTemplates
Stylesheet.py(214):         named_tpls = self.namedTemplates
Stylesheet.py(215):         match_tpls = self.matchTemplates
Stylesheet.py(217):         shortcuts = []
Stylesheet.py(218):         for template, position in zip(templates, xrange(len(templates))):
Stylesheet.py(220):             (shorts, name) = template.getTemplateInfo(position)
 --- modulename: TemplateElement, funcname: getTemplateInfo
TemplateElement.py(33):         infos = []
TemplateElement.py(34):         if self._match:
TemplateElement.py(37):             shortcuts = self._match.getShortcuts(self.namespaces)
 --- modulename: XPatterns, funcname: getShortcuts
XPatterns.py(21):         return [ (pattern.getShortcut(), pattern.getQuickKey(namespaces))
 --- modulename: XPatterns, funcname: getShortcut
XPatterns.py(55):         if len(self.steps) == 1:
XPatterns.py(56):             (axis_type, node_test, ancestor) = self.steps[0]
XPatterns.py(57):             shortcut = (node_test, axis_type)
XPatterns.py(60):         return shortcut
 --- modulename: XPatterns, funcname: getQuickKey
XPatterns.py(63):         (axis_type, node_test, ancestor) = self.steps[0]
XPatterns.py(64):         (node_type, expanded_name) = node_test.getQuickKey(namespaces)
 --- modulename: XPatterns, funcname: getQuickKey
XPatterns.py(153):         return (Node.DOCUMENT_NODE, None)
XPatterns.py(65):         if axis_type == Node.ATTRIBUTE_NODE:
XPatterns.py(67):         return (node_type, expanded_name)
XPatterns.py(21):         return [ (pattern.getShortcut(), pattern.getQuickKey(namespaces))
TemplateElement.py(38):             for ((pattern, axis_type), quick_key) in shortcuts:
TemplateElement.py(39):                 if self._priority is None:
TemplateElement.py(40):                     priority = pattern.priority
TemplateElement.py(43):                 pattern_info = (pattern, axis_type, self)
TemplateElement.py(44):                 shortcut = (
TemplateElement.py(47):                 infos.append(shortcut)
TemplateElement.py(38):             for ((pattern, axis_type), quick_key) in shortcuts:
TemplateElement.py(48):         return (infos, self._name)
Stylesheet.py(221):             if name:
Stylesheet.py(237):             shortcuts.extend(shorts)
Stylesheet.py(218):         for template, position in zip(templates, xrange(len(templates))):
Stylesheet.py(241):         shortcuts.sort()
Stylesheet.py(243):         shortcuts.reverse()
Stylesheet.py(247):         for sort_key, template_info in shortcuts:
Stylesheet.py(248):             mode, pattern_info, (node_type, expanded_name) = template_info
Stylesheet.py(251):             pattern_info = (sort_key, pattern_info)
Stylesheet.py(253):             mode_table = match_tpls.get(mode)
Stylesheet.py(254):             if not mode_table:
Stylesheet.py(255):                 mode_table = match_tpls[mode] = {}
Stylesheet.py(257):             type_table = mode_table.get(node_type)
Stylesheet.py(258):             if not type_table:
Stylesheet.py(259):                 if node_type == Node.ELEMENT_NODE:
Stylesheet.py(264):                     mode_table[node_type] = [pattern_info]
Stylesheet.py(247):         for sort_key, template_info in shortcuts:
Stylesheet.py(278):         return
Stylesheet.py(127):         self._setupKeys(top_level_elements['key'])
 --- modulename: Stylesheet, funcname: _setupKeys
Stylesheet.py(301):         self._keys =  [ key.getKeyInfo() for key in keys ]
Stylesheet.py(302):         return
Stylesheet.py(130):         if self.namespaceAliases:
Stylesheet.py(133):         self._setupTopLevelVarParams(global_vars)
 --- modulename: Stylesheet, funcname: _setupTopLevelVarParams
Stylesheet.py(312):         self._topVariables = index, ordered = {}, []
Stylesheet.py(313):         for vp in global_vars:
Stylesheet.py(319):         return
Stylesheet.py(134):         return
StylesheetReader.py(211):         return root.stylesheet
StylesheetReader.py(184):         self._ownerDoc.sources[uri] = content
StylesheetReader.py(186):         return stylesheet
Processor.py(282):         self.__add_stylesheet(stylesheet)
 --- modulename: Processor, funcname: __add_stylesheet
Processor.py(255):         if self.stylesheet:
Processor.py(265):             self.stylesheet = stylesheet
Processor.py(267):         self.outputParams = self.stylesheet.outputParams
Processor.py(268):         return
Processor.py(283):         return
test4suite.py(12): html = xsltproc.run(DefaultFactory.fromUri("file:///home/t0rt00se/Travail/SILR3/pTrans/testset/persons.xml"))
 --- modulename: InputSource, funcname: fromUri
InputSource.py(311):         if self.catalog:
InputSource.py(312):             uri = self._resolveFromCatalog(uri)
 --- modulename: InputSource, funcname: _resolveFromCatalog
InputSource.py(349):         if uri in self.catalog.uris:
InputSource.py(351):         return uri
InputSource.py(313):         src = self.fromStream(*(None, uri) + v_args, **kw_args)
 --- modulename: InputSource, funcname: fromStream
InputSource.py(334):         if not uri:
InputSource.py(337):         kw_args['factory'] = self
InputSource.py(338):         if 'resolver' not in kw_args: kw_args['resolver'] = self.resolver
InputSource.py(339):         if 'catalog' not in kw_args: kw_args['catalog'] = self.catalog
InputSource.py(340):         return self._klass(*(stream, uri) + v_args, **kw_args)
 --- modulename: InputSource, funcname: __init__
InputSource.py(47):         if uri:
InputSource.py(48):             self.uri = uri
InputSource.py(51):         self.stream = stream
InputSource.py(52):         self.processIncludes = processIncludes
InputSource.py(53):         self.stripElements = stripElements or []
InputSource.py(54):         self.factory = factory
InputSource.py(55):         self.fragment = Uri.SplitFragment(self.uri)[1]
 --- modulename: Uri, funcname: SplitFragment
Uri.py(294):     pos = uri.rfind('#')
Uri.py(295):     if pos == -1:
Uri.py(296):         return (uri, uri[:0])
InputSource.py(56):         self._resolver = resolver
InputSource.py(57):         self._catalog = catalog
InputSource.py(58):         enc = self._getStreamEncoding(stream)
 --- modulename: InputSource, funcname: _getStreamEncoding
InputSource.py(94):         stream_url = getattr(stream, 'url', None)
InputSource.py(95):         if stream_url is None:
InputSource.py(96):             return None
InputSource.py(59):         if enc is None:
InputSource.py(60):             enc = encoding
InputSource.py(61):         self.encoding = enc
InputSource.py(62):         self.name = self.uri
InputSource.py(63):         return
InputSource.py(314):         stream = src._openStream(src.uri)
 --- modulename: InputSource, funcname: _openStream
InputSource.py(208):         try:
InputSource.py(209):             return self.getUriResolver().resolve(uri)
 --- modulename: InputSource, funcname: getUriResolver
InputSource.py(162):         return self._resolver
 --- modulename: Uri, funcname: resolve
Uri.py(836):         if baseUri is not None:
Uri.py(840):             scheme = GetScheme(uri)
 --- modulename: Uri, funcname: GetScheme
Uri.py(998):     m = SCHEME_PATTERN.match(uriRef)
Uri.py(999):     if m is None:
Uri.py(1002):         return m.group(1)
Uri.py(842):             if scheme not in self.supportedSchemes:
Uri.py(857):         if scheme == 'file':
Uri.py(858):             path = UriToOsPath(uri, attemptAbsolute=False)
 --- modulename: Uri, funcname: UriToOsPath
Uri.py(1340):     (scheme, authority, path) = SplitUriRef(uri)[0:3]
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(1341):     if scheme and scheme != 'file':
Uri.py(1344):     if authority == 'localhost':
Uri.py(1346):     osname = osname or os.name
Uri.py(1348):     if osname == 'nt':
Uri.py(1411):     elif osname == 'posix':
Uri.py(1413):         if authority:
Uri.py(1420):         path = PercentDecode(re.sub('%2[fF]', '\\/', path))
 --- modulename: Uri, funcname: PercentDecode
Uri.py(491):     is_unicode = isinstance(s, unicode)
Uri.py(492):     if is_unicode:
Uri.py(495):         mychr = chr
Uri.py(496):     list_ = s.split('%')
Uri.py(497):     res = [list_[0]]
Uri.py(498):     myappend = res.append
Uri.py(499):     del list_[0]
Uri.py(500):     for item in list_:
Uri.py(514):     s = ''.join(res)
Uri.py(523):     if is_unicode:
Uri.py(525):     return s
Uri.py(1422):         if attemptAbsolute and osname == os.name and not os.path.isabs(path):
Uri.py(1425):         return path
Uri.py(859):             try:
Uri.py(860):                 stream = open(path, 'rb')
Uri.py(873):         return stream
InputSource.py(315):         return src.clone(stream, src.uri)
 --- modulename: InputSource, funcname: clone
InputSource.py(223):         if uri is None:
InputSource.py(225):         if stream is None:
InputSource.py(227):         if hint == 'new stream':
InputSource.py(231):             enc = self.encoding
InputSource.py(232):         return self.__class__(stream, uri,
InputSource.py(233):                               processIncludes=self.processIncludes,
InputSource.py(234):                               stripElements=self.stripElements,
InputSource.py(235):                               factory=self.factory, resolver=self._resolver,
InputSource.py(236):                               catalog=self._catalog, encoding=enc)
 --- modulename: InputSource, funcname: __init__
InputSource.py(47):         if uri:
InputSource.py(48):             self.uri = uri
InputSource.py(51):         self.stream = stream
InputSource.py(52):         self.processIncludes = processIncludes
InputSource.py(53):         self.stripElements = stripElements or []
InputSource.py(54):         self.factory = factory
InputSource.py(55):         self.fragment = Uri.SplitFragment(self.uri)[1]
 --- modulename: Uri, funcname: SplitFragment
Uri.py(294):     pos = uri.rfind('#')
Uri.py(295):     if pos == -1:
Uri.py(296):         return (uri, uri[:0])
InputSource.py(56):         self._resolver = resolver
InputSource.py(57):         self._catalog = catalog
InputSource.py(58):         enc = self._getStreamEncoding(stream)
 --- modulename: InputSource, funcname: _getStreamEncoding
InputSource.py(94):         stream_url = getattr(stream, 'url', None)
InputSource.py(95):         if stream_url is None:
InputSource.py(96):             return None
InputSource.py(59):         if enc is None:
InputSource.py(60):             enc = encoding
InputSource.py(61):         self.encoding = enc
InputSource.py(62):         self.name = self.uri
InputSource.py(63):         return
 --- modulename: Processor, funcname: run
Processor.py(372):         ns = self.getStripElements()
 --- modulename: Processor, funcname: getStripElements
Processor.py(149):         if self.stylesheet:
Processor.py(150):             return self.stylesheet.spaceRules
Processor.py(373):         for s in iSrc.stripElements:
Processor.py(375):         iSrc.stripElements = ns
Processor.py(376):         try:
Processor.py(377):             src = self._docReader.parse(iSrc)
 --- modulename: Domlette, funcname: parse
Domlette.py(103):         if not isinstance(inputSource, InputSource.InputSource):
Domlette.py(106):         return self.parseMethod(inputSource, *self.args, **self.kwargs)
Processor.py(381):         if not ignorePis and self.__checkStylesheetPis(src, iSrc):
 --- modulename: Processor, funcname: __checkStylesheetPis
Processor.py(582):         root = node.rootNode
Processor.py(583):         c = 1 # count of alternates, +1
Processor.py(584):         found_nonalt = 0
Processor.py(585):         stys = []
Processor.py(586):         for child in root.childNodes:
Processor.py(588):             if child.nodeType == Node.ELEMENT_NODE:
Processor.py(589):                 break
Processor.py(623):         stys.sort(self.__cmp_stys)
Processor.py(632):         hrefs = []
Processor.py(633):         last_level = -1
Processor.py(635):         for sty in stys:
Processor.py(647):         if hrefs:
Processor.py(657):         return not not hrefs
Processor.py(392):         return self.execute(src, iSrc, ignorePis, topLevelParams,
Processor.py(393):                             writer, outputStream)
 --- modulename: Processor, funcname: execute
Processor.py(675):         topLevelParams = topLevelParams or {}
Processor.py(677):         self.attributeSets = {}
Processor.py(678):         self.keys = {}
Processor.py(681):         self.chainTo = None
Processor.py(682):         self.chainParams = None
Processor.py(684):         if not self.stylesheet:
Processor.py(689):         internalStream = writer is None and outputStream is None
Processor.py(691):         if not writer:
Processor.py(693):             outputStream = outputStream or cStringIO.StringIO()
Processor.py(694):             writer = OutputHandler.OutputHandler(self.outputParams,
Processor.py(695):                                                  outputStream,
Processor.py(696):                                                  self.__writerChanged)
 --- modulename: OutputHandler, funcname: __init__
OutputHandler.py(30):         self._outputParams = outputParams
OutputHandler.py(31):         self._stream = stream
OutputHandler.py(32):         self._notify = notifyFunc
OutputHandler.py(33):         self._stack = []
OutputHandler.py(34):         return
Processor.py(697):         self.writers = [writer]
Processor.py(700):         self._namedTemplates = self.stylesheet.getNamedTemplates()
 --- modulename: Stylesheet, funcname: getNamedTemplates
Stylesheet.py(506):         return self.namedTemplates.copy()
Processor.py(703):         tlp = topLevelParams.copy()
Processor.py(704):         self._normalizeParams(tlp)
 --- modulename: Processor, funcname: _normalizeParams
Processor.py(939):         def to_unicode(s):
Processor.py(954):         for k, v in params.items():
Processor.py(966):         return
Processor.py(705):         self._documentInputSource = docInputSource
Processor.py(708):         self.stylesheet.primeStylesheet(node, self, tlp, docInputSource.uri)
 --- modulename: Stylesheet, funcname: primeStylesheet
Stylesheet.py(324):         doc = contextNode.rootNode
Stylesheet.py(327):         context = XsltContext.XsltContext(doc, 1, 1,
Stylesheet.py(328):                                           processorNss=self.namespaces,
Stylesheet.py(329):                                           stylesheet=self,
Stylesheet.py(330):                                           processor=processor,
Stylesheet.py(331):                                           extFunctionMap=processor.extFunctions
 --- modulename: XsltContext, funcname: __init__
XsltContext.py(44):         Context.Context.__init__(self,
XsltContext.py(45):                                  node,
XsltContext.py(46):                                  position,
XsltContext.py(47):                                  size,
XsltContext.py(48):                                  varBindings,
XsltContext.py(49):                                  processorNss,
XsltContext.py(50):                                  extModuleList,
XsltContext.py(51):                                  extFunctionMap
 --- modulename: Context, funcname: __init__
Context.py(30):         self.node = node
Context.py(31):         self.position = position
Context.py(32):         self.size = size
Context.py(33):         self.varBindings = varBindings or {}
Context.py(34):         self.processorNss = processorNss or {}
Context.py(35):         self.processorNss.update({'xml': XML_NAMESPACE})
Context.py(37):         self._documentIndex = {}
Context.py(40):         functions = self.functions.copy()
Context.py(43):         if extModuleList:
Context.py(53):         if extFunctionMap:
Context.py(55):         self.functions = functions
Context.py(56):         return
XsltContext.py(53):         self.currentNode = currentNode
XsltContext.py(54):         self.stylesheet = stylesheet
XsltContext.py(55):         self.mode = mode
XsltContext.py(56):         self.processor = processor
XsltContext.py(57):         self.documents = UriDict()
XsltContext.py(58):         self.rtfs = []
XsltContext.py(59):         self.currentInstruction = None
XsltContext.py(60):         self.recursiveParams = None
XsltContext.py(61):         return
Stylesheet.py(334):         baseUri = docUri or getattr(context.node, 'refUri', None)
Stylesheet.py(335):         context.addDocument(doc, baseUri)
 --- modulename: XsltContext, funcname: addDocument
XsltContext.py(64):         Context.Context.addDocument(self, document)
 --- modulename: Context, funcname: addDocument
Context.py(70):         if document not in self._documentIndex:
Context.py(71):             self._documentIndex[document] = len(self._documentIndex)
Context.py(72):         return
XsltContext.py(66):         if documentUri:
XsltContext.py(67):             self.documents[documentUri] = document
 --- modulename: Uri, funcname: __setitem__
Uri.py(1626):         return super(UriDict, self).__setitem__(self._normalizekey(key), value)
 --- modulename: Uri, funcname: _normalizekey
Uri.py(1616):         key = NormalizeCase(NormalizePercentEncoding(key))
 --- modulename: Uri, funcname: NormalizePercentEncoding
Uri.py(754):     return PercentDecode(s, decodable='0123456789%s-._~' % ascii_letters)
 --- modulename: Uri, funcname: PercentDecode
Uri.py(491):     is_unicode = isinstance(s, unicode)
Uri.py(492):     if is_unicode:
Uri.py(495):         mychr = chr
Uri.py(496):     list_ = s.split('%')
Uri.py(497):     res = [list_[0]]
Uri.py(498):     myappend = res.append
Uri.py(499):     del list_[0]
Uri.py(500):     for item in list_:
Uri.py(514):     s = ''.join(res)
Uri.py(523):     if is_unicode:
Uri.py(525):     return s
 --- modulename: Uri, funcname: NormalizeCase
Uri.py(711):     if not isinstance(uriRef, (tuple, list)):
Uri.py(712):         uriRef = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(713):         tup = None
Uri.py(717):     newRef = []
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(720):             newRef.append(re.sub('%([0-9a-f][0-9a-f])',
Uri.py(721):                           lambda m: m.group(0).upper(), component))
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(723):             newRef.append(component)
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(720):             newRef.append(re.sub('%([0-9a-f][0-9a-f])',
Uri.py(721):                           lambda m: m.group(0).upper(), component))
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(723):             newRef.append(component)
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(723):             newRef.append(component)
Uri.py(718):     for component in uriRef:
Uri.py(725):     scheme = newRef[0]
Uri.py(726):     if scheme:
Uri.py(727):         scheme = scheme.lower()
Uri.py(729):     authority = newRef[1]
Uri.py(730):     if doHost:
Uri.py(740):     res = (scheme, authority, newRef[2], newRef[3], newRef[4])
Uri.py(741):     if tup:
Uri.py(744):         return UnsplitUriRef(res)
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
Uri.py(1617):         if key[:17] == 'file://localhost/':
Uri.py(1620):             return key
XsltContext.py(68):         return
Stylesheet.py(342):         for instruction in self.root.primeInstructions:
Stylesheet.py(345):         self.initialFunctions.update(context.functions)
Stylesheet.py(347):         overridden_params = {}
Stylesheet.py(348):         for split_name, value in topLevelParams.items():
Stylesheet.py(356):         for vnode in self._topVariables[1]:
Stylesheet.py(361):         return
Processor.py(711):         variables = self.stylesheet.getGlobalVariables()
 --- modulename: Stylesheet, funcname: getGlobalVariables
Stylesheet.py(509):         return self.globalVars.copy()
Processor.py(712):         functions = self.stylesheet.getInitialFunctions()
 --- modulename: Stylesheet, funcname: getInitialFunctions
Stylesheet.py(512):         return self.initialFunctions.copy()
Processor.py(713):         context = XsltContext.XsltContext(node, 1, 1, None,
Processor.py(714):                                           varBindings=variables,
Processor.py(715):                                           processor=self,
Processor.py(716):                                           extFunctionMap=functions)
 --- modulename: XsltContext, funcname: __init__
XsltContext.py(44):         Context.Context.__init__(self,
XsltContext.py(45):                                  node,
XsltContext.py(46):                                  position,
XsltContext.py(47):                                  size,
XsltContext.py(48):                                  varBindings,
XsltContext.py(49):                                  processorNss,
XsltContext.py(50):                                  extModuleList,
XsltContext.py(51):                                  extFunctionMap
 --- modulename: Context, funcname: __init__
Context.py(30):         self.node = node
Context.py(31):         self.position = position
Context.py(32):         self.size = size
Context.py(33):         self.varBindings = varBindings or {}
Context.py(34):         self.processorNss = processorNss or {}
Context.py(35):         self.processorNss.update({'xml': XML_NAMESPACE})
Context.py(37):         self._documentIndex = {}
Context.py(40):         functions = self.functions.copy()
Context.py(43):         if extModuleList:
Context.py(53):         if extFunctionMap:
Context.py(54):             functions.update(extFunctionMap)
Context.py(55):         self.functions = functions
Context.py(56):         return
XsltContext.py(53):         self.currentNode = currentNode
XsltContext.py(54):         self.stylesheet = stylesheet
XsltContext.py(55):         self.mode = mode
XsltContext.py(56):         self.processor = processor
XsltContext.py(57):         self.documents = UriDict()
XsltContext.py(58):         self.rtfs = []
XsltContext.py(59):         self.currentInstruction = None
XsltContext.py(60):         self.recursiveParams = None
XsltContext.py(61):         return
Processor.py(717):         context.documents.update(self.stylesheet.root.sourceNodes)
Processor.py(718):         context.addDocument(node, docInputSource.uri)
 --- modulename: XsltContext, funcname: addDocument
XsltContext.py(64):         Context.Context.addDocument(self, document)
 --- modulename: Context, funcname: addDocument
Context.py(70):         if document not in self._documentIndex:
Context.py(71):             self._documentIndex[document] = len(self._documentIndex)
Context.py(72):         return
XsltContext.py(66):         if documentUri:
XsltContext.py(67):             self.documents[documentUri] = document
 --- modulename: Uri, funcname: __setitem__
Uri.py(1626):         return super(UriDict, self).__setitem__(self._normalizekey(key), value)
 --- modulename: Uri, funcname: _normalizekey
Uri.py(1616):         key = NormalizeCase(NormalizePercentEncoding(key))
 --- modulename: Uri, funcname: NormalizePercentEncoding
Uri.py(754):     return PercentDecode(s, decodable='0123456789%s-._~' % ascii_letters)
 --- modulename: Uri, funcname: PercentDecode
Uri.py(491):     is_unicode = isinstance(s, unicode)
Uri.py(492):     if is_unicode:
Uri.py(495):         mychr = chr
Uri.py(496):     list_ = s.split('%')
Uri.py(497):     res = [list_[0]]
Uri.py(498):     myappend = res.append
Uri.py(499):     del list_[0]
Uri.py(500):     for item in list_:
Uri.py(514):     s = ''.join(res)
Uri.py(523):     if is_unicode:
Uri.py(525):     return s
 --- modulename: Uri, funcname: NormalizeCase
Uri.py(711):     if not isinstance(uriRef, (tuple, list)):
Uri.py(712):         uriRef = SplitUriRef(uriRef)
 --- modulename: Uri, funcname: SplitUriRef
Uri.py(221):     if not _splitUriRefSetupCompleted:
Uri.py(225):     g = SPLIT_URI_REF_PATTERN.match(uriref).groupdict()
Uri.py(226):     scheme      = g['scheme']
Uri.py(227):     authority   = g['authority']
Uri.py(228):     path        = g['path']
Uri.py(229):     query       = g['query']
Uri.py(230):     fragment    = g['fragment']
Uri.py(231):     return (scheme, authority, path, query, fragment)
Uri.py(713):         tup = None
Uri.py(717):     newRef = []
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(720):             newRef.append(re.sub('%([0-9a-f][0-9a-f])',
Uri.py(721):                           lambda m: m.group(0).upper(), component))
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(723):             newRef.append(component)
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(720):             newRef.append(re.sub('%([0-9a-f][0-9a-f])',
Uri.py(721):                           lambda m: m.group(0).upper(), component))
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(723):             newRef.append(component)
Uri.py(718):     for component in uriRef:
Uri.py(719):         if component:
Uri.py(723):             newRef.append(component)
Uri.py(718):     for component in uriRef:
Uri.py(725):     scheme = newRef[0]
Uri.py(726):     if scheme:
Uri.py(727):         scheme = scheme.lower()
Uri.py(729):     authority = newRef[1]
Uri.py(730):     if doHost:
Uri.py(740):     res = (scheme, authority, newRef[2], newRef[3], newRef[4])
Uri.py(741):     if tup:
Uri.py(744):         return UnsplitUriRef(res)
 --- modulename: Uri, funcname: UnsplitUriRef
Uri.py(239):     if not isinstance(uriRefSeq, (tuple, list)):
Uri.py(241):     (scheme, authority, path, query, fragment) = uriRefSeq
Uri.py(242):     uri = ''
Uri.py(243):     if scheme is not None:
Uri.py(244):         uri += scheme + ':'
Uri.py(245):     if authority is not None:
Uri.py(246):         uri += '//' + authority
Uri.py(247):     uri += path
Uri.py(248):     if query is not None:
Uri.py(250):     if fragment is not None:
Uri.py(252):     return uri
Uri.py(1617):         if key[:17] == 'file://localhost/':
Uri.py(1620):             return key
XsltContext.py(68):         return
Processor.py(721):         self.writers[-1].startDocument()
 --- modulename: OutputHandler, funcname: startDocument
OutputHandler.py(77):         method = self._outputParams.method
OutputHandler.py(78):         if method:
OutputHandler.py(80):         return
Processor.py(722):         self.applyTemplates(context)
 --- modulename: Processor, funcname: applyTemplates
Processor.py(753):         params = params or {}
Processor.py(754):         if not self.stylesheet.applyTemplates(context, self, params):
 --- modulename: Stylesheet, funcname: applyTemplates
Stylesheet.py(516):         node = context.currentNode = context.node
Stylesheet.py(517):         context.stylesheet = self
Stylesheet.py(522):         mode_table = self.matchTemplates.get(context.mode)
Stylesheet.py(523):         if not mode_table:
Stylesheet.py(527):         patterns = []
Stylesheet.py(528):         node_type = node.nodeType
Stylesheet.py(529):         if node_type == Node.ELEMENT_NODE:
Stylesheet.py(539):             patterns.extend(mode_table.get(node_type, []))
Stylesheet.py(543):         patterns.extend(mode_table.get(None, []))
Stylesheet.py(546):         if not patterns:
Stylesheet.py(551):         if maxImport is not None:
Stylesheet.py(555):         patterns.sort()
Stylesheet.py(556):         patterns.reverse() # highest numbers first
Stylesheet.py(562):             for sort_key, (pattern, axis_type, template) in patterns:
Stylesheet.py(563):                 context.processorNss = template.namespaces
Stylesheet.py(564):                 if pattern.match(context, context.node, axis_type):
 --- modulename: XPatterns, funcname: match
XPatterns.py(156):         return node.nodeType == Node.DOCUMENT_NODE
Stylesheet.py(566):                     del patterns
Stylesheet.py(568):                     current_variables = context.varBindings
Stylesheet.py(569):                     context.varBindings = self.globalVars
Stylesheet.py(570):                     try:
Stylesheet.py(571):                         template.instantiate(context, processor, params)
 --- modulename: TemplateElement, funcname: instantiate
TemplateElement.py(70):         params = params or {}
TemplateElement.py(72):         while 1:
TemplateElement.py(73):             context.recursiveParams = None
TemplateElement.py(75):             for child in self.children:
TemplateElement.py(76):                 if child.expandedName == (XSL_NAMESPACE, 'param'):
TemplateElement.py(83):                     child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: OutputHandler, funcname: startElement
OutputHandler.py(104):         self._stack.append(('startElement', (name, namespace) + args, kw))
OutputHandler.py(105):         if name.lower() == 'html' and namespace is EMPTY_NAMESPACE:
OutputHandler.py(106):             self._finalize(_HTML_METHOD)
 --- modulename: OutputHandler, funcname: _finalize
OutputHandler.py(38):         try:
OutputHandler.py(39):             writerClass = self._methods[method]
OutputHandler.py(46):             self._outputParams.setDefault('method', method)
 --- modulename: OutputParameters, funcname: setDefault
OutputParameters.py(34):         if not self.__dict__.has_key(attr):
OutputParameters.py(37):         if self.__dict__[attr] is None:
OutputParameters.py(38):             self.__dict__[attr] = value
OutputParameters.py(39):         return
OutputHandler.py(48):         if writerClass is XmlWriter.XmlWriter and \
OutputHandler.py(51):         writer = writerClass(self._outputParams, self._stream)
 --- modulename: XmlWriter, funcname: __init__
XmlWriter.py(31):         NullWriter.NullWriter.__init__(self, outputParams)
 --- modulename: NullWriter, funcname: __init__
NullWriter.py(30):         self._outputParams = outputParams or OutputParameters()
NullWriter.py(31):         return
XmlWriter.py(32):         self._stream = stream
XmlWriter.py(33):         self._inFirstElement = False
XmlWriter.py(34):         self._elementName = None
XmlWriter.py(35):         self._elementUri = None
XmlWriter.py(36):         self._attributes = {}
XmlWriter.py(37):         self._namespaces = [{'': EMPTY_NAMESPACE,
XmlWriter.py(40):         self._printer = None
XmlWriter.py(41):         return
OutputHandler.py(52):         if self._notify:
OutputHandler.py(53):             self._notify(writer)
 --- modulename: Processor, funcname: __writerChanged
Processor.py(818):         self.writers[-1] = newWriter
Processor.py(819):         return
OutputHandler.py(54):         writer.startDocument()
 --- modulename: HtmlWriter, funcname: startDocument
HtmlWriter.py(50):         self._outputParams.setDefault('version', '4.0')
 --- modulename: OutputParameters, funcname: setDefault
OutputParameters.py(34):         if not self.__dict__.has_key(attr):
OutputParameters.py(37):         if self.__dict__[attr] is None:
OutputParameters.py(38):             self.__dict__[attr] = value
OutputParameters.py(39):         return
HtmlWriter.py(51):         self._outputParams.setDefault('encoding', 'iso-8859-1')
 --- modulename: OutputParameters, funcname: setDefault
OutputParameters.py(34):         if not self.__dict__.has_key(attr):
OutputParameters.py(37):         if self.__dict__[attr] is None:
OutputParameters.py(38):             self.__dict__[attr] = value
OutputParameters.py(39):         return
HtmlWriter.py(52):         self._outputParams.setDefault('indent', 1)
 --- modulename: OutputParameters, funcname: setDefault
OutputParameters.py(34):         if not self.__dict__.has_key(attr):
OutputParameters.py(37):         if self.__dict__[attr] is None:
OutputParameters.py(38):             self.__dict__[attr] = value
OutputParameters.py(39):         return
HtmlWriter.py(53):         self._outputParams.setDefault('mediaType', 'text/html')
 --- modulename: OutputParameters, funcname: setDefault
OutputParameters.py(34):         if not self.__dict__.has_key(attr):
OutputParameters.py(37):         if self.__dict__[attr] is None:
OutputParameters.py(38):             self.__dict__[attr] = value
OutputParameters.py(39):         return
HtmlWriter.py(55):         encoding = self._outputParams.encoding.encode('ascii')
 --- modulename: __init__, funcname: search_function
__init__.py(72):     entry = _cache.get(encoding, _unknown)
__init__.py(73):     if entry is not _unknown:
__init__.py(83):     norm_encoding = normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(62):     if type(encoding) is types.UnicodeType:
__init__.py(67):     return '_'.join(encoding.translate(_norm_encoding_map).split())
__init__.py(84):     aliased_encoding = _aliases.get(norm_encoding) or \
__init__.py(86):     if aliased_encoding is not None:
__init__.py(90):         modnames = [norm_encoding]
__init__.py(91):     for modname in modnames:
__init__.py(92):         if not modname:
__init__.py(94):         try:
__init__.py(95):             mod = __import__(modname,
__init__.py(96):                              globals(), locals(), _import_tail)
__init__.py(100):             break
__init__.py(104):     try:
__init__.py(105):         getregentry = mod.getregentry
__init__.py(110):     if mod is None:
__init__.py(116):     entry = tuple(getregentry())
__init__.py(117):     if len(entry) != 4:
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(122):         if not callable(obj):
__init__.py(121):     for obj in entry:
__init__.py(128):     _cache[encoding] = entry
__init__.py(132):     try:
__init__.py(133):         codecaliases = mod.getaliases()
__init__.py(134):     except AttributeError:
__init__.py(135):         pass
__init__.py(142):     return entry
HtmlWriter.py(56):         version = self._outputParams.version.encode('ascii')
HtmlWriter.py(58):         if self._outputParams.indent:
HtmlWriter.py(59):             printer = HtmlPrettyPrinter.HtmlPrettyPrinter
HtmlWriter.py(62):         self._printer = printer(self._stream, encoding)
 --- modulename: HtmlPrettyPrinter, funcname: __init__
HtmlPrettyPrinter.py(32):         HtmlPrinter.__init__(self, stream, encoding)
 --- modulename: HtmlPrinter, funcname: __init__
HtmlPrinter.py(40):         XmlPrinter.__init__(self, stream, encoding)
 --- modulename: XmlPrinter, funcname: __init__
XmlPrinter.py(41):         self.stream = sw = cStreamWriter.StreamWriter(stream, encoding)
XmlPrinter.py(42):         self.encoding = encoding
XmlPrinter.py(43):         self.writeAscii = sw.writeAscii
XmlPrinter.py(44):         self.writeEncode = sw.writeEncode
XmlPrinter.py(45):         self.writeEscape = sw.writeEscape
XmlPrinter.py(46):         self._inElement = False
XmlPrinter.py(47):         return
HtmlPrinter.py(41):         self.disableOutputEscaping = 0
HtmlPrinter.py(42):         return
HtmlPrettyPrinter.py(33):         self._level = 0
HtmlPrettyPrinter.py(36):         self._isInline = [1]  # prevent newline before first element
HtmlPrettyPrinter.py(37):         self._inNoIndent = [0]
HtmlPrettyPrinter.py(38):         self._indentForbidden = 0
HtmlPrettyPrinter.py(39):         self._indentEndTag = False
HtmlPrettyPrinter.py(40):         return
HtmlWriter.py(64):         self._printer.startDocument(version)
 --- modulename: HtmlPrinter, funcname: startDocument
HtmlPrinter.py(52):         if version not in self._versionedEntities:
HtmlPrinter.py(56):         self.textEntities, self.attrEntitiesQuot, self.attrEntitiesApos = \
HtmlPrinter.py(58):         return
HtmlWriter.py(65):         return
OutputHandler.py(55):         newline = 0
OutputHandler.py(56):         for (cmd, args, kw) in self._stack:
OutputHandler.py(57):             if newline:
OutputHandler.py(60):                 newline = 1
OutputHandler.py(61):             getattr(writer, cmd)(*args, **kw)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(244):             self._printer.doctype(tagName, self._outputParams.doctypePublic,
XmlWriter.py(245):                                   self._outputParams.doctypeSystem)
 --- modulename: HtmlPrinter, funcname: doctype
HtmlPrinter.py(68):         if publicId and not systemId:
HtmlPrinter.py(75):             XmlPrinter.doctype(self, name, publicId, systemId)
 --- modulename: XmlPrinter, funcname: doctype
XmlPrinter.py(80):         if self._inElement:
XmlPrinter.py(83):         if publicId and systemId:
XmlPrinter.py(91):         elif systemId:
XmlPrinter.py(97):         return
HtmlPrinter.py(76):         return
XmlWriter.py(246):             self._inFirstElement = True
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
OutputHandler.py(56):         for (cmd, args, kw) in self._stack:
OutputHandler.py(64):         self._outputParams = None
OutputHandler.py(65):         self._stream = None
OutputHandler.py(66):         self._notify = None
OutputHandler.py(67):         self._stack = None
OutputHandler.py(68):         return
OutputHandler.py(109):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: StylesheetTree, funcname: instantiate
StylesheetTree.py(270):         processor.writers[-1].text(self.data)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
StylesheetTree.py(271):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ForEachElement, funcname: instantiate
ForEachElement.py(41):         context.processorNss = self.namespaces
ForEachElement.py(42):         context.currentInstruction = self
ForEachElement.py(44):         if self._select:
 --- modulename: AttributeInfo, funcname: __nonzero__
AttributeInfo.py(379):         return True
ForEachElement.py(45):             node_set = self._select.evaluate(context)
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedRelativeLocationPath, funcname: evaluate
ParsedRelativeLocationPath.py(18):         nodeset = self._left.select(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ParsedRelativeLocationPath.py(20):         state = context.copy()
 --- modulename: Context, funcname: copy
Context.py(82):         return (self.node, self.position, self.size)
ParsedRelativeLocationPath.py(22):         result = []
ParsedRelativeLocationPath.py(23):         size = len(nodeset)
ParsedRelativeLocationPath.py(24):         for pos in xrange(size):
ParsedRelativeLocationPath.py(25):             context.node, context.position, context.size = \
ParsedRelativeLocationPath.py(27):             result.extend(self._right.select(context))
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ParsedRelativeLocationPath.py(24):         for pos in xrange(size):
ParsedRelativeLocationPath.py(29):         context.set(state)
 --- modulename: Context, funcname: set
Context.py(85):         self.node, self.position, self.size = state
Context.py(86):         return
ParsedRelativeLocationPath.py(30):         return result
ForEachElement.py(46):             if type(node_set) != type([]):
ForEachElement.py(51):         state = context.copy()
 --- modulename: Context, funcname: copy
Context.py(82):         return (self.node, self.position, self.size)
ForEachElement.py(52):         pos = 1
ForEachElement.py(53):         size = len(node_set)
ForEachElement.py(54):         for node in node_set:
ForEachElement.py(55):             context.node, context.position, context.size = node, pos, size
ForEachElement.py(56):             context.currentNode = node
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(58):                 child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(59):             pos += 1
ForEachElement.py(54):         for node in node_set:
ForEachElement.py(55):             context.node, context.position, context.size = node, pos, size
ForEachElement.py(56):             context.currentNode = node
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(58):                 child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(59):             pos += 1
ForEachElement.py(54):         for node in node_set:
ForEachElement.py(55):             context.node, context.position, context.size = node, pos, size
ForEachElement.py(56):             context.currentNode = node
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(58):                 child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(59):             pos += 1
ForEachElement.py(54):         for node in node_set:
ForEachElement.py(55):             context.node, context.position, context.size = node, pos, size
ForEachElement.py(56):             context.currentNode = node
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(58):                 child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(59):             pos += 1
ForEachElement.py(54):         for node in node_set:
ForEachElement.py(55):             context.node, context.position, context.size = node, pos, size
ForEachElement.py(56):             context.currentNode = node
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(58):                 child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(59):             pos += 1
ForEachElement.py(54):         for node in node_set:
ForEachElement.py(55):             context.node, context.position, context.size = node, pos, size
ForEachElement.py(56):             context.currentNode = node
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(58):                 child.instantiate(context, processor)
 --- modulename: LiteralElement, funcname: instantiate
LiteralElement.py(57):         context.processorNss = self.namespaces
LiteralElement.py(58):         context.currentInstruction = self
LiteralElement.py(60):         processor.writers[-1].startElement(self.nodeName,
LiteralElement.py(61):                                            self._output_namespace,
LiteralElement.py(62):                                            self._output_nss)
 --- modulename: XmlWriter, funcname: startElement
XmlWriter.py(241):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(243):         if not self._inFirstElement:
XmlWriter.py(248):         self._elementName = tagName
XmlWriter.py(249):         self._elementUri = namespace
XmlWriter.py(250):         (prefix, local) = SplitQName(tagName)
XmlWriter.py(253):         if extraNss:
XmlWriter.py(257):             namespaces = self._namespaces[-1].copy()
XmlWriter.py(258):         namespaces[prefix] = namespace
XmlWriter.py(259):         self._namespaces.append(namespaces)
XmlWriter.py(260):         return
LiteralElement.py(64):         for (qname, namespace, value) in self._output_attrs:
LiteralElement.py(90):         for attr_set_name in self._use_attribute_sets:
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(30):             in_head_tag = (self._elementName.lower() == u'head')
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(50):             namespaces = {}
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(52):                 if namespace != self._namespaces[-2].get(prefix):
XmlWriter.py(51):             for prefix, namespace in self._namespaces[-1].items():
XmlWriter.py(56):             self._printer.startElement(self._elementUri, self._elementName,
XmlWriter.py(57):                                        namespaces, self._attributes)
 --- modulename: HtmlPrettyPrinter, funcname: startElement
HtmlPrettyPrinter.py(43):         if self._inElement:
HtmlPrettyPrinter.py(48):         key = (namespaceUri, tagName.lower())
HtmlPrettyPrinter.py(51):         inline = key in self.inlineElements
HtmlPrettyPrinter.py(53):         if not inline and not self._isInline[-1] and not self._indentForbidden:
HtmlPrettyPrinter.py(54):             self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(56):         HtmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrettyPrinter.py(57):                                  attributes)
 --- modulename: HtmlPrinter, funcname: startElement
HtmlPrinter.py(85):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(90):         if tagName.lower() in self.noEscapeElements:
HtmlPrinter.py(93):         XmlPrinter.startElement(self, namespaceUri, tagName, namespaces,
HtmlPrinter.py(94):                                 attributes)
 --- modulename: XmlPrinter, funcname: startElement
XmlPrinter.py(111):         if self._inElement:
XmlPrinter.py(115):             self._inElement = True
XmlPrinter.py(117):         self.writeAscii('<')
XmlPrinter.py(118):         self.writeEncode(tagName, 'start-tag name')
XmlPrinter.py(121):         for prefix, uri in namespaces.items():
XmlPrinter.py(128):         for name, value in attributes.items():
XmlPrinter.py(130):         return
HtmlPrinter.py(97):         self.writeAscii('>')
HtmlPrinter.py(98):         self._inElement = False
HtmlPrinter.py(99):         return
HtmlPrettyPrinter.py(60):         self._isInline.append(inline)
HtmlPrettyPrinter.py(61):         self._inNoIndent.append(key in self.noIndentElements)
HtmlPrettyPrinter.py(62):         self._indentForbidden += self._inNoIndent[-1]
HtmlPrettyPrinter.py(63):         self._level += 1
HtmlPrettyPrinter.py(64):         self._indentEndTag = False
HtmlPrettyPrinter.py(65):         return
XmlWriter.py(59):             self._elementName = self._elementUri = None
XmlWriter.py(60):             self._attributes.clear()
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(99):             child.instantiate(context, processor)
 --- modulename: ValueOfElement, funcname: instantiate
ValueOfElement.py(24):         context.processorNss = self.namespaces
ValueOfElement.py(25):         context.currentInstruction = self
ValueOfElement.py(27):         text = Conversions.StringValue(self._select.evaluate(context))
 --- modulename: AttributeInfo, funcname: evaluate
AttributeInfo.py(395):         try:
AttributeInfo.py(396):             return self.expression.evaluate(context)
 --- modulename: ParsedStep, funcname: evaluate
ParsedStep.py(28):         (node_set, reverse) = self._axis.select(context, self._nodeTest.match)
 --- modulename: ParsedAxisSpecifier, funcname: select
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(146):             return node.localName == self._name
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
 --- modulename: ParsedNodeTest, funcname: match
ParsedNodeTest.py(145):         if node.nodeType == principalType and not node.namespaceURI:
ParsedNodeTest.py(147):         return 0
ParsedAxisSpecifier.py(102):         result = [ node for node in context.node.childNodes
ParsedAxisSpecifier.py(104):         return (result, 0)
ParsedStep.py(29):         if self._predicates and len(node_set):
ParsedStep.py(31):         return node_set
ValueOfElement.py(28):         if text:
ValueOfElement.py(29):             if self._disable_output_escaping:
ValueOfElement.py(32):                 processor.writers[-1].text(text)
 --- modulename: XmlWriter, funcname: text
XmlWriter.py(90):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(91):         self._printer.text(text, not escapeOutput)
 --- modulename: HtmlPrinter, funcname: text
HtmlPrinter.py(174):         if self._inElement:
HtmlPrinter.py(178):         disableEscaping = disableEscaping or self.disableOutputEscaping
HtmlPrinter.py(179):         XmlPrinter.text(self, data, disableEscaping)
 --- modulename: XmlPrinter, funcname: text
XmlPrinter.py(207):         if self._inElement:
XmlPrinter.py(211):         if disableEscaping:
XmlPrinter.py(217):             self.writeEscape(text, self.textEntities)
XmlPrinter.py(218):         return
HtmlPrinter.py(180):         return
XmlWriter.py(92):         return
ValueOfElement.py(34):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
ForEachElement.py(57):             for child in self.children:
ForEachElement.py(59):             pos += 1
ForEachElement.py(54):         for node in node_set:
ForEachElement.py(61):         context.set(state)
 --- modulename: Context, funcname: set
Context.py(85):         self.node, self.position, self.size = state
Context.py(86):         return
ForEachElement.py(62):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(78):                 self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(78):                 self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
LiteralElement.py(98):         for child in self.children:
LiteralElement.py(101):         processor.writers[-1].endElement(self.nodeName,
LiteralElement.py(102):                                          self._output_namespace)
 --- modulename: XmlWriter, funcname: endElement
XmlWriter.py(263):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(264):         self._printer.endElement(namespace, tagName)
 --- modulename: HtmlPrettyPrinter, funcname: endElement
HtmlPrettyPrinter.py(69):         self._level -= 1
HtmlPrettyPrinter.py(70):         inline = self._isInline.pop()
HtmlPrettyPrinter.py(72):         if self._inElement:
HtmlPrettyPrinter.py(77):             if not inline and not self._indentForbidden and self._indentEndTag:
HtmlPrettyPrinter.py(78):                 self.writeAscii('\n' + (self.indent * self._level))
HtmlPrettyPrinter.py(80):             HtmlPrinter.endElement(self, namespaceUri, tagName)
 --- modulename: HtmlPrinter, funcname: endElement
HtmlPrinter.py(108):         if namespaceUri is not EMPTY_NAMESPACE:
HtmlPrinter.py(112):         element = tagName.lower()
HtmlPrinter.py(113):         if element not in self.forbiddenEndElements:
HtmlPrinter.py(114):             self.writeAscii('</')
HtmlPrinter.py(115):             self.writeEncode(tagName, 'element name')
HtmlPrinter.py(116):             self.writeAscii('>')
HtmlPrinter.py(119):         if element in self.noEscapeElements:
HtmlPrinter.py(121):         return
HtmlPrettyPrinter.py(82):         self._indentForbidden -= self._inNoIndent.pop()
HtmlPrettyPrinter.py(83):         self._indentEndTag = not inline
HtmlPrettyPrinter.py(84):         return
XmlWriter.py(266):         del self._namespaces[-1]
XmlWriter.py(267):         return
LiteralElement.py(103):         return
TemplateElement.py(75):             for child in self.children:
TemplateElement.py(85):             if context.recursiveParams is not None:
TemplateElement.py(89):                 break
TemplateElement.py(90):         return
Stylesheet.py(573):                         context.varBindings = current_variables
Stylesheet.py(574):                     return 1
Processor.py(774):         return
Processor.py(723):         self.writers[-1].endDocument()
 --- modulename: XmlWriter, funcname: endDocument
XmlWriter.py(84):         self._completeLastElement()
 --- modulename: HtmlWriter, funcname: _completeLastElement
HtmlWriter.py(29):         if self._elementName and self._elementUri == EMPTY_NAMESPACE:
HtmlWriter.py(32):             in_head_tag = False
HtmlWriter.py(34):         XmlWriter.XmlWriter._completeLastElement(self)
 --- modulename: XmlWriter, funcname: _completeLastElement
XmlWriter.py(48):         if self._elementName:
XmlWriter.py(61):         return
HtmlWriter.py(36):         if in_head_tag:
HtmlWriter.py(47):         return
XmlWriter.py(85):         self._printer.endDocument()
 --- modulename: XmlPrinter, funcname: endDocument
XmlPrinter.py(69):         if self._inElement:
XmlPrinter.py(72):         return
XmlWriter.py(86):         return
Processor.py(726):         self.stylesheet.idle(node, self, docInputSource.uri)
 --- modulename: Stylesheet, funcname: idle
Stylesheet.py(488):         for instruction in self.root.idleInstructions:
Stylesheet.py(490):         return
Processor.py(729):         self._lastOutputParams = self.writers[-1]._outputParams
Processor.py(731):         del self.writers[:]
Processor.py(733):         if internalStream:
Processor.py(735):             result = outputStream.getvalue()
Processor.py(739):         return result
test4suite.py(13): print html
<html>
  <body>
    <h1>Person List</h1>
    <ul>
      <li>NicolasNormand</li>
      <li>J&eacute;r&ocirc;meDavid</li>
      <li>R&eacute;miLehn</li>
      <li>TortooseBrun</li>
      <li>TortooseBrun</li>
      <li>Mika&euml;lBarbero</li>
    </ul>
  </body>
</html>
