<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
                      "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
                      
<chapter id="intro">
	<title>Introduction</title>

	<section>
		<title>Motivations et objectifs</title>
		
		<para>
			Les volumes de données numériques échangés croissent toujours plus. Afin de permettre des opérations de recherches et de visualisations sous différents formats, ces données sont de plus en plus structurées avec comme norme commune le standard XML.
		</para>
		<para>
			Dans l'ensemble des opérations qu'il est possible d'effectuer sur les documents XML, la transformation structurelle est une opération qui apparaît comme fondamentale de part la multiplication des dialectes XML elle-même due à la forte croissance de celui-ci dans l'industrie.
		</para>

		<section>
			<title>Transformation de documents XML</title>
			
			<para>
				La transformation de documents XML permet de transformer (<foreignphrase>sic</foreignphrase>) un document source en un document de sortie. Ce document de sortie peut-être soit un autre document XML, soit un flux binaire (série d'octets). Nous ne nous intéresserons uniquement aux transformations de premier type, c'est à dire de XML à XML. Les transformations sont omniprésentes dans la chaîne de traitement de l’information structurée sur le Web, depuis la création jusqu’à la présentation, en passant par l’échange 
entre applications dans les services Web. Quelques langages spécialisés dans la transformation de documents XML commencent à émerger, XSLT étant sans doute le plus 
répandu.
			</para>
		</section>
	
		<section>
			<title>Optimisation des performances</title>
			
			<para>
				Aller toujours plus vite, produire toujours plus avec moins. Voici le moteur de notre industrie. Il en est de même en informatique. Étant donnée le succès de XML et sa diffusion de plus en plus large, il devient urgent de trouver des moyens d'optimiser le traitement et notamment les tranformations de documents XML.
			</para>
			<para>
				Les langages de transformations comme XLST s'avèrent en effet limité dans leur capacité à traiter des documents avec de très grandes masses d'informations car ils nécessitent de connaître la totalité du document source afin de produire le document cible même si une petite partie du premier était suffisante. C'est la même chose lorsque l'on reçoit un document XML en streaming et que le traitement doit-être effectué avant que la totalité du document ne soit reçu.
			</para>
			<para>
				Le principal facteur limitant du langage XSLT est donc sont orientation traitement par lot, où la totalité du document est transformée d'un coup. Notre soucis à nous est d'obtenir un transformateur dynamique dans lequel les changements dans le document source sont répercutées de manière optimales dans le document cible.
			</para>
		</section>
	
		<section>
			<title>Problématique de la transformation incrémentale</title>
			
			<para>
				La transformation incrémentale est un procédé visant à optimiser l’exécution d’une 
transformation déjà appliquée en tirant partie de son exécution précédente.
			</para>
			<para>
				Prenons l'exemple d'un document XML et d'une transformation s'appliquant à ce document. Cette transformation a déja été appliquée une fois et a donc produit un premier document cible. Une modification intervient dans le document source. Nous avons alors deux stratégies que l'on peut adopter.
			</para>
			<para>
				La première est celle qui est utilisé avec les processeur courants, à savoir on réexécute la totalité de la transformation et on recréé entièrement le document cible. Certe, on est sûr d'obtenir un document cible à jour mais si la modification dans le document source est simple, il y a fort à parier que la différence entre le premier document cible et celui que l'on vient de récréer seront minimes. Nous avons donc fait des calculs redondants et avons perdu du temps par cette méthode.
			</para>
			<para>
				La seconde stratégie consiste à réutiliser le document cible déja créer et de le modifier afin de le rendre cohérent par rapport au document source et à la transformation. Le but est donc ici de répercuter de manière optimale les modifications du document source. Le mot optimal est important car si le temps passé à répercuter ces modifications est supérieur à la réexécution complète de la transformation, mieux vaut prendre cette deuxième solution.
			</para>
		</section>

		<section>
			<title>Optimisation de l'expérience utilisateur</title>
			
			<para>
				Dans le contexte de traitements de documents textuels, il est bien souvent interressant et tentant de modifier le document cible que le document source. Par exemple, changer la mise en page d'un document HTML est plus tentante que de modifier le document DocBook, par exemple, à partir duquel il a été généré.
			</para>
			<para>
				Les langages de transformations de documents XML comme XSLT ne prennent pas en compte cette dimension et cela peut se révéler frustrant. Notre but sera de fournir un processeur qui, dans les cas déterministes, repercutera les changements du document cible dans le document source.
			</para>
		</section>

		<section>
			<title>Problématique de la transformation inverse</title>
			
			<para>
				Le grand manque de ces langages de transformations est sans aucun doute le support des transformations inverses. La transformation inverse consiste à mettre à jour le document source en fonction des modifications effectuées dans le document cible.
			</para>
			<para>
				Prenons le même exemple que pour la problématique de la transformation incrémentale et supposons que nous disposons déja du processeur incrémental. Le problème est de répercuter la modifications de l'arbre cible dans l'arbre source. Cela ne se révèle possible de manière décidable que dans le cas ou la transformation (ou une sous-partie de la transformation) est un isomorphisme. Le problème de la transformation inverse est donc de détecter quelles sont les sous-parties de la transformation qui sont des isomorphismes et par extension si la transformation complète n'est pas elle-même un isomorphisme.
			</para>
		</section>

	</section>

	<section>
		<title>Cadre du travail</title>
		
		<para>
			Le bureau numérique... blabla...
		</para>
	</section>

	<section>
		<title>Organisation du rapport</title>
		
		<para>
			Recherche bilblio &amp; conception...
		</para>
	</section>

</chapter>