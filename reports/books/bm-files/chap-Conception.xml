<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="Conception" >
<title>Conception</title>
<para>
Dans ce chapitre nous étudierons les différents supports technologiques disponibles pour réaliser notre moteur XSLT incrémental, nous détaillerons ensuite l'architecture du support choisi. Enfin nous évoquerons l'intégration nécessaire entre les traitement supplémentaires liés à l'aspect incrémental et le support d'origine.
</para>
<section id="Plateformes_technologiques_etudiees" ><title>
Plate-formes technologiques étudiées</title>
<section id="Criteres_etudies" ><title>
Critères étudiés</title>
<para>Les critères permettant l'évaluation d'une plate-forme technologique sont les suivants :</para>
<itemizedlist>
<listitem><para>
Qualité du code</para></listitem>
<listitem><para>
Extensibilité</para></listitem>
<listitem><para>
Robustesse</para></listitem>
<listitem><para>
Conformité</para></listitem>
<listitem><para>
Licence</para></listitem>
</itemizedlist>
<para>L'évaluation de la qualité du code est forcément assez subjective, mais on s'est attaché à vérifié que ce dernier semblant clair, c'est à dire qu'on comprends rapidement son fonctionnement global, et bien sûr qu'il est documenté.</para>
<para>L'extensibilité est évalué par la possibilité ou non d'enrichir le comportement classique du programme et dans quelle mesure cette extension peut éviter de trop s' immiscer dans le code d'origine.</para>
<para>La robustesse d'un programme est directement proportionnelle à son degré d'utilisation ainsi qu'à son âge, ainsi les programmes reconnus et utilisés dans de nombreux projets pourront être qualifiés comme stable tandis que des programmes jeunes, encore <quote>expérimentaux</quote> ne le seront pas.</para>
<para>La conformité d'un programme de traitement XSLT est testée sur des exemples de traitements sur des données relativement importantes, telles que des rapports au format DocBook traités avec les feuilles de style (quelques peut alambiquées) de Norman Walsh.  Le résultat sera comparé avec celui de référence, ici on considérera que le résultat de référence est celui du programme XSLTproc. Par la même occasion on pourra tester les performances. </para>
<para>Enfin la licence, il s'agit d'augmenter un programme, de l'enrichir, par conséquent il faut tout d'abord en avoir l'autorisation. De plus on cherchera à évaluer par ce biais les possibilités de réutilisation du programme modifié dans d'autres projets.</para>

</section>

<section id="LibXSLT_et_XSLTproc" ><title>
Lib-XSLT et XSLTproc</title>
<para><quote>XSLTproc</quote> est probablement le programme le plus répandu lorsqu'il s'agit de traiter via XSLT sur les plate-formes venant du monde Unix. Le programme utilise la  bibliothèque de fonctions <quote>Lib-XSLT</quote> elle même reposant largement sur <quote>Lib-XML</quote> : réalisée en langage C, elle est extrêmement robuste et est utilisée dans de nombreux projets. Elle fait partie du projet GNOME.</para>
<para>La qualité du code source est satisfaisante, les fonctions sont  quasiment toutes documentées.</para>
<para>La licence du projet n'est pas la licence GPL ou même LGPL, elle est encore moins restrictive et permet de réutiliser ce projet sous n'importe quelles conditions.</para>
<para>Du fait du langage C, l'extensibilité de cette librairie est toutefois limitée, on peut assez difficilement inculquer un nouveau comportement sans avoir à modifier de nombreuses parties du code source.</para>

</section>

<section id="PyXml" ><title>
PyXml</title>
<para>PyXml est un module Python permettant le traitement de données de type XML. A terme ce module devrait augmenter le module de la distribution standard de Python. Il offre entre autres des API telles que DOM, SAX ou encore minidom.</para>
<para>Ce module dispose d'un sous-module de traitement XSLT, cependant ce dernier n'est en réalité qu'une colle logicielle (<foreignphrase>binding</foreignphrase>) vers la Lib-XSLT en langage C.</para>
<para>Cependant dans les dernières versions de PyXml on trouve une implémentation native en Python du support XSLT. Le résultat est encore très instable et incomplet. Cette fonctionnalité est à l'heure qu'il est qualifiée d' expérimentale et ne devrait donc pas être utilisée.</para>

</section>

<section id="4XSLT_de_4Suite" ><title>
4XSLT de 4Suite</title>
<para>4Suite est un module de traitement XML, qui à l'instar de PyXml est en Python. Il propose de nombreuses API qui vont du support DOM, SAX et miniDOM à celui de Relax-NG ou du RDF.</para>
<para>Contrairement à l'implémentation de PyXml, ici tout est réalisé de manière native en Python, sans colle logicielle.</para>
<para>La qualité du code source est très bonne, toutes les classes sont documentées et de nombreux test unitaires ont été réalisés. Le fonctionnement de 4Suite et de 4XSLT en particulier est donc assez immédiat à saisir.</para>
<para>La robustesse du projet est difficile à évaluer, il est disponible depuis maintenant assez longtemps et est utilisé dans quelques autres projets. Il a cependant une audience moindre que la Lib-XSLT.</para>
<para>L'extensibilité est cependant excellente, du fait du langage Python, orienté objet, on peut aisément augmenter le module sans qu'il y ai la moindre modification dans le code source de départ.</para>
<para>La conformité du processeur XSLT est très bonne bien que pas tout à fait similaire au document de référence. De petites différences existent. </para>
<para>En terme de performances, si l'on retranche le temps de chargement de l'interpréteur Python, les performances sont tout à fais comparables à celles de XSLTproc. Cela n'est donné qu'à titre d'indication car aucun protocole de test précis n'a été mis en place.</para>
<para>La licence est une licence dérivée de la licence Apache et permet donc une réutilisation du code sous la condition que l'on n'utilise pas les noms réservés du projet, telles que 4Suite ou 4XSLT.</para>

</section>

<section id="Xalan_et_autres.." ><title>
Xalan</title>
<para>Xalan est un moteur XSLT disponible en Java. Il a déjà été rendu incrémental par les travaux de Lionel Villard <biblioref linkend="vil2000"/>. </para>

</section>

<section><title>
Conclusion</title>
<para>Après avoir évaluer ces solutions notre choix se porte sur le module 4Suite. En effet il présente toutes les qualités nécessaires et le fait qu'il s'agisse d'un langage de haut niveau va nous permettre de nous concentrer sur la problématique du projet sans s'encombrer de trop de problèmes techniques.</para>

</section>

</section>

<section id="Analyse_de_4XSLT" ><title>
Analyse de 4XSLT</title>
<section id="Vue_logique" ><title>
Vue logique</title>
<para>
4Suite est un module python divisé en plusieurs sous modules, chacun correspondant à un domaine bien précis des technologies XML. Ce module couvre a peut prêt tout ce que l'on peut souhaiter autour du langage XML.
</para>
<figure>
<title>Vue d'ensemble de 4Suite</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/4SuiteOverview.png"/>
</imageobject></mediaobject>
</figure>
<para>
Interessons-nous au sous-module XSLT. Son fonctionnement est le suivant: l'utilisateur du module crée un processeur XSLT. Il associe à ce processeur une ou plusieurs feuilles de transformation.Au moment de cette association le module va créer des instances d'éléments XSLT en fonctions des fichiers associés au processeur. Ces instances sont organisées à la manière de DOM. Ensuite l'utilisateur lance l'exécution du processeur sur un fichier XML donné (il peut aussi le faire sur un arbre DOM existant). Ce fichier XML est transformé lui aussi en un arbre DOM d'instances, ensuite le processeur lance le processus d'instanciation des éléments XSLT liés à la racine de la feuille de transformation. Cette instanciation est déclenchée de père en fils, chaque noeud XSLT y exécutant son opération propre, la transformation est effectuée. Le résultat est obtenue sous la forme d'un arbre DOM.
</para>

</section>

<section id="Fonctionnement_global" ><title>
Fonctionnement</title>
<para>
Le diagramme suivant détaille le processus d'instanciation.
</para>
<figure>
<title>Diagramme de séquence - Processus d'instanciation</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/pic-40.png"/>
<!--file:///home/t0rt00se/Travail/SILR3/pTrans/XSLTinc/reports/books/bm-files/images/seqDiagramInstantiate.png-->
<!--pic-40.png-->
</imageobject></mediaobject> </figure>
<section id="Les_elements_XSLT" ><title>
Les éléments XSLT</title>
<para>Tous les éléments XSLT sont modélisés par une classe donnée. Ainsi on trouve les classes <emphasis>NumberElement</emphasis>, ou encore <emphasis>ValueOfElement</emphasis>. Elles héritent toutes de la classe XSLTElement qui leur fourni le comportement de base type DOM.</para>
<para>Cette classe définie de plus une méthode appelée <emphasis>instantiate</emphasis>. Cette dernière est appelée au moment de l'instanciation du template sur un contexte donné. C'est dans cette méthode que l'on retrouvera l'opération spécifique à l'élément XSLT, ainsi dans la classe <emphasis>ValueOfElement</emphasis> on évaluera l'expression données (selon le contexte) et on écrira le résultat de cette évaluation dans la sortie du traitement.</para>
<para>Une objet de la classe <emphasis>AttributeElement</emphasis> va lui chercher à ajouter au noeud courant dans le résultat un attribut et sa valeur. Il est utile de préciser que dans cette méthode chaque élément à la responsabilité de lancer la méthode <emphasis>instantiate</emphasis> sur ses éléments fils.</para>
<figure>
<title>Diagramme de classe - Les éléments XSLT</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/pic-39.png"/>
<!--file:///home/t0rt00se/Travail/SILR3/pTrans/XSLTinc/reports/books/bm-files/images/classDiagramElements.png-->
<!--pic-39.png-->
</imageobject></mediaobject> </figure>


</section>

<section id="Evaluation_des_expressions" ><title>
Évaluation des expressions</title>
<para>L'évaluation des expressions est réalisé dans le sous-module Xpath. Elle utilise de nombreuses classes, chacune représentant un atome possible de l'expression. Lorsque cette dernière est évaluée, on récupère une arborescence d'atomes de type différents (Number,String,Choice..)</para>
<para> Voici une vue d'ensemble de ces classes:</para>
<figure>
<title>Diagramme de classe - Les attributs XSLT</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/AttributeInfo.png"/>
</imageobject></mediaobject>
</figure>


<para> Chacune de ces classes est associées à une autre classe dont le nom est suffixé par AVT. Ceci signifie <emphasis>Attribute Value Templates</emphasis>, il s'agit des expressions que l'on peut rencontrer entre crochets <emphasis>{}</emphasis>. Il s'agit en fait d'un raccourci appelant automatiquement l'évaluation d'expression classique, ainsi on peut écrire:
</para>
<programlisting>
<![CDATA[<xsl:tempalte match ="x">
  <elem attrib="{une-valeur}">
]]>
</programlisting>
<para>
Où <emphasis>une-valeur</emphasis> peut-être n'importe quelle expression XPath.
</para>
<para>
Chacune des classes héritant de <emphasis>AttributeInfo</emphasis> est responsable de sa propre évaluation. Autrement dit elle doit renvoyer la valeur résultant de l'évaluation lors d'un appel à la méthode <emphasis>evaluate</emphasis>.
</para>
</section>

<section>
<title> Modélisation du contexte</title>
<para>
Le contexte d'exécution est modélisé par une instance d'une classe <emphasis>XSLTContext</emphasis>, elle même héritant d'une classe <emphasis>Context</emphasis> présente dans le module XPath.
</para>
<figure>
<title>Diagramme de classe - Contexte et processeur XSLT</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/ContextAndProcessor.png"/>
</imageobject></mediaobject>
</figure>
<para>
Ce contexte stocke les informations suivantes: le noeud et la position courante, la taille actuelle du résultat et l'espace de nommage courant du processeur. Le contexte spécifique à XSLT ajoute à ces informations d'autres, spécifiques à l'aspect XSLT, telles que la feuille de transformation courante, le mode de sortie ou encore l'instruction XSLT courante.
</para>
</section>
</section>
</section>
<section>
<title>Conception du projet</title>
<para>
Notre approche sera similaire à celle utilisée dans IncXSLT. L'objectif est de pouvoir rapidement identifier à chaque modification de l'arbre DOM source les règles de transformation qui dépendent de lui. On peut réaliser cette liaison de deux manières, la première, utilisée dans IncXSLT, consiste à associer à chaque élément XSLT faisant appel à une expression des règles de réévaluation. A chaque modification de l'arbre source, ces règles sont parcourues afin de déclencher la réévaluation des expressions si nécessaire. On peut tout aussi bien lier directement les éléments DOM source concernés à leurs éléments de transformation, cependant cela nécessite de garder à l'esprit le fait que tout ajout dans l'arbre DOM doit déclencher une recherche des expression dépendantes de ce dernier.</para>
<para>
Dans tous les cas il faut donc bien un composant capable d'associer à un noeud XML un noeud XSLT en se basant sur l'expression de ce dernier. Ce composant se basera sur la capacité qu'aura chaque noeud XSLT à fournir les règles de réévaluation le concernant. Cette capacité sera à ajouter à l'implémentation actuelle de 4Suite.
</para>
<para>
Il s'agit donc d'ajouter aux expressions que l'on retrouve dans les attributs des éléments XSLT, la capacité de renvoyer les règles de ré-évaluation.Ces règles sont agrégées dans un objet permettant par la suite de donner toutes les instructions XSLT à ré-éxecuter pour, par exemple, un type de noeud modifié. La règle de réévaluation n'est en réalité qu'une expression XPath réduite, dans laquelle on ne trouve aucune référence au contexte. Ainsi il suffit qu'un élément modifié <emphasis>match</emphasis> ces expressions afin que l'on identifie les règles à ré-éxecuter. On peut donc se reposer en grande partie sur l'implémentation de XPath.
</para>
<para>
Voici le diagramme de classe découlant de ce fonctionnement:
</para>
<figure>
<title>Diagramme de classe - règles de réévaluation</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/XSLTIncDiagClassBasic.png"/>
</imageobject></mediaobject>
</figure>
<para>
Et voici un diagramme de séquence montrant l'exécution d'une session incrémentale.
</para>
<figure>
<title>Diagramme de séquence - instanciation incrémentale</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/XSLTIncDiagSeqBasic.png"/>
</imageobject></mediaobject>
</figure>
<para>
Un second point important est la modélisation de l'arbre d'exécution. Ceci afin de pouvoir restaurer le contexte du document source ainsi que le contexte du document cible le moment venu.
</para>
<para> L'arbre d'exécution est composé des instructions XSLT qui ont été instanciées lors de la transformation. On peut rapidement décider d'enlever un certains nombre d'instructions, en particulier celles qui n'ont pas du tout modifiées le contexte.</para>
<para>
Durant le traitement effectué par 4Suite, un arbre des différents contextes et crée, en effet durant l'instanciation le contexte courant est dupliqué, puis la copie sert au reste de l'instanciation. L'objectif est donc, au lieu de supprimer le contexte à la fin de l'instanciation, de le stocker, associé à l'instance d'élément XSLT qui a opéré. C'est donc de la responsabilité de cet élément XSLT. Il faut également stocker les références vers le document cible, afin de pouvoir modifier ce dernier.
</para>
<para>
À l'instar de IncXSLT les instructions XSLT seront donc classifiées en 4 types, instructions <emphasis>template</emphasis>, instructions de contrôle, de production et de variables. Chaque type correspond à des modifications différentes sur les contextes sources et cibles.
</para>
<section><title>Classification des éléments XSLT</title>
<informaltable frame="all">
  <tgroup cols="4">            <!-- on décrit le nombre de colonnes -->
  <thead>                      <!-- on passe au "header" du tableau -->
    <row>
      <entry>instruction template</entry>
      <entry>instruction de contrôle</entry>
      <entry>instruction de production</entry>
      <entry>instruction de variables</entry>
    </row>
  </thead>
  <tbody>                      <!-- et on remplit les lignes -->
    <row>
      <entry>template</entry>
      <entry>apply-imports</entry>
      <entry>attribute</entry>
      <entry>param</entry>
    </row>
    <row>
      <entry></entry>
      <entry>apply-templates</entry>
      <entry>comment</entry>
      <entry>variable</entry>
    </row>
    <row>
      <entry></entry>
      <entry>call-template</entry>
      <entry>copy</entry>
      <entry></entry>
    </row>
    <row>
      <entry></entry>
      <entry>choose</entry>
      <entry>copy-of</entry>
      <entry></entry>
    </row>
    <row>
      <entry></entry>
      <entry>for-each</entry>
      <entry>element</entry>
      <entry></entry>
    </row>
    <row>
      <entry></entry>
      <entry>if</entry>
      <entry>processing-instruction</entry>
      <entry></entry>
    </row>
    <row>
      <entry></entry>
      <entry>sort</entry>
      <entry>number</entry>
      <entry></entry>
    </row>
    <row>
      <entry></entry>
      <entry>otherwise</entry>
      <entry>text</entry>
      <entry></entry>
    </row>
    <row>
      <entry></entry>
      <entry>when</entry>
      <entry>value-of</entry>
      <entry></entry>
    </row>
    <row>
      <entry></entry>
      <entry>with-param</entry>
      <entry></entry>
      <entry></entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<para>
Les instructions templates ne font que déclarer une règle, les instructions de contrôles modifient la position de l'instruction courante, les instructions de production modifie le contexte du document cible tandis que les instructions de variables sont les seules à même de modifier les variables du contexte.
</para>
<para>
L'arbre d'exécution est donc un enchaînement d'instances de ces différentes classe d'instructions.
</para>
<para>
Cette classification entre les classes sera ajoutée au sein même des classes de 4XSLT.
</para>
<figure>
<title>Diagramme de classe de 4XSLT après ajout</title>
<mediaobject><imageobject><imagedata format="PNG" fileref="images/XSLTIncClassDiagElements.png"/>
</imageobject></mediaobject>
</figure>
<para>
La méthode <emphasis>getPatterns</emphasis> de la classe <emphasis>XSLTIncInstruction</emphasis> renvoi les expressions XPath simplifiées tandis que la méthode <emphasis>restoreCurrentContexts(ExecFlowTree XSLTIncInstruction)</emphasis> lance la restauration du contexte de la transformation à l'aide de l'arbre d'exécution.
</para>
</section>
<section><title>Intégration dans le processus de 4Suite</title>
<para>
Les grandes étapes qu'il va falloir ajouter au processus de transformation de 4XSLT sont les suivantes:
</para>
<itemizedlist>
<listitem>
     <para>Lors de la première transformation il s'agit de construire une structure nous permettant par la suite d'associer à chacune des instruction leur règles. Ces règles seront ensuite déclenchées lors d'un changement dans la structure DOM. Il va donc falloir modifier le comportement de toutes les classes d'instructions XSLT, en particulier au moment de l'instanciation.</para>
</listitem>
<listitem>
     <para>
     Il va par conséquent également falloir augmenter  la structure DOM de 4Suite afin qu'elle déclenche la mise à jour.
     </para>
</listitem>
</itemizedlist>
<para>
Grâce au langage Python, toute cette intégration pourra se faire de manière dynamique, lors de l'import du module XSLTinc ce dernier augmentera automatiquement les classes du module <emphasis>4Suite</emphasis>, ainsi on garde une totale indépendance vis-à-vis du code source de 4Suite et de celui des programmes l'utilisant, ils pourront continuer d'évoluer en parallèle sans remettre en cause le moteur incrémental.
</para>
</section>
</section>

</chapter>
