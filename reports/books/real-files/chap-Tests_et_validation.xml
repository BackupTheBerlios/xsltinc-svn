<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" 
                      "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
                      
<chapter id="tests_et_validation">
	<title>Tests et validation</title>

	<section>
		<title>Présentation du protocole de tests</title>
		<para>
		  Les tests réalisés pour le projet sont extrêmement classiques. Ils sont composés de tests unitaires réalisés en Python grâce au module "<emphasis>unittest</emphasis>" fourni en standard avec Python. À coté de ces tests unitaires sont réalisés des tests de performance simples, c'est à dire un calcul du temps d'exécution de la transformation incrémentale par rapport à la transformation initiale complète. Nous présenterons donc un tableau récapitulant ces données dans la partie consacrée à ces tests. Enfin, afin de valider le prototype réalisé, nous avons développé une petite application graphique qui permet de visualiser très rapidement les effets de la transformation incrémentale.
		</para>
	</section>
	
	<section>
	 <title>Tests unitaires</title>
	   <para>
	     Les tests unitaires sont directement programmés dans les modules du projet. À la manière de la définition d'une méthode "<emphasis>main</emphasis>" dans une classe Java, il est possible de tester si un module Python est exécuté de manière autonome et s'il doit donc lancer ses tests unitaires.
	   </para>
	   <para>
	     Ceux-ci sont codés grâce au module standard "<emphasis>unittest</emphasis>". Il fournit un certain nombre de méthodes qui facilitent l'écriture de tests unitaires très complets. Pour réaliser un "<emphasis>test case</emphasis>", il suffit alors d'étendre la classe "<emphasis>unittest.TestCase</emphasis>" et de créer des méthodes dont le nom commence par le mot "test". 
	   </para>
	   <para>
	     Les méthodes commençant par le mot "test" désignent donc un test unitaire qu'il convient de faire soigneusement. Un certain nombre de méthodes de la super classe "TestCase" permettent de définir des assertions sur le comportement attendu sur le test. Par exemple, "<emphasis>assertEqual</emphasis>" attend que les deux paramètres qui lui sont fournit soient égaux, sinon il fait échouer le test unitaire. De même "<emphasis>assertRaises</emphasis>" vérifie que l'appel d'une méthode avec certains paramètres lève bien les exceptions attendues.
	   </para>
	   <para>
	     Afin de permettre à ces tests de se lancer lorsque le module est exécuté de manière autonome, il convient d'écrire ce petit bout de code classique en Python :
	   </para>
	   <programlisting>if __name__ == "__main__":
  unittest.main()</programlisting>
	   <para>
	     Celui-ci vérifie en fait que le nom du module courant est "<emphasis>main</emphasis>" (ce qui est le cas uniquement lorsque c'est ce module qui est invoqué) et fait alors appel à la méthode <emphasis>main()</emphasis> du module "<emphasis>unittest</emphasis>". Grâce aux capacités d'introspection de Python, il regarde toutes les sous-classes de <emphasis>unittest.TestCase</emphasis> présentes dans le module et lance chaque méthode de ces classes commençant par "test". On voit ici encore le pouvoir de l'introspection en Python.
	   </para>
	   <para>
	      Ces tests ont été lancés régulièrement tout au long du développement afin de s'assurer que les modifications faites aux modules ne réalisaient pas de régression par rapport aux fonctionnalités attendues. Enfin, lorsqu'un bogue était découvert, un test unitaire était développé afin de le faire apparaître. Il pouvait ensuite être corrigé. Cette méthode permet d'obtenir un jeu de tests le plus couvrant possible.
	   </para>
	   <para>
	     Afin de lancer tout les tests unitaires, il suffit de lancer la commande suivante dans le répertoire du module xsltinc :
	   </para>
	   <programlisting>find ./ -name "*.py" -exec python {} \;</programlisting>
	</section>
	
	<section>
	 <title>Tests de performances</title>
	   <para>
	     Les tests de performances sont critiques lors de la mise en version incrémentale d'un algorithme. En effet, cette mise à jour nécessite de rajouter du comportement par rapport à celui d'origine et a donc un coût en terme de temps de calcul. Or le but de la version incrémentale de notre projet était bien de fournir une version qui optimisait ce coût de calcul. Il ne faut donc pas que le coût supplémentaire induit par les fonctionnalités supplémentaires fassent que la version incrémentale se révèlent plus coûteuse que la version d'origine. 
	   </para>
	   <para>
	     Dans ce but, des tests ont été réalisés tout au long du développement afin de s'assurer de ce principe. Bien entendu, ils ont été réalisés avec des tailles de documents variables mais aussi des types et des nombres de modifications divers que nous vous présentons dans le tableau ci-dessous de manière synthétique.
	   </para>
     <table frame='all'>
       <title>Temps d'exécution de la transformation incrémentale comparativement à la première</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<colspec colname='c3'/>
<thead>
<row>
  <entry>Modifications</entry>
  <entry>Petit document (5 éléments)</entry>
  <entry>Grand document (2000 éléments)</entry>
</row>
</thead>
<tbody>
<row>
  <entry>aucune</entry>
  <entry>0,98%</entry>
  <entry>0,01%</entry>
</row>
<row>
  <entry>1</entry>
  <entry>16,54%</entry>
  <entry>33,79%</entry>
</row>
<row>
  <entry>2 + 1 suppression</entry>
  <entry>29,3%</entry>
  <entry>55,42%</entry>
</row>
</tbody>
</tgroup>
</table>	
	</section>
	
	<section>
	 <title>Validation</title>
	 <para>
	   Afin de valider le prototype proposé et avoir une version de démonstration visuelle, nous avons décidé de réaliser un petite interface graphique qui montre les différents objets que nous traitons, à savoir : le document source, le document cible, la feuille de transformation, l'arbre de dépendance et enfin le temps d'exécution proportionnellement à la transformation d'origine.
	 </para>
	 <para>
	   Elle fournit aussi deux contrôleurs permettant de lancer, au choix, une transformation classique (complète), ou alors sa version incrémentale. De même, elle offre la possibilité à l'utilisateur d'éditer et / ou supprimer des noeuds textes.
	 </para>
	 <para>
	   Voici deux captures d'écran montrant l'interface graphique du prototype réalisé. On voit ici l'intérêt de la portabilité du langage Python ainsi que du cadriciel graphique Qt.
	 </para>
   <figure>
    <title>Capture d'écran du prototype sous KDE</title>
     <mediaobject>
      <imageobject>
        <imagedata format="PNG" fileref="images/sshot_kde.png"/>
      </imageobject>
     </mediaobject>
    </figure>	 
   <figure>
    <title>Capture d'écran du prototype sous MacOSX</title>
     <mediaobject>
      <imageobject>
        <imagedata format="PNG" fileref="images/sshot_macosx.png"/>
      </imageobject>
     </mediaobject>
    </figure>	     
	</section>

</chapter>
